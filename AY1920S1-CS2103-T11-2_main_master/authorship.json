[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "\u003d Module Appeal Management System (MAMS)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "https://travis-ci.com/AY1920S1-CS2103-T11-2/main[image:https://travis-ci.com/AY1920S1-CS2103-T11-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-T11-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103-T11-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "https://www.codacy.com/manual/SendorasLeft/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dAY1920S1-CS2103-T11-2/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/903da763b1f94f63af032fb931f04a38[Codacy Badge]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "https://app.netlify.com/sites/mams/deploys[image:https://api.netlify.com/api/v1/badges/b8669733-0c27-4bc8-80de-0c0c7aacbf5b/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "At the beginning of every semester, NUS appeal administrators process thousands of module appeals filed by students in a matter of weeks.  To ease their burden and speed up the appeal process, we created: MAMS (Module Appeal Management System)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "With MAMS, solving module appeals becomes easier. Our application provides quick access to relevant information to help decide the administrator decide the result for the appeal. As an appeal administrator, you may:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* View the appeal details and corresponding module clashes at one glance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* View a studentâ€™s particulars and modules taken."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* Add and remove modules for a student as well as change their Module Credit limits."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* The original source of the code is the AddressBook-Level3 project, created by the SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 4,
      "-": 24,
      "cheongliyuan": 12
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "mainClassName \u003d \u0027mams.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    archiveName \u003d \u0027mams.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 2,
      "-": 153
    }
  },
  {
    "path": "config/travis/deploy_github_pages.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "set -o errexit # exit with nonzero exit code if any line fails"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -z \"$GITHUB_TOKEN\" ]; then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set -o nounset # exit if variable is unset"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cd build/docs/html5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "git init"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.name \u0027Deployment Bot (Travis)\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "git config user.prevMods \u0027deploy@travis-ci.org\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "git config credential.helper \u0027store --file\u003d.git/credentials\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if git ls-remote --exit-code --heads upstream gh-pages; then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    git fetch --depth\u003d1 upstream gh-pages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    git reset upstream/gh-pages"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    git checkout --orphan gh-pages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "else # error occurred"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    exit $?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Exit if there are no changes to gh-pages files."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \u0027No changes to GitHub Pages files; exiting.\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "git add -A ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "git push --quiet upstream HEAD:gh-pages"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "MistyRainforest": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Module Appeal Management System (MAMS) was developed by team AY19/20S1-CS2103-T11-2 based on AddressBook - Level 3 +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Chen Su"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "image::chensu2436.png[width\u003d\"150\", align\u003d\"central\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "{empty}[https://github.com/chensu2436[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "\u003d\u003d\u003d Cheong Li Yuan"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "image::cheongliyuan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "{empty}[http://github.com/cheongliyuan[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "\u003d\u003d\u003d Luk Chi Heng"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::aaronluk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "{empty}[http://github.com/AaronLuk[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "\u003d\u003d\u003d Ng Yong Kuan"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::sendorasleft.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "{empty}[https://github.com/SendorasLeft[github]] [\u003c\u003csendorasleft#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "\u003d\u003d\u003d Tan Wei Adam"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::mistyrainforest.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "{empty}[http://github.com/MistyRainforest[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 4,
      "chensu2436": 6,
      "-": 40,
      "cheongliyuan": 3,
      "MistyRainforest": 6
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-T11-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "* *PrevMods us* : You can also reach us at `e0273854 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "MistyRainforest": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d Module Appeal Management System (MAMS) - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T11-2/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "By: `ay1920s1-cs2103-t11-2` Â Â Â Â  Since: `Sep 2019` Â Â Â Â  Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Acknowledgements: MAMS is adapted from AddressBook-Level3, a project created by SE-EDU initiative (available at `https://se-education.org`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `StudentListPanel`, `AppealListPanel`, `ModuleListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ".  `Logic` uses the `MamsParser` class to parse the user command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a module)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"undo\")` API call."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ".Interactions Inside the Logic Component for the `undo` Command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Classes used by multiple components are in the `mams.commons` package."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "//tag::clash[]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Clash feature"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "The clash feature is facilitated by an abstract `ClashCommand` class which extends abstract `Command` class and"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "three sub-classes which extends `ClashCommand` to handle different types of checking."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "The three sub-classes are:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* `ClashModCommand` -- check time slots clashes within two modules and return messages accordingly."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* `ClashStudentCommand` -- check time slots clashes within a particular student\u0027s timetable and return messages accordingly."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* `ClashAppealCommand` -- check time slots clashes between the requested module and the student\u0027s existing timetable for a \"Add Module\" appeal ."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "image::ClashCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Each sub-class has a `execute()` method that takes in a `Model` object. Clash commands only retrieve information from model but do not alter anything in the existing lists."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Below shows how the Clash Command mechanism behaves at each step."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Step 1. The user inputs `clash ...` to check whether there is clash in the timetable."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Step 2. The `ClashCommandParser` will be called first to check which of the three types of checking is evoked by checking the prefixes."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Step 3. Relevant `ClashModCommand`, `ClashStudentCommand`, or `ClashAppealCommand` object will be created accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Step 4. `ClashCommand.execute()` is called."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* If the command is a `ClashModCommand`, it will get the relevant `Module` objects from the list `model.getFilteredModuleList()`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* If the command is a `ClashStudentCommand`, it will get the relevant `Student` object from the list `model.getFilteredStudentList()`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "The student current modules are stored as String of module code to reduce coupling. Hence, modules taken by the student are retrieved from `model.getFilteredModuleList()` by matching module codes."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* If the command is a `ClashAppealCommand`, it will get the relevant `Appeal` object from the list `model.getFilteredAppealList()`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "The `Student` who submits the appeal and requested `Module` are stored as String of Matric ID and module code respectively in an `Appeal` object to reduce coupling."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Hence, `Student` who submits the appeal is retrieved from `model.getFilteredStudentList()` by matching Matric ID,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "and `Module` requested is retrieved from `model.getFilteredModuleList()` by matching module codes."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Step 5. Each `ClashCommand` returns a `CommandResult` object which contains the message of the clashing time slots if there are clashes and \u0027No clashes detected\u0027 if there is no clash."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "The following sequence diagram shows how the clash operation works:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "image::ClashSequenceDiagram.png[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to deal with different user inputs for different checking"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* **Alternative 1 (current choice):** Create three different sub-classes extending `ClashCommand` class. `ClashCommand` will deal with differentiating cases for checking and create Command object accordingly."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "** Cons: some of the code are different to be abstracted. (repeted codes in part of the two sub-classes to keep low coupling) May need to find a way to improve it in the future."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* **Alternative 2:** Only 1 `ClashCommand` class. The cases of checking are determined inside `ClashCommand`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "** Cons: Violates Single Responsibility Principle. `ClashCommand` is doing part of the parsing work."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: String representation of clashing time slots"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store time slot index and use them to create a temporary `Module` object."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "** Pros: Can reuse `getTimeSlotToString()` to obtain the string representation"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "** Cons: Redundant objects are created. More memory space used."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "// end::clash[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "//tag::find[]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Find feature"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "The find feature is facilitated by `FindCommand` class. The `FindCommand` constructor takes a `List` of `Predicates`, which can be `NameContainsKeywordsPredicate`, `ModuleContainsKeywordsPredicate`, or `AppealContainsKeywordsPredicate`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "image::PredicateClassDiagram.png[]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Find commands only retrieve information from model but do not alter anything in the existing lists."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Below shows how the Find Command mechanism behaves at each step."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Step 1. The user inputs `find prefix/[KEYWORDS]...`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Step 2. The `FindCommandParser` will be called first to check which of the three lists to search by checking the prefixes."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "`NameContainsKeywordsPredicate`, `ModuleContainsKeywordsPredicate`, and `AppealContainsKeywordsPredicate` will be created accordingly which stores all the keywords for the same list."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Step 3. A new `FindCommand` is created."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Even there is no keyword for a particular `Predicate`, a new `Predicate` object with an empty `List` of keywords will be passed in to create a new `FindCommand`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Eg. input: `find s/bob`. A new `FindCommand` is created with a `NameContainsKeywordsPredicate` with a `List` of keywords containing `bob`, and `ModuleContainsKeywordsPredicate`, and `AppealContainsKeywordsPredicate` with empty `List` of keywords."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Step 4. `FindCommand.execute()` is called. Each `Predicate` object is examined and calls `Predicate.test()`. `Model#updateStudentList()`, `Model#updateModuleList()`, or `Module#updateAppealList()` is called accordingly."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Step 5. A `CommandResult` object is returned, which contains message about the number of items found in the target list. The target list only shows the item contains keyword."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "The following sequence diagram shows how the Find operation works:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "image::FindSequenceDiagram.png[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "//tag::addremovemod[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "\u003d\u003d\u003d Add and remove module feature"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "The addmod/removemod mechanism is facilitated by an abstract `ModCommand` class which extends abstract `Command` class."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "There are the two sub-classes which extends `ModCommand` used to handle adding module or removing module function."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "The two sub-classes are:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* `AddModCommand` -- Add a module to a student (Registers the student for a particular module)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* `RemoveModCommand` -- Removes a module from a student (Drops a module from the student\u0027s workload)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "image::ModCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Each addmod or removemod command has a `execute()` method that takes in a `Model` object. These commands"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "retrieve information of all students and modules from model to get the relevant student and module."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "It then creates a copy of the relevant items and replaces the original ones in the global list of students and modules."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Below shows how the AddModCommand mechanism behaves at each step when adding a module to a student."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "RemoveMod command is functionally the opposite of AddMod command, but requires less checks to be done before successful"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "execution. For this developer guide, only AddMod commands sequence will be elaborated."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Step 1. The user inputs `addmod s/A0180000 m/CS1010` to add module CS1010 to student A0180000."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Step 2. The `ApproveCommandParser` will be called to parse the AddModCommand."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* When parsing the input, the `s/` prefix will be detected and `AddModCommandParser` will parse for a"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "student identifier. `m/` prefix will also be detected and parsed for a module identifier."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Step 3. `AddModCommand` object will be created."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Step 4. `AddModCommand.execute()` is called."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "The following activity diagram shows how `AddModCommand.execute()` works"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "image::AddModCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "`ApproveCommand.execute()`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* Step 1. Checks for the validity of student and module identifiers. If index is given as the identifier, the following"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "list(s) is used: `model.getFilteredModuleList` and `model.getFilteredStudentList`. If Matric Id is given for student identifier"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "or Module code is given for module identifier, it will get the following list(s) instead:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "`model.getFullModuleList` and `model.getFullStudentList`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* Step 2. Checks the following conditions that should prevent module from being added to student:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "** Check if the student already has the module (Is currently registered for module already)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "** Check if the student has completed the module before"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "** Check if the module current intake has already reached quota limit, and is unable to accept any more students"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "** Check if the student workload limit will not be exceeded if the module is added to the student"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "** Check if the module being added will clash with any existing modules the student is currently taking."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* Step 3. Creates a new student object and module object with the added module."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* Step 4. Creates a `CommandResult` object which calls `Model` to replace the old objects"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "with the newly created objects. The success message of addmod request will be returned."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "The following sequence diagram shows how ApproveCommand works:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "image::AddModSequenceDiagram.png[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "An exception is thrown when any of the checks fail. The break interaction operator is placed at the bottom"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "of all the checks in order to reduce vision clutter."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "//end::addremovemod[]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "//tag::resolve[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003d\u003d\u003d Resolve feature"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "The resolve feature is facilitated by an abstract `ResolveCommand` class which extends abstract `Command` class and"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "2 sub-classes which extends `ResolveCommand` for different types of appeal resolution."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "The 2 type of appeal resolution are:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* `Approve` -- approves an appeal."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* `Reject` -- rejects an appeal."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Each appeal resolution type has an individual and mass resolution command which extends its base type"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "The 2 types of resolution commands for `Approve` are"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* `ApproveCommand` -- approves an individual appeal by index shown in the in-app UI"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* `MassApprove` -- approves multiple appeals by the ID of appeals"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Similarly the types of resolution commands for `Reject` are"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* `RejectCommand` -- rejects an individual appeal by index shown in the in-app UI"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* `MassReject` -- rejects multiple appeals by the ID of appeals"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "image::ResolveCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Each appeal resolution command has a `execute()` method that takes in a `Model` object. Resolve commands retrieve information of all students and modules from model to get the relevant student and module."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "It then creates a copy of the relevant items and replaces the original ones in the global list of students and modules"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Below shows how the ResolveCommand mechanism behaves at each step when resolving a single appeal."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Reject commands behaves the same way as approve commands, except it will not make any changes to any students or module. For this developer guide, only approve commands sequence will be elaborated"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Step 1. The user inputs `approve a/2 r/Student meets requirements` to approve an appeal of index specified.  In this example the appeal index is 2."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Step 2. The `ApproveCommandParser` will be called to parse the individual approve command ."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* When parsing the input, the `a/` prefix will be detected and `ApproveCommandParser` will parse a single index and the remark after the optional field `r/`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Step 3. `ApproveCommand` object will be created."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Step 4. `ApproveCommand.execute()` is called."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "`ApproveCommand.execute()`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* Step 1. It will check the type of appeal of the appeal index specified by the user, it will check through `model.getFilteredAppealList()` and get the index of the appeal that matches that of the given one."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* Step 2. Checks whether the appeal has already been resolved with `Appeal.isResolved()`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* Step 3. If is not yet resolved, nature of appeal will be retrieved with `Appeal.getAppealType()`.  There are 3 types of appeal cases - add module, drop module and increase workload"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "** Add module"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  Check if relevant module and student exists by getting `model.getFullModuleList()` and `model.getFullStudentList()`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  Check for clashes between module requested and the modules the student is current taking (refer to 3.1 for implementation for `ClashCommand`)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  If no clashes are detected add student to module class list and module to the student\u0027s list of modules"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "** Drop module"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  Check if relevant module and student exists by getting `model.getFullModuleList()` and `model.getFullStudentList()`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  Check if student is taking the module"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  Removes specified module from student and student from module"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "** Increase workload"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  Increases the specified student\u0027s workload to the one specified in the appeal"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "The following activity diagram shows how `ApproveCommand.execute()` works"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "image::ApproveCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "The student current modules are stored as String of module code to reduce coupling. Hence, modules taken by the student are retrieved from `model.getFilteredModuleList()` by matching module codes."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "The `Student` who submits the appeal and requested `Module` are stored as String of Matric ID and module code respectively in an `Appeal` object to reduce coupling."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Hence, `Student` who submits the appeal is retrieved from `model.getFilteredStudentList()` by matching Matric ID,"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "and `Module` requested is retrieved from `model.getFilteredModuleList()` by matching module codes."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Step 5.  Upon approval of an appeal, `ApproveCommand` will return a `CommandResult` object which contains the message of the action performed.  Each appeal type will give a different feedback message."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Add module will inform user if approval is not allowed due to clashes in time table, else it will feedback the specified module has been added to the student by their IDs"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Drop module will inform user if approval is not allowed due to the student not having the module to be dropped in the first place, else if will feedback the specified module was removed from the student by their IDs"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Increase workload will inform user of the increase inthe student\u0027s Modular Credits limit"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "The following sequence diagram shows how ApproveCommand works:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "image::ResolveSequenceDiagram.png[]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Below shows how the ResolveCommand mechanism behaves at each step when resolving multiple appeals."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Step 1. The user inputs `approve mass/C000000 C000001 C000010` to approve all the appeals specifed."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Step 2. The `ApproveCommandParser` will be called to parse the mass approve command."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* When parsing the input, the `mass/` prefix will be detected and `ApproveCommandParser` will parse all the appeal IDs specifed.  Valid and invalid IDs will be separated into 2 lists."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Step 3. `MassApprove` object will be created with both the lists of valid and invalid IDs."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Step 4. `MassApprove.execute()` is called."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "`MassApprove.execute()`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Mass resolve commands `execute()` methods works the same as individual Resolve commands except it will loop through the list of valid Appeal IDs to resolve each one."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Successful resolution of each appeal in the valid appeal list will add the ID to successful list."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Similarly, appeal IDs from valid Appeal IDs that were not approved/rejected will be added to the unsuccessful list."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Also, because Mass resolve commands operates on appeal IDs, `model.getFullAppealList()` will be used instead of `model.getFilteredAppealList()`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* Step 1. It will check the type of appeal of the appeal index specified by the user, it will check through `model.getFullAppealList()` and get the index of the appeal that matches that of the given one."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* Step 2. Checks weather the appeal has already been resolved with `Appeal.isResolved()`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* Step 3. If is not yet resolved, nature of appeal will be retrieved with `Appeal.getAppealType()`.  There are 3 types of appeal cases - add module, drop module and increase workload"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "** Add module"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  Check if relevant module and the student exists by getting `model.getFullModuleList()` and `model.getFullStudentList()`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  Check for clashes between module requested and the modules the student is current taking (refer to 3.1 for implementation for `ClashCommand`)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  If no clashes are detected add the student to module class list and module to the student\u0027s list of modules"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "** Drop module"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  Check if relevant module and student exists by getting `model.getFullModuleList()` and `model.getFullStudentList()`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  Check if student is taking the module"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  Removes specified module from student and student from module"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "** Increase workload"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "***  Increases the specified student\u0027s workload to the one specified in the appeal"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "The following activity diagram shows how `MassApprove.execute()` works"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "image::MassApproveActivityDiagram.png[]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Step 5.  After resolving all the appeal IDs in the valid Appeal list, `MassApprove` will return a `CommandResult` object which contains the feedback message.  Feedback message will show a list of successfully approved appeal IDs,"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "a list of unresolved modules which include the list of invalid appeal IDs entered by user and appeal IDs"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "and a list of appeal IDs with time table clash detected."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "image::MassResolveSequenceDiagram.png[]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "To implement design considerations......"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "//end::resolve[]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "// tag::history[]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d Command History"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "The command history feature encapsulates a few different related functions, mainly:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* The ability to cycle through previous inputs in the `CommandBox` using the kbd:[\u0026uarr;]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "and kbd:[\u0026darr;] arrow keys."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* A command to open a new window displaying the command history"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- Optional parameters can be specified to hide command output"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* Persistent storage of command history - the history is serialized to JSON file format"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "and is loaded upon the next startup"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d\u003d Cycling Through Previous Inputs"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "The core of the cycle-command-history feature is implemented through three different classes:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " `CommandHistory`, `ListPointer`, and `InputOutput`. In addition, the `CommandBox` was modified"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "to accomodate the UX changes."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `InputOutput`: Class wrapper around two `String` objects representing the command input"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "and command feedback output from MAMS. It is chiefly comprised of an input and an output, hence"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "the name."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `CommandHistory`: A wrapper around a list of `InputOutput` objects along with specific methods, representing"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "the command history of the command entered thus far."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `ListPointer`: An iterable pointer to a `List` of objects."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- This differs from `java.util.Iterator` in the sense that `ListPointer#next()` always advances the pointer first then returns the"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "next element in the `List`, while `java.util.Iterator#next()` does the opposite: it returns"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "the current value, then advances the pointer."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- `ListPointer` was implemented using Java generics"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "to serve as a common utility class in `mams.common.util`, but is used primarily for"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "iterating a `List` of `InputOutput` objects for the command history feature."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `CommandBox`: The command box in MAMs was modified to respond to the kbd:[\u0026uarr;] and kbd:[\u0026darr;]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "arrows, constantly replacing the text field with the previous commands when iterating."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Below is a class diagram depicting the relationship between the involved classes for cycling"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "through previous inputs in the command box."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::CycleCommandHistoryClassDiagram.png[]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "`CommandHistory` provides an unmodifiable view into the command history using an `ObservableList`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "passed to `CommandBox` upon initialization. `CommandBox` uses this list to reinitialize and"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "update `ListPointer` after every command execution. Upon initialization, `ListPointer` keeps"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "an internal copy of the InputOutput list. Finally, `CommandBox` responds to key-presses and"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "retrieves the previous commands by using `ListPointer` to iterate"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "through its internal defensive list."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Below is a simple sequence diagram depicting this function. Note that some methods/pathways are not"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "depicted for brevity."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::CycleCommandHistorySequenceDiagram.png[]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "The diagram above first shows how `CommandBox` re-initializes and updates `ListPointer` after"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "a command has been entered. Thereafter (in the period between command inputs),"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "`KeyEvent` events are handled by `handleKeyPress`,"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "which replaces the text in its text field accordingly."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "To be continued..."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "placement of commandHistory attribute"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "alternatives: usage of ListPointer versus Iterator"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d\u003d Displaying History Window: `HistoryCommand`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "The `HistoryCommand` feature allows users to display a separate window showing the"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "MAMS input/output history upon command."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "The core of the `HistoryCommand` feature is facilitated by a few different classes:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `HistoryCommand`: A sub-type of `Command`. Represents a user command to trigger the display"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "of the history window."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `HistoryCommandParser`: A class to parse user input in the context of a `HistoryCommand`,"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "returning a `HistoryCommand`."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `HistoryWindow`: A UI class representing the controller for the history window. Displays information"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "about the command history to the user"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `CommandHistory`: see previous section."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "The following activity sequence diagram provides a high-level view"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "of how the command is executed:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::HistoryCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "One specific execution example of the show-history feature with"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "more specific implementation details is as follows:"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "1. User enters `history -h` into command box."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "2. A `HistoryCommand` object is created after parsing, with `hideOutput` set to true."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "3. `HistoryCommand` is executed and produces a `CommandResult`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "with `showHistory` and `hideOutput` flags set to true."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "4. `CommandResult` is passed to the calling GUI element (`MainWindow`), which is then used to set"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "the flags in `HistoryWindow` contoller accordingly."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "5. `HistoryWindow` hides all command outputs in the history window."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "6. `MainWindow` gets `CommandHistory` from `Logic`, and uses it to update `HistoryWindow`."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "7. GUI displays the history window."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "This specific execution case is shown in the following sequence diagram. Note that some"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "methods are omitted for brevity."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::HistoryCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "NOTE: The lifeline for `HistoryCommandParser` and `HistoryCommand` should end at the destroy marker (X), but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Design Considerations*"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* Current Implementation: `HistoryCommand` sets boolean flags (`showHistory` and `hideOutput`)"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "in `CommandResult` to prompt the GUI to display the history window and hide command outputs"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "respectively."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** `CommandHistory` does not need to be passed in as a parameter for"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "`Command#execute`. There is thus no need to"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "modify the existing `Command` abstract class, which will require"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "changes to every single existing `Command` sub-type (for very little benefit,"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "since `HistoryCommand` is the only existing `Command` that acts on `CommandHistory`)."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** `HistoryCommand` does not need to handle the formatting and display of"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "`CommandHistory` in the history GUI window. This separates their responsibilities"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "better as such display options should be left up to the GUI classes."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** Since `HistoryCommand` only sets parameter flags for the `HistoryWindow`, and"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "the `HistoryWindow` controller gets the history data directly from an `ObservableList`, the"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "history window GUI is able to update while adhering to the user-specified configuration"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "(ie. hide output/ show output) after every command iteration, even if `HistoryCommand` is not executed."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** If more parameters need to be added to `HistoryCommand` (eg. filter history"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "display by execution success) in future iterations of MAMS, more boolean flags"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "will have to be added to the `CommandResult` class. This can eventually be"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "unsustainable if there are too many parameters that needs to be communicated"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "to the GUI."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* Alternative Implementation 1: Change the method signature in `Command#execute(Model model)`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "to accept a `CommandHistory` object. `HistoryCommand` will format the command history"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "text based on the user specifications, then pass the formatted text as a single string in the"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "`feedbackToUser` parameter. The `HistoyWindow` controller will then display this text on"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "on the history window."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** Since all of the user specifications and flags are processed within execution of"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "`HistoryCommand`, `CommandResult` does not need to store too many flags if future"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "parameters are added to `HistoryCommand`. (Refer to the current implementation)"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**  Cons:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** Requires a change to `execute()` method signature of the `Command` abstract class. Since all"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "other commands are a sub-type of the `Command` class, this will require a change to every other"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "command, which will necessitate huge changes across many classes and tests, and may result"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "in regression problems,."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** Text display formatting is handled directly by the `HistoryCommand` class, which limits"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "the ability of the GUI to customize the display. Moreover, the `HistoryCommand` class is now"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "in charge of one aspect of the display formatting, which is not a good separation of responsibilities"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "between the `Logic` and `Ui` components of MAMS."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** If the entire command history is passed to `Logic` as a `CommandResult` feedback of"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "an executed `HistoryCommand`, future requests of the command history will also include"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "that that particular `HistoryCommand` feedback."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**** A crude CLI example of this is shown below."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " \u003e\u003e history"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " input: list -a"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " output: listed all appeals"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " \u003e\u003e history"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " input: list -a"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " output: listed all appeals"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " input: history"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " output: input: list -a"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         output: listed all appeals"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " \u003e\u003e history"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " input: list -a"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " output: listed all appeals"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " input: history"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " output: input: list -a"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         output: listed all appeals"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " input: history"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " output: input: list -a"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         output: listed all appeals"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         input: history"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         output: input: list -a"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                 output: listed all appeals"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**** Special conditionals hence needs to be implemented to handle"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "such cases when updating `CommandHistory`, which can make the implementation"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "more complicated."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "// end::history[]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "// tag::ui[]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d UI/UX"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "The GUI interface from AddressBook-Level3 was re-designed to incorporate additional"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "elements and features for MAMS. These include:"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* Two additional types of List Panels, up to a total of 3. (`AppealListPanel`,"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "`ModuleListPanel`, `StudentListPanel`)"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* Two additional types of List Cards, up to a total of 3. (`AppealCard`, `ModuleCard`,"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "`StudentCard`)"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* Three additional types of Expanded Cards, up to a total of 3. The purpose of these"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "is to serve as a full display of information contained in each item type, as opposed to"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "the brief summary shown on the normal List Cards. (`ExpandedAppealCard`, `ExpandedModuleCard`,"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "`ExpandedStudentCard`) [Ongoing]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* CSS Theme redesign for a more vibrant dark mode interface"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* Simple unix-style command history (up and down arrows to cycle"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "through previously entered commands)"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "The existing elements adapted from AddressBook are:"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* Command Box"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* Result Box"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Although it may at first seem natural to define a common ListPanel parent for all three types of ListPanels due"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "to the similar semantics behind them, they share almost no fields or method signatures in common. The same goes for"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Cards and Expanded Cards."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d\u003d List Panel (`AppealListPanel`, `ModuleListPanel`, `StudentListPanel`)"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Each type of List Panel is built to contain their respective cards (eg. `AppealListPanel` can contain a list of"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "`AppealCard` or a `ExpandedAppealCard`). The fields shown on each card is specific to the type, but are similar in nature."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "As an example, the `ModuleCard` contains the following GUI elements:"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `ModuleCard#moduleCode` - `Label` element displaying module code"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `ModuleCard#moduleName` - `Label` element displaying the module name"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `ModuleCard#id` - `Label` element displaying the card\u0027s index within the displayed list"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `ModuleCard#lecturerName` - `Label` element displaying the name of the module coordinator"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `ModuleCard#timeSlot` - `Label` element displaying the weekly lecture slots for the module"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `ModuleCard#enrolment` - `Label` element displaying student enrolment in text form"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `ModuleCard#quota` - `Label` element displaying total module capacity in text form"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `ModuleCard#quotaBar` - `ProgressBar` element displaying the filled student capacity (enrolment \u0026 total capacity) of the module in a"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "visual bar representation."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* Miscellaneous `Label` elements as descriptors of some elements above (eg. `Coordinator:`)"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "In addition, the `ModuleListPanel` may also hold an `ExpandedModuleCard`. Although an Expanded Card contains all the fields"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "present in their corresponding Card, they are formatted differently to take advantage of the additional height, and also have additional"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "fields present. As an example, the `ExpandedModuleCard` contains the following fields in addition to the ones above:"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `ExpandedModuleCard#description` - `Text` element displaying the full description of the module"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `ExpandedModuleCard#students` - `Text` element displaying the full list of students in the module"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "When the GUI detects only one item in the List Panel to be displayed, it automatically defaults to using the Expanded Card"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "for displaying the item, eg., performing a `find` command that returns only one module as the result will cause the GUI to display"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "the single module using `ExpandedModuleCard`."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "to be continued..."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "// end::ui[]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "//tag::undo[]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "\u003d\u003d\u003d Backup and undo actions feature"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "The backup feature is facilitated by an abstract `StoreCommand` class which extends abstract `Command` class and"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "three sub-classes which extends `StoreCommand` to handle different types of saving and restoring actions."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "The three sub-classes are:"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "* `SaveCommand` -- Creates a snapshot of MAMS as a backup and stores it as a json file in data."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "* `UndoCommand` -- Undo last action."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "* `RedoCommand` -- Redo last undo."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "image::StoreCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Each sub-class has a `execute()` method that takes in a `Model` object. Store commands only retrieve information from /data file and replaces the current state with the targeted state."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Below shows how the Store Command mechanism behaves at each step."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Step 1. The user inputs `undo/redo/backup ...`."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Step 2. The relevant parser class is called."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Step 3. Relevant StoreCommand object will be created accordingly depending on steps required to store or restore states."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Step 4. `StoreCommand.execute()` is called."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "* If the command is a `UndoCommand`, it will store a snapshot in the data file under its corresponding tag."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "* If the command is a `RedoCommand`, it will check if a redo action is availiable, restores the state and update the saved states as required."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "* If the command is a `SaveCommand`, it will store a snapshot in the data file under its given tag or a tagged with a timestamp to avoid overwriting previous data if tag is not given."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "The save states are stored in the same format as the mams.json data file to reduce coupling of the saving mechanism and the save commands."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Step 5. Each `StoreCommand` returns a `CommandResult` object which contains the success or failure of the action and the filename the backup is saved under if applicable."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Dealing with storage of states"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "* **Current Choice:** Saves state to data folder in the same file format as the main data."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "** Pros: Persistence of previous actions independent of running state of the program, allows for crash recovery in the event the program is exited incorrectly."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "** Cons: Opens the program up to attacks that target the data folder, as the states are now accessable outside of the program instead of protected by a layer of abstraction."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "* **Alternative :** Saves states as internal list of states"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "** Pros: States are only accessable using the application, protecting it from unwanted modifications."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "** Cons: States are limited to current instance of the application, and history cannot be transfered between sessions"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Replacing the current state with targeted undo/redo states"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "* **Current choice:** Reads lists stored in targeted data file and replaces current data with targeted data"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "** Pros: Does not require knowledge of implementation of running state, thus reducing coupling of StoreCommand and program state."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "** Cons: Requires StoreCommand to be modified each time a new type of list is implemented."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "* **Alternative :** Replace the whole model with a new instance of target model"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "** Pros: Decreases coupling between internal implementation of any lists and StoreCommand"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "** Cons: Increases coupling between the Logic class and Command subclasses"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "// end::undo[]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "A specialized Appeal Administrator that handles module appeals during"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "the hectic start-of-semester module registration in the National"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "University of Singapore. He/She:"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* has a need to view large lists of modules, appeal cases, and student"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "particulars"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* has a need to edit current student/appeal/module information to"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "resolve appeal cases"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* has *neither the authority nor need* to add/remove students, appeals,"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "and modules to/from the current database (out of job purview)"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* needs to keep a permanent log of all actions taken when resolving appeals."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Value proposition*: View, manage, and resolve appeals as fast as or"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Epic: As a admin, I want to be able to view module/student/appeal data."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|Priority |As a/an â€¦ |I want to â€¦ |So that I canâ€¦"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |be able to view lists of students/appeals/modules |"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |filter lists of students/appeals/modules by year/module"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "info/type |quickly find specific items of interest"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |be able to view the full expanded details of a"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "student/appeal/module |"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |be able to view lists or items side-by-side |easily"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "cross-reference information between modules/students/appeals."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |be able to find a module/appeal/student using their"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "unique ID sequences |locate details of persons without having to go"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "through the entire list"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |check for clashes between modules |determine if a"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "student can take up the module he/she requested for"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |check for clashes in a studentâ€™s timetable |determine"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "if a student have sufficient reason to drop the pre-allocated modules"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |group types of appeal cases |resolve multiple of the"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "same type of appeal cases"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |check the vacancy of a module |Check if module can take"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "in additional students"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* *` |admin |be able to decide which pane (left/right) the results of"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "my command (list or object view) shows up on |"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Epic: As an admin, I want to be able to edit module/student/appeal data."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|Priority |As a/an â€¦ |I want to â€¦ |So that I canâ€¦"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |add a module to a student |resolve their appeal request"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |remove a module from a student |"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |update the name list of students taking the module |"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |increase the number of MCs allocated to a student"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|allow the student to take more classes"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |add remarks to a student page |refer back at a later"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "time if needed"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |admin |mass approve and reject |Approve and reject multiple"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "appeals with one command"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* *` |admin |add a reason for the rejection |inform them why their"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "appeal was not approve"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Other User Stories"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|Priority |As a/an â€¦ |I want to â€¦ |So that I canâ€¦"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* * *` |new admin |see usage instructions |refer to instructions when"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "I forget how to use the App"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d User Stories up to v2.0 (coming soon!)"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|Priority |As a/an â€¦ |I want to â€¦ |So that I canâ€¦"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "|`* *` |admin |send an automated prevMods to the involved student once I"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "resolve an appeal |alert them to the appeal outcomne easily and quickly"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* *` |admin |encrypt all data when writing them back to disk |ensure"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "security in handling sensitive student information under privacy laws"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* *` |admin |mass approve and reject |Approve and reject multiple"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "appeals with one command"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "|`* *` |admin |send short messages/prevModss to lecturers/other admin staff"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|consult them for further information that may be needed for appeal"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "resolution"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`* *` |careless admin |undo my previous commands |"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`*` |admin |cycle through my command history using the `up\u0027 button"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|easily resuse previously typed commands"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`*` |new admin |view resolved appeal cases from previous semesters |use"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "them as precedents to make decisions for other appeal cases"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`*` |admin |be able to toggle between different colourschemes for the"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "app |"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`*` |admin |archive appeal cases |view an uncluttered list of appeals"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|`*` |admin |get alerts on oversubscribed modules |receive early"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "warnings of modules likely to receive appeal requests"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "(For all use cases below, the System is the MAMS application and the"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Actor is the admin, unless specified otherwise)"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d UC01: Resolving an Appeal Request to Drop a Pre-allocated Module"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Pre-condition: System has only just been opened, and is showing a list"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "of appeals by default."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "1.  Admin views the details of the first appeal."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "2.  Admin displays the full information of the module-of-interest."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "3.  Admin displays the full information of the student-of-interest."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "4.  Admin removes the pre-allocated module from student."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "5.  Admin marks the appeal as approved, with an approval message to be"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "displayed to the student."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case ends.*"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* 2a. MAMS suggests an autocomplete based on the displayed appeal"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "information *(Coming in v2.0)*"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case resumes at step 1.*"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* 4a. Student workload goes below the minimum MC requirement for one"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "semester"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** 4a1. MAMS alerts the admin and asks for confirmation"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** 4a2. Admin confirms the decision."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case resumes at step 5.*"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d UC02: Approve second appeal in the list (a request from student to add a module)"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Pre-condition: System has only just been opened, and is showing a list"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "of appeals by default."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "1.  Admin views the details of the appeals in the displayed list"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "2.  Admin requests to view appeal details of 2nd appeal in the list."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "3.  MAMS shows the appeal details(student particulars, module requested)"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "4.  Admin requests to check potential clash of module requested by"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "student with studentâ€™s existing modules"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "5.  MAMS shows that there are no clashes"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "6.  Admin requests to add module to student"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "7.  MAMS adds module to student"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "8.  Admin requests to approve appeal"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "9.  MAMS marks appeal as approved"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case ends.*"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* 4a. MAMS shows that there is a clash between requested module and a"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "module student A is currently taking"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** 4a1. Admin proceeds to reject appeal"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "** 4a2. MAMS marks appeal as rejected"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case ends.*"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* 5a. MAMS indicates that the module has reached max student capacity."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "MAMS does not add the student in as the module is unable to accept any"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "more students"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "+"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** 5a1. Admin requests to reject appeal"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** 5a2. MAMS marks appeal as rejected"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case ends.*"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d UC03 Approve request to increase work load"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Pre-condition: System has only just been opened, and is showing a list"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "of appeals by default."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "1.  Admin views details of appeal"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "2.  Admin views expanded view of student-of-interest"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "3.  Admin sees grades of student and deems he is capable of having a"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "higher workload"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "4.  Admin increases workload of the student"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "5.  Admin approves the appeal"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "6.  MAMS mark appeal as approved"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case ends.*"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d UC04: Approve request from a student to add a module with clashes in timetable"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Pre-condition: System has only just been opened, and is showing a list"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "of appeals by default."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "1.  Admin requests to check potential clash of module requested by"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "student with studentâ€™s existing modules."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "2.  MAMS shows that there are clashes."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "3.  Admin requests to add the module to the student with clashes."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "4.  MAMS asks for confirmation to add the module to the student."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "5.  Admin adds a remark to the approval case."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "6.  Admin adds the student to the module."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "7.  Admin requests to approve appeal."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "8.  MAMS marks appeal as approved."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case ends.*"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d UC05: Viewing Command History"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "1.  Admin instructs MAMS to bring up command history"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "2.  MAMS opens a view of the command history."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "3.  After viewing, admin closes the view."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case ends.*"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* 2a. Admin uses hot-keys to navigate entries in command history view."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case resumes at step 3.*"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* 2b. Admin wants to copy a particular command in the history."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** 2b1. Admin navigates to history entry of interest (using extension 2a or otherwise)."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** 2b1. Admin copies contents of command to clipboard (hotkey or otherwise)"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case resumes at step 3.*"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* 2c. Admin uses hot-keys to exit command history view."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case ends.*"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "\u003d\u003d\u003d UC06: Add a module to a student"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Numerous extensions are shown, there are many criteria that prevent a module from being"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "added to a student."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Pre-condition: System has only just been opened, and is showing a list"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "of appeals, modules and students by default."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "1. Admin request to add a module to a student"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "2. MAMS approves requests and adds the module to the student"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "3. Admin closes MAMS program"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "4. MAMS exits."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "*Use case ends.*"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* 2a. MAMS detects an invalid module code given."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "** 2a1. Admin repeat requests with correct module code given."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "** Use case resumes from step 2"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* 2b. MAMS detects an invalid student id given."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "** 2b1. Admin repeat requests with correct matric id given."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "** Use case resumes from step 2"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* 2c. MAMS detects that the student is already taking the module."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "** 2c1. Admin searches for the student in the list."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* 2d. MAMS detects that the student has already completed the module before."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* 2e. MAMS detects that the quota limit for the Module has been reached."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* 2f. MAMS detects that the student has reached max credit limit, and cannot take his module."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* 2g. MAMS detects that the module is clashing with the modules the student is currently taking."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "** Use case for 2d-2g resumes from step 3"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "\u003d\u003d\u003d (Coming in 2.0) UC07: Encrypt and Archive this semesterâ€™s appeal cases"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Pre-condition: System has only just been opened, and is showing a list"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "of appeals by default."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "1.  Admin requests to encrypt this semesterâ€™s appeal cases"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "2.  MAMS requests for a password to be set"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "3.  Admin provides a password"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "4.  MAMS accepts password and encrypts this semesterâ€™s appeal cases."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "5.  Admin requests to save the encrypted file"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "6.  MAMS prompts admin for file save location"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "7.  Admin selects a location"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "8.  MAMS saves the encrypted file to the location"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case ends.*"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* 6a. Admin chooses not to save the file"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** 6a1. Admin requests to shut down MAMS"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** 6a2. MAMS asks the Admin if the encrypted file should be saved before"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "shutting down"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** 6a3. Admin declines"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** 6a4. MAMS saves the encrypted file to a temporary location, to be"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "retrieved on next startup."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "+"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Use case ends.*"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".  An admin with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "than using the mouse."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".  Should be quick and efficient, with each use case above taking less"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "than 5 minutes to navigate (excluding the time needed for user"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "consideration and decision)"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".  Should be convenient for users to view details of different objects"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "at the same time."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".  Should be able to hold up to 40000 students and 1000 modules without"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".  Should only load data from current semesters by default."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".  Should have a dark theme/comfortable visual interface as the user"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "might spend long hours on MAMS."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".  (Coming in 2.0) Should be able to differentiate between"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "student/appeal/module data from different semesters."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".  Should be able to hold up to 40000 students and 1000 modules without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[[module]] Module::"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "A module refers to a course taken by a National Univerisity"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "of Singapore (NUS) student during a semester. These can be semester-long"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "or year-long."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[[appeal]] Appeal::"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "An appeal refers to a formal request by a student seeking"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "permission for receiving special exceptions to module arrangements, or"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "for correcting anomalous system errors made during module allocation."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[[mc]] MC::"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Modular Credits, a weightage of the module workload. As of"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "AY2019/2020, the minimum semester workload for a student is 16 MCs, and"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "without special permissions, the default maximum is typically 26 MCs."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 522,
      "AaronLuk": 131,
      "chensu2436": 76,
      "-": 348,
      "cheongliyuan": 122,
      "MistyRainforest": 47
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all persons who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Credits`, `PrevMods`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Credits: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The above method can be used to get a printable string representing a bunch of person details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "return getPrintableString(p.getCredits(), p.getPrevMods(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "-": 214,
      "MistyRainforest": 2
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ". Run the `mams.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 83
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "e.g. `mams.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "e.g. `mams.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "e.g. `mams.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 3,
      "-": 49
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d The Module Appeal Management System (MAMS) - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ":repoURL: https://ay1920s1-cs2103-t11-2.github.io/main/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "By: `ay1920s1-cs2103-t11-2`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "The Module Appeal Management System (MAMS) is a desktop app that aims to combine Command Line Interface (CLI) style commands with a dual-pane GUI for easy navigation of module appeals, module information, and student particulars. This app is particularly aimed towards *module appeal administrators who prefer to work through their heavy backload of module appeals without ever having to leave the comfort of the keyboard for their mouse*. The MAMS system can quickly bring up entire lists of students, appeals, and modules for side-by-side comparison, with specific display commands to view the expanded details of any particular object in question. Once reviewing of the information is complete, the MAMS system also provides a suite of commands for resolving appeals, overriding MC limits, and leaving special notes on students."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ".  Download the latest `MAMS.jar` link:https://github.com/AY1920S1-CS2103-T11-2/main/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for The Module Appeal Management System (MAMS)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Broadly speaking, the MAMS handles three main types of items: *Students, Appeals, and Modules*. Each of these items may be further grouped into sub-lists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "eg. Students may be organized by matriculation year, course of study etc."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "A student is uniquely identified by his/her 8-character Matriculation Number starting with a letter, eg. `A0132243`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "An appeal request is uniquely identified by a prefix `C`, followed by a 6-digit Case ID, eg. `C123456`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "A module is uniquely identified by a COURSE_PREFIX (eg. `CS` for Computer Science) and a 4 character sequence. eg. `CS2103`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* Each command must begin with a command word. See each command below for the list of associated command words."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user eg. `DESCRIPTION_OF_TASK` denotes that you should provide a short description of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* Items enclosed by square brackets are optional parameters that can be passed in eg. `view OBJECT_ID [l/]` can be used as `view A0122432Z l/` or `view 230293`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* Any item that is followed by an ellipsis (`...`) can be used multiple times including zero eg. `[m/PARAMETER]...` can be used as, `m/CS2103` , `m/210` etc."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* Parameters within square brackets can be supplied in any order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* Tags will often be used in the command to specify the targeted list for the command. Certain commands allow operations on multiple lists."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "** `a/` : prefix for the `Appeal List`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "** `m/` : prefix for the `Module List`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "** `s/` : prefix for the `Student List`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Viewing single objects: `view`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "This command brings up an item with fully expanded details on a single pane. Multiple MAMS items can be displayed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "in one single command, as long as they are from different types."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Format: `view [a/INDEX] [m/INDEX] [s/INDEX]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Note: Even though all the parameter tags are marked as optional, at least one must be present for the command to"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "execute. In the case where a parameter tag is used more than once, the last tag of that type will be accepted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Tags:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `a/INDEX`: displays the expanded details of the appeal at `INDEX` on the displayed appeal list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `m/INDEX`: displays the expanded details of the module at `INDEX` on the displayed module list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `s/INDEX`: displays the expanded details of the student at `INDEX` on the displayed student list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Sample Input:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `view m/7`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::ViewCommandDemoBefore.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Sample Output: Fully expanded administrative details of the module at index 7."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::ViewCommandDemoAfter.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Listing objects by specified lists: `list`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Format: `list [-a] [-m] [-s]`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Tags:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `-a`: lists out all appeals in MAMS"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `-m`: lists out all modules in MAMS"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `-s`: lists out all students in MAMS"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* if no tags are specified, `list` command will behave as though all three tags have be applied. ie. it will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "list out all appeals, modules, and students."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Sample Input:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `list -a -s`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::ListCommandDemoBefore.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Sample Output: Lists all appeals and students in MAMS"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::ListCommandDemoAfter.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d Command History"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d\u003d Cycle through command history"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "In the command box (the area where you type in commands), you can cycle through your previous inputs by using the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrow keys. They will autofill the command box with the previous and next input stored"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "in the command history respectively."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::HistoryCommandArrowDemoBefore.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "After pressing kbd:[\u0026uarr;]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::HistoryCommandArrowDemoAfter.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d\u003d Show command history: `history`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Opens a separate window displaying the command history in MAMS. The display of the command feedback can be turned"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "off."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Format: `history [-h]`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Tags:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `-h`: hide the command feedback in the history window"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* if no tags are supplied, the `history` command will show both command input and command feedback history in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "history window."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Sample Input:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* `history`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::HistoryCommandDemo.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Sample Output: Opens a window displaying command history"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "image::HistoryWindowDemo.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "TIP: (Still experimental) By pressing kbd:[q], the currently selected command"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "in the history window can be copied to the clipboard."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d\u003d\u003d Sync Command History to disk"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Command history is automatically saved to disk whenever it is updated with new inputs."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Upon the next MAMS startup, previous command history will be loaded from disk as well."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Find keywords: `find`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Displays item(s) that contain(s) any of the keyword(s) in the specified list(s)."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Format: `find [a/KEYWORD...] [m/KEYWORD...] [s/KEYWORD...]`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Tags can be in any sequence. User may enter multiple keywords after a tag."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "*Searching Criteria*"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* In Appeal list, items that contains any of the keywords in Appeal Type, Appeal ID, Status(resolved/unresolved),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "or Modules Requested will be displayed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* In Module list, items that contains any of the keywords in Module Code, Module Name, or Module Description wil be displayed."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* In Student list, items that contains any of the keywords in Student Name will be displayed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Searching criteria listed above are evaluated to be the most useful ones in order to filter the lists quickly and obtain"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "necessary information. Wider range of searching will be implemented in v2.0."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* `find s/larry m/programming`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sample Output:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "image::FindDemoSingleKeyword.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* `find a/add drop`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sample Output:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "image::FindDemoMultipleKeywords.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Show clashes: `clash`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d\u003d Show clashes in an appeal"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Checks if the module a student is requesting for clashes with his/her current existing modules."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Only appeals requesting to add or drop module will need for clash checks. If the target appeal is not of any of the two"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "types, a reminder message will be shown."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Format: `clash [a/INDEX]`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* `clash a/1`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sample output:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "image::ClashCommandInvalidAppealType.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* `clash a/6`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sample output:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "image::AppealClashDetected.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d\u003d Show clashes in student timetable"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Checks if there are clashes in a studentâ€™s (pre-allocated) timetable. This command is typically used to verify whether"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "there is really a timetable clash in the student\u0027s pre-allocated timetable if the student submits an appeal to drop a"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "pre-allocated module due to timetable clash."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Format: `clash [s/INDEX]`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* `clash s/1`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sample output:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "image::StudentClashDetected.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d\u003d Show clashes between 2 modules"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "This command checks to see if the lecture slots of 2 modules clashes, and displays the result to the user."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Format: `clash [m/MODULE_CODE] [m/MODULE_CODE]` or `clash [m/INDEX] [m/INDEX]`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* `clash m/cs1010 m/cs1020`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sample output:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "image::NoClashDetectedResponse.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* `clash m/1 m/2`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sample output:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "image::ModuleClashDetected.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Add or remove modules `addmod` \u0026 `removemod`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d\u003d Add a module to a student"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "This command adds a module to specific student. Either Index or matric id"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "can be used. If both are given, index takes priority."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Format: `addmod s/STUDENT_ID m/MODULE_CODE` or"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "`addmod i/INDEX m/MODULE_CODE`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Sample input 1:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* `addmod s/A0180000 m/CS1010`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "image::AddModCommandDemoBefore1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sample output:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "`Added module to : Celina Conyers`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "image::AddModCommandDemoAfter1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Sample input 2:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* `addmod i/1 m/CS1010`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "image::AddModCommandDemoBefore2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Sample output:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* `Student is already registered for this module.`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "image::AddModCommandDemoAfter2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d\u003d Removing a module from student\u0027s timetable"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "This command removes a existing module from a student. Either Index or matric id"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "can be used. If both are given, index takes priority."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Format: `removemod s/STUDENT_ID m/MODULE_CODE` or"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "`removemod i/INDEX m/MODULE_CODE`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Sample input 1:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* `removemod s/A0180000 m/CS1010`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "image::RemoveModCommandDemoBefore1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sample output:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* `Removed module from : Celina Conyers`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "image::RemoveModCommandDemoAfter1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Sample input 2:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* `removemod i/1 m/CS1010`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "image::RemoveModCommandDemoBefore2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sample output:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* `Student is not registered for this module.`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "image::RemoveModCommandDemoAfter2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Update maximum workload for a student: `set`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sets an existing studentâ€™s maximum modular credit for this semester to a new value."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Format: `set STUDENT_ID NEW_MC` New MC must be a positive integer"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* `set A0111111B 28`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sample output:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "`Updated  maximum workload of student A0111111B to 28 MC.`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "\u003d\u003d\u003d Undo and Redo: `undo/redo`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "This command allows the administrator to undo last command made."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sample Output:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "`Redo Successful`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Approve an appeal: `approve`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Marks an existing appeal as approved, with an optional message that can be supplied in the remarks section of the appeal results."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003d\u003d\u003d\u003d Approve appeals individually"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Format: `approve [a/INDEX] [APPEAL_REMARK]`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Sample Input:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* `approve a/4 r/watch your workload`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "image::beforeApprove.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Sample Output:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "image::afterApprove.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003d\u003d\u003d\u003d Approve appeals in bulk"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Format: `approve mass/ [APPEAL_ID]...`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Sample Input:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* `approve mass/ C0000005  C000006 C000002  C000212 Cdfdsf`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "image::beforemassapprove.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Sample Output:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "image::aftermassapprove.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u003d\u003d\u003d Reject an appeal: `reject`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Marks an existing appeal as rejected. with an optional message that can be supplied in the remarks section of the appeal results."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003d\u003d\u003d\u003d Reject appeals individually"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Format: `reject [a/INDEX] [APPEAL_REMARK]`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Sample Input:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* `reject a/1 r/student not suitable for high work load`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "image::beforeReject.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Sample Output:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "image::afterReject.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003d\u003d\u003d\u003d Reject appreals in bulk"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Format: `reject mass/ [APPEAL_ID]...`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Sample Input:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* `reject mass/ C000000  C000007`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "image::beforemassreject.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Sample Output:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "image::aftermassreject.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Saves a snapshot of the current state under the data folder with the name \"mamshistory_[TAG]\". If no tag is given, a timestamp is used instead."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Format `backup [t/TAG]`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Example: `backup t/Backup_1`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Sample Output: `Backup Successful. Saved under \"data/mamshistory_Backup_1\""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* **list**:  `list [-a] [-m] [-s]`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- e.g. `list -a -s` to list out all appeals and students in MAMS."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* **view**: `view [a/INDEX] [m/INDEX] [s/INDEX]`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- e.g. `view a/1 m/7` to view expanded details of appeal and module at indexes 1 and 7 respectively"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* **history**: `history [-h]`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- eg. `history` to open the history window"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* **find**: `find [a/KEYWORD...] [m/KEYWORD...] [s/KEYWORD...]`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "- e.g. `find a/cs1010 m/data algorithm`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "* **clash**:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "** `clash [m/MODULE_CODE] [m/MODULE_CODE]` or `clash [m/INDEX] [M/INDEX]`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "- e.g. `clash m/cs1010 m/cs1020` shows clash details between CS1010 and CS1020;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Or `clash m/2 m/4` to shows clash details between the modules at indices 2 and 4 respectively."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "** `clash [s/INDEX]`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "- e.g. `clash s/2` to shows clash details in a studentâ€™s (prea-llocated) timetable."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "** `clash [a/INDEX]`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "- e.g. `clash a/INDEX` to show if the module a student is requesting for clashes with his/her current existing modules."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* **addmod**: `addmod s/STUDENT_ID m/MODULE_CODE` or `addmod i/INDEX m/MODULE_CODE`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "- e.g `addmod s/A0180000 m/CS2103` `addmod i/10 m/CS2103`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "To add module CS2103 to student A0180000"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* **removemod**: `removemod s/STUDENT_ID m/MODULE_CODE` or `removemod i/INDEX m/MODULE_CODE`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "- e.g `removemod s/A0180000 m/CS1020` `removemod i/4 m/CS1020`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "To remove module CS2103 from student A0180000"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* **set**: `set STUDENT_ID NEW_MC`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "- e.g. `set A0180000 28`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "To set the studentâ€™s maximum modular credit for this semester to a new value."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "* **remark**: `remark s/STUDENT_ID rr/REMARKS`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "- e.g. `remark A0180000 timetable clash waivered`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "To add remarks to a studentâ€™s particulars page"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* **approve**:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "** `approve [a/INDEX] [r/REMARK]`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "- e.g `approve a/2 r/meets requisites` Marks the 2nd appeal in the appeal list as approved."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "** `approve mass/ [APPEAL_ID]...`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "- e.g `approve mass/C0000023 C000034`  Marks the shown appeal IDS as approved"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "* **reject**:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "-"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "** `reject [a/INDEX] [r/REMARK]`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "- e.g `reject a/2 r/meets requisites` Marks the 2nd appeal in the appeal list as rejected."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "** `reject mass/ [APPEAL_ID]...`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "- e.g `reject mass/C0000023 C000034`  Marks the shown appeal IDS as rejected"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 87,
      "AaronLuk": 42,
      "chensu2436": 193,
      "-": 109,
      "cheongliyuan": 42,
      "MistyRainforest": 10
    }
  },
  {
    "path": "docs/diagrams/AddModCommandActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "- User enters addmod command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "if (command syntax) then ([valid])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    -Parse input arguments"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    if (module and \u0026 student) then (found)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    if (student does not module) then (yes)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    if (student has not completed module) then (yes)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    if (module quota limit not reached) then (yes)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    if (student workload limit not reached) then (yes)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    if (module does not clash with student modules) then (yes)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    -create new module and student objects"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    -replaced old objects in list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    -CommandResult(success)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    Stop"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "else (no)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "else (no)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "else (no)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "else (no)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "else (not found)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "else ([Invalid])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "-Throw ParseException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "stop"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "cheongliyuan": 43
    }
  },
  {
    "path": "docs/diagrams/AddModSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "participant \":MamsParser\" as MamsParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "participant \":AddModCommandParser\" as AddModCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "participant \"a:AddModCommand\" as AddModCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[-\u003e LogicManager : execute(\"addmod s/2 m/CS1010\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "LogicManager -\u003e MamsParser : parseCommand(\"addmod s/2 m/CS1010\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate MamsParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "create AddModCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "MamsParser -\u003e AddModCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate AddModCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommandParser --\u003e MamsParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate AddModCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "MamsParser -\u003e AddModCommandParser : parse(\"addmod s/2 m/CS1010\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate AddModCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "create AddModCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommandParser -\u003e AddModCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommand --\u003e AddModCommandParser : a"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommandParser --\u003e MamsParser : a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate AddModCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommandParser -[hidden]-\u003e MamsParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "destroy AddModCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "MamsParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate MamsParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "LogicManager -\u003e AddModCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "alt studentUsingIndex"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    AddModCommand -\u003e Model : getFilteredStudentList()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    Model --\u003e AddModCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "else !studentUsingIndex"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    AddModCommand -\u003e Model : getFullStudentList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    Model --\u003e AddModCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "end"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "alt moduleUsingIndex"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    AddModCommand -\u003e Model : getFilteredModuleList()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    Model --\u003e AddModCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "else !moduleUsingIndex"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    AddModCommand -\u003e Model : getFullModuleList()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    Model --\u003e AddModCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "end"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommand -\u003e AddModCommand: returnModuleIfExist(moduleList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommand -\u003e AddModCommand: returnStudentIfExist(studentList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommand -\u003e AddModCommand: checkIfStudentHasModule(moduleList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommand -\u003e AddModCommand: checkIfStudentHasCompletedModule(moduleList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommand -\u003e AddModCommand: checkQuotaLimit(moduleList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommand -\u003e AddModCommand: checkStudentWorkloadLimit(moduleList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommand -\u003e AddModCommand: checkIfModuleClash(moduleList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommand -\u003e AddModCommand: getClashCase;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "break exception"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "   AddModCommand -\u003e AddModCommandParser"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "   activate AddModCommandParser"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "   AddModCommandParser -\u003e MamsParser"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "   deactivate AddModCommandParser"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "   activate MamsParser"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "   MamsParser -\u003e LogicManager"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "   deactivate MamsParser"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "end"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommand -\u003e AddModCommand: UpdateList()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "CommandResult -\u003e Model: setStudent()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Model -\u003e CommandResult"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "CommandResult -\u003e Model: setModule()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Model -\u003e CommandResult"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "CommandResult -\u003e Model: updateFilteredStudentList()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Model -\u003e CommandResult"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "CommandResult -\u003e Model: updateFilteredModuleList()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "Model -\u003e CommandResult"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "CommandResult --\u003e AddModCommand"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "AddModCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "cheongliyuan": 153
    }
  },
  {
    "path": "docs/diagrams/ApproveCommandActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "- User attempts to\\n enter approve command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "if () then ([valid command syntax])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    - Parse input arguments"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    - Execute approve command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    if (add module) then (yes)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if () then ([clash detected or\\n student has module])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            - add module to student \\n add student to module"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    elseif (drop module) then (yes)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if () then ([student does not\\n have module])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        else([else])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            - remove module from student \\n remove student from module"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    elseif (increase workload) then (yes)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        - increase workload"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "else ([Invalid command syntax])"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "-Invalid command message"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "endif"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "stop"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 28
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(mams)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Mams *-right-\u003e \"1\" UniqueStudentList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Mams *-right-\u003e \"1\" UniqueModuleList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Mams *-right-\u003e \"1\" UniqueAppealList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "UniqueStudentList o-right-\u003e \"*\"Student"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "UniqueModuleList o-down-\u003e \"*\"Module"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "UniqueAppealList o-down-\u003e \"*\"Appeal"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Student o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Student *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Student *--\u003e Credits"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Student *--\u003e PrevMods"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Student *--\u003e MatricId"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "MistyRainforest": 13
    }
  },
  {
    "path": "docs/diagrams/ClashCommandClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "abstract class ClashCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "class ClashModCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "class ClashStudentCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "class ClashAppealCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ClashCommand \u003c|-- ClashModCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ClashCommand \u003c|-- ClashStudentCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ClashCommand \u003c|-- ClashAppealCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chensu2436": 12,
      "MistyRainforest": 5
    }
  },
  {
    "path": "docs/diagrams/ClashSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \":MamsParser\" as MamsParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \":ClashCommandParser\" as ClashCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \"c:ClashAppealCommand\" as ClashAppealCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "[-\u003e LogicManager : execute(\"clash a/c000001\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "LogicManager -\u003e MamsParser : parseCommand(\"clash a/c000001\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate MamsParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "create ClashCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "MamsParser -\u003e ClashCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate ClashCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ClashCommandParser --\u003e MamsParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate ClashCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "MamsParser -\u003e ClashCommandParser : parse(\"a/c000001\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate ClashCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "create ClashAppealCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ClashCommandParser -\u003e ClashAppealCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate ClashAppealCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ClashAppealCommand --\u003e ClashCommandParser : c"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate ClashAppealCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ClashCommandParser --\u003e MamsParser : c"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate ClashCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ClashCommandParser -[hidden]-\u003e MamsParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "destroy ClashCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "MamsParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate MamsParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "LogicManager -\u003e ClashAppealCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate ClashAppealCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ClashAppealCommand -\u003e Model : getFilteredAppealList()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Model --\u003e ClashAppealCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ClashAppealCommand -\u003e Model : getFilteredStudentList()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Model --\u003e ClashAppealCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ClashAppealCommand -\u003e Model : getFilteredModuleList()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Model --\u003e ClashAppealCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ClashAppealCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "CommandResult --\u003e ClashAppealCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ClashAppealCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate ClashAppealCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chensu2436": 81
    }
  },
  {
    "path": "docs/diagrams/CycleCommandHistoryClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "class ListPointer COMMON_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "class CommandBox UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "LogicManager -down-\u003e \"1\" CommandHistory: \"stores/updates \u003e\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "CommandHistory *-right-\u003e \"1\" ObservableList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "ObservableList o-down-\u003e \"*\" InputOutput : \"contains \u003e\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "InputOutput -up[hidden]-\u003e CommandHistory"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "ListPointer .left.\u003e ObservableList: \"initializes defensive copy using \u003e\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "ListPointer -down-\u003e \"1\" List : \"iterates\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "List o-left-\u003e \"*\" InputOutput: \"contains \u003e\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "CommandBox -down-\u003e \"1\" ListPointer : \"gets previous/next input from \u003e\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "CommandBox -down-\u003e \"1\" ObservableList : \"updates \\nListPointer \\nusing \u003e\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 20
    }
  },
  {
    "path": "docs/diagrams/CycleCommandHistorySequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "participant \":CommandBox\" as CommandBox UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "participant \":ListPointer\" as ListPointer UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "-\u003e CommandBox : handleCommandEntered()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "activate CommandBox"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "CommandBox -\u003e CommandBox : reinitializeHistoryPointer()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "activate CommandBox"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "create ListPointer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "CommandBox -\u003e ListPointer : ListPointer(commandHistory)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "activate ListPointer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "ListPointer --\u003e CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "deactivate ListPointer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "deactivate CommandBox"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c-- CommandBox"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "deactivate CommandBox"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "-\u003e CommandBox: handleKeyPress(key)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "activate CommandBox"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "alt key.UP"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    CommandBox -\u003e CommandBox: getPreviousInput()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    activate CommandBox"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    CommandBox -\u003e ListPointer : previous()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    activate ListPointer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    ListPointer -\u003e CommandBox: prevInputOutput"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    deactivate ListPointer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    deactivate CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    CommandBox -\u003e CommandBox: replaceText(prevInput)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    activate CommandBox"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    deactivate CommandBox"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "else key.DOWN"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    CommandBox -\u003e CommandBox: getNextInput()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    activate CommandBox"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    CommandBox -\u003e ListPointer : next()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    activate ListPointer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    ListPointer -\u003e CommandBox: nextInputOutput"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    deactivate ListPointer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    deactivate CommandBox"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    CommandBox -\u003e CommandBox: replaceText(nextInput)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    activate CommandBox"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    deactivate CommandBox"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "else else"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "end"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c-- CommandBox: replaced text in text field"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "deactivate CommandBox"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 59
    }
  },
  {
    "path": "docs/diagrams/FindSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \":MamsParser\" as MamsParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \"f:FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \":NameContainsKeywordsPredicate\" as NameContainsKeywordsPredicate MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \":ModuleContainsKeywordsPredicate\" as ModuleContainsKeywordsPredicate MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "participant \":AppealContainsKeywordsPredicate\" as AppealContainsKeywordsPredicate MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "[-\u003e LogicManager : execute(\"clash a/c000001\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "LogicManager -\u003e MamsParser : parseCommand(\"clash a/c000001\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate MamsParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "MamsParser -\u003e FindCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "FindCommandParser --\u003e MamsParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "MamsParser -\u003e FindCommandParser : parse(\"s/paul bob\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "create NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "FindCommandParser -\u003e NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "NameContainsKeywordsPredicate -\u003e FindCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "create ModuleContainsKeywordsPredicate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "FindCommandParser -\u003e ModuleContainsKeywordsPredicate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate ModuleContainsKeywordsPredicate"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "ModuleContainsKeywordsPredicate -\u003e FindCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "create AppealContainsKeywordsPredicate"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "FindCommandParser -\u003e AppealContainsKeywordsPredicate"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate AppealContainsKeywordsPredicate"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "AppealContainsKeywordsPredicate -\u003e FindCommandParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "FindCommandParser -\u003e FindCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "FindCommand --\u003e FindCommandParser : f"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "FindCommandParser --\u003e MamsParser : f"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "FindCommandParser -[hidden]-\u003e MamsParser"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "MamsParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate MamsParser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "LogicManager -\u003e FindCommand : execute()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "FindCommand -\u003e Model : updateFilteredStudentList(NameContainsKeywordsPredicate)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Model -\u003e NameContainsKeywordsPredicate : test()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "NameContainsKeywordsPredicate -\u003e Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Model --\u003e FindCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "FindCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "CommandResult --\u003e FindCommand"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "FindCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chensu2436": 99
    }
  },
  {
    "path": "docs/diagrams/HistoryCommandActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- User attempts to\\n enter history command"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "if () then ([valid command syntax])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    - Parse input arguments"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    - Execute history command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    if () then ([user specified \\n to hide output])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        - All command outputs\\n in history window\\n is hidden"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        - Show all command \\n inputs and their \\n corresponding \\n outputs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    if () then ([history \\n window \\nis open])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        - Return focus \\n to history window"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    else([else])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        - Re-open history \\n window"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    if () then ([user presses \\n escape key])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        - History window closed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    else([else])"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "else ([Invalid command syntax])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "-Invalid command message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "endif"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "stop"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 34,
      "AaronLuk": 1
    }
  },
  {
    "path": "docs/diagrams/HistoryCommandClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "class MainWindow UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "class HistoryWindow UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "class TextArea UI_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "CommandResult -left[hidden]------\u003e ObservableList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "TextArea -right[hidden]----\u003e ObservableList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "MainWindow -RIGHT-\u003e Logic : \"gets history flags from \u003e\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Logic \u003c|.down. LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "LogicManager -left-\u003e \"1\" CommandHistory: \"updates \u003e\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "LogicManager .right.\u003e HistoryCommand: \"executes \u003e\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "HistoryCommand .down.\u003e CommandResult : \"produces \u003e\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "LogicManager .right.\u003e CommandResult: \"gets \\nresults \\nfrom \u003e\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "CommandHistory *-down-\u003e \"1\" ObservableList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "HistoryWindow \u003c-down- MainWindow: \"sets\\nflags \u003c\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "HistoryWindow -down-\u003e TextArea"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "HistoryWindow .down.\u003e ObservableList: \"updates\\ntextArea\\nusing \u003e\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 28
    }
  },
  {
    "path": "docs/diagrams/HistoryCommandSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "participant \":HistoryWindow\" as HistoryWindow UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "participant \":Logic\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "participant \":HistoryCommandParser\" as HistoryCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "participant \"command : HistoryCommand\" as HistoryCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "-\u003e MainWindow : executeCommand(\"history -h\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "MainWindow -\u003e Logic: execute(\"history -h\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "activate Logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Logic -\u003e HistoryCommandParser: parse(\" -h\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "activate HistoryCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "create HistoryCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "HistoryCommandParser -\u003e HistoryCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "activate HistoryCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "HistoryCommand --\u003e HistoryCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "deactivate HistoryCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "HistoryCommandParser -\u003e Logic: command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "deactivate HistoryCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Logic -\u003e HistoryCommand : execute(model)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "activate HistoryCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "HistoryCommand -\u003e Logic : commandResult"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "note right: showHistory and hideOutput\\n flags in commandResult\\n is set to true."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "deactivate HistoryCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Logic -\u003e MainWindow: commandResult"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "deactivate Logic"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c- MainWindow: setFeedBackToUser(\"Displaying history window.\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "MainWindow -\u003e HistoryWindow : setHideOutputDisplay(true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "activate HistoryWindow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "HistoryWindow --\u003e MainWindow : Command feedbacks\\nhidden"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "deactivate HistoryWindow"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "MainWindow -\u003e HistoryWindow : show()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "activate HistoryWindow"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "HistoryWindow --\u003e MainWindow : showing history \\nwindow"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "deactivate HistoryWindow"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "MainWindow -\u003e Logic : getCommandHistory()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "activate Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Logic -\u003e MainWindow: commandHistory"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "deactivate Logic"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "MainWindow -\u003e HistoryWindow: updateHistoryDisplay(commandHistory)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "activate HistoryWindow"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "HistoryWindow --\u003e MainWindow: History display \\n updated"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "deactivate HistoryWindow"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c-- MainWindow: history command executed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "destroy HistoryCommandParser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "destroy HistoryCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 67
    }
  },
  {
    "path": "docs/diagrams/MassApproveActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "- User attempts to\\n enter approve command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "if () then ([valid command syntax])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    while (has valid appeals in validAppealList) is (true)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        - Parse input arguments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        - Execute approve command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (add module) then (yes)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            if () then ([clash detected or\\n student has module])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            else ([else])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                - add module to student \\n add student to module"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        elseif (drop module) then (yes)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            if () then ([student does not\\n have module])"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            else([else])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                - remove module from student \\n remove student from module"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        elseif (increase workload) then (yes)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            - increase workload"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    endwhile(false)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "else ([Invalid command syntax])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    -Invalid command message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "endif"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "stop"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 35
    }
  },
  {
    "path": "docs/diagrams/MassResolveSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "participant \":MamsParser\" as MamsParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "participant \":ApprovevCommandParser\" as ApproveCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "participant \"A:MassApprove\" as MassApprove LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "[-\u003e LogicManager : execute(\"approve mass/C000000 C000001 C000010\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "LogicManager -\u003e MamsParser : parseCommand(\"approve mass/C000000 C000001 C000010\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate MamsParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "create ApproveCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "MamsParser -\u003e ApproveCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate ApproveCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommandParser --\u003e MamsParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate ApproveCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "MamsParser -\u003e ApproveCommandParser : parse(\"mass/C000000 C000001 C000010\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate ApproveCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "create MassApprove"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommandParser -\u003e MassApprove"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate MassApprove"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "MassApprove --\u003e ApproveCommandParser : A"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate MassApprove"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommandParser --\u003e MamsParser : A"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate ApproveCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommandParser -[hidden]-\u003e MamsParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "destroy ApproveCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "MamsParser --\u003e LogicManager : A"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate MamsParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "LogicManager -\u003e MassApprove : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate MassApprove"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "MassApprove -\u003e Model : getFullAppealList()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Model --\u003e MassApprove"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "MassApprove -\u003e Model : getFullStudentList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Model --\u003e MassApprove"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "MassApprove -\u003e Model : getFullModuleList()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Model --\u003e MassApprove"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "MassApprove -\u003e CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "CommandResult --\u003e MassApprove"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "MassApprove --\u003e LogicManager : result"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate MassApprove"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 82
    }
  },
  {
    "path": "docs/diagrams/ModCommandClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "abstract class ModCommand"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "class AddModCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "class RemoveModCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "ModCommand \u003c|-- AddModCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "ModCommand \u003c|-- RemoveModCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "cheongliyuan": 14
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Interface ReadOnlyMams \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class Mams"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class ReadOnlyMams"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class Student"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class PrevMods"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class Credits"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class UniqueStudentList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class MatricId"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Package Modules {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class Module"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class UniqueModuleList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Package Appeals {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class Appeal"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class UniqueAppealList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Mams .up.|\u003e ReadOnlyMams"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "ModelManager o--\u003e \"1\" Mams"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Mams *--\u003e \"1\" UniqueStudentList"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "UniqueStudentList o--\u003e \"*\" Student"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Student o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Student *--\u003e Name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Student *--\u003e Credits"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Student *--\u003e PrevMods"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Student *--\u003e MatricId"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Mams *--\u003e \"1\" UniqueAppealList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "UniqueAppealList o--\u003e \"*\" Appeal"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Mams *--\u003e \"1\" UniqueModuleList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "UniqueModuleList o--\u003e \"*\" Module"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "ModelManager --\u003e\"1\" Student : filtered list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "ModelManager --\u003e\"1\" Module : filtered list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "ModelManager --\u003e\"1\" Appeal : filtered list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "MistyRainforest": 37
    }
  },
  {
    "path": "docs/diagrams/PredicateClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "interface Predicate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "class NamesContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "List\u003cString\u003e Keywords"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "test()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "equals()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "class ModuleContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "List\u003cString\u003e Keywords"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "test()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "equals()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "class AppealContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "List\u003cString\u003e Keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "test()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "equals()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Predicate \u003c|.. NamesContainsKeywordsPredicate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Predicate \u003c|.. ModuleContainsKeywordsPredicate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "Predicate \u003c|.. AppealContainsKeywordsPredicate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chensu2436": 24,
      "MistyRainforest": 5
    }
  },
  {
    "path": "docs/diagrams/ResolveCommandClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "abstract class ResolveCommand"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "abstract class Approve"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "class ApproveCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "class MassApprove"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "class RejectCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "class MassReject"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ResolveCommand \u003c|-- Approve"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ResolveCommand \u003c|-- Reject"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Approve \u003c|-- ApproveCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Approve \u003c|-- MassApprove"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Reject \u003c|-- RejectCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Reject \u003c|\u003d\u003d MassReject"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 20
    }
  },
  {
    "path": "docs/diagrams/ResolveSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "participant \":MamsParser\" as MamsParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "participant \":ApprovevCommandParser\" as ApproveCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "participant \"A:ApproveCommand\" as ApproveCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "[-\u003e LogicManager : execute(\"approve a/2\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "LogicManager -\u003e MamsParser : parseCommand(\"approve a/2\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate MamsParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "create ApproveCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "MamsParser -\u003e ApproveCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate ApproveCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommandParser --\u003e MamsParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate ApproveCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "MamsParser -\u003e ApproveCommandParser : parse(\"a/2\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate ApproveCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "create ApproveCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommandParser -\u003e ApproveCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate ApproveCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommand --\u003e ApproveCommandParser : A"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate ApproveCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommandParser --\u003e MamsParser : A"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate ApproveCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommandParser -[hidden]-\u003e MamsParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "destroy ApproveCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "MamsParser --\u003e LogicManager : A"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate MamsParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "LogicManager -\u003e ApproveCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate ApproveCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommand -\u003e Model : getFilteredAppealList()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Model --\u003e ApproveCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommand -\u003e Model : getFullStudentList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Model --\u003e ApproveCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommand -\u003e Model : getFullModuleList()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Model --\u003e ApproveCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "CommandResult --\u003e ApproveCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "ApproveCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate ApproveCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 82
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Interface MamsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class JsonMamsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "StorageManager o--\u003e MamsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "JsonMamsStorage .left.|\u003e MamsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "JsonMamsStorage .down.\u003e JsonSerializableMamsStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "JsonSerializableMamsStorage .down.\u003e JsonSerializableStudent"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "JsonSerializableMamsStorage .down.\u003e JsonSerializableModule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "JsonSerializableMamsStorage .down.\u003e JsonSerializableAppeal"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "JsonSerializableStudent .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "MistyRainforest": 9
    }
  },
  {
    "path": "docs/diagrams/StoreCommandClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "StoreCommand -down-\u003e UndoCommand"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "StoreCommand -down-\u003e RedoCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "StoreCommand -down-\u003e SaveCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "SaveCommand -down-\u003e RestrictedSaveCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "MistyRainforest": 18
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class StudentListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class StudentCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class AppealListPanel"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class AppealCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class ModuleListPanel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Class ModuleCard"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "MainWindow *-down-\u003e StudentListPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "MainWindow *-down-\u003e ModuleListPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "MainWindow *-down-\u003e AppealListPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "StudentListPanel -down-\u003e StudentCard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "ModuleListPanel -down-\u003e ModuleCard"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "AppealListPanel -down-\u003e AppealCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "StudentListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "StudentCard --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "ModuleCard --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "AppealCard --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "StudentCard .down.\u003e Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "AppealCard .down.\u003e Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "ModuleCard .down.\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "StudentListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "MistyRainforest": 20
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "participant \":MamsParser\" as MamsParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "LogicManager -\u003e MamsParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "activate MamsParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "MamsParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "UndoCommand --\u003e MamsParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "MamsParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "deactivate MamsParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "UndoCommand -\u003e UndoCommand : readMams()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "UndoCommand -\u003e Model : setMams()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "MistyRainforest": 11
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "!define COMMON_COLOR #B88FF2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 75
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "ecp -\u003e ec ++: index, editStudentDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 20
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "#header .details span.prevMods a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".show-for-print{display:inherit!important}}"
      }
    ],
    "authorContributionMap": {
      "-": 406,
      "MistyRainforest": 1
    }
  },
  {
    "path": "docs/team/sendorasleft.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d YongKuan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d PROJECT: Module Appeal Management System (MAMS) - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "MAMS - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Note: This portfolio was adapted from the AddressBook project. All information written herein (28th Septemeber 2019) is not yet revised for the new application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 74
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Create a `RemarkCommandParser` class in the `mams.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Create a new `Remark` in `mams.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`mams.ui.PersonCard`]."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getCredits(), personToEdit.getPrevMods(),"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 6,
      "chensu2436": 1,
      "-": 418,
      "MistyRainforest": 1
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "The `address` field in `Person` is actually an instance of the `mams.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "\u003cLabel fx:id\u003d\"credits\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$credits\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "\u003cLabel fx:id\u003d\"prevMods\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$prevMods\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    \"credits\": \"20\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    \"prevMods\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 112,
      "MistyRainforest": 4
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "`mams.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/CREDITS] [e/PREVMODS]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/ã‚¢ãƒªã‚¹ ãƒ¦ãƒ¼`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 256,
      "MistyRainforest": 1
    }
  },
  {
    "path": "src/main/java/mams/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/mams/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/mams/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Mams;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyMams;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.storage.CommandHistoryStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.storage.JsonCommandHistoryStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.storage.JsonMamsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.storage.MamsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MAMS ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        MamsStorage mamsStorage \u003d new JsonMamsStorage(userPrefs.getMamsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CommandHistoryStorage commandHistoryStorage \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new JsonCommandHistoryStorage(userPrefs.getCommandHistoryFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        storage \u003d new StorageManager(mamsStorage, userPrefsStorage, commandHistoryStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a {@code ModelManager} with the data from the MAMS in {@code storage} and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The data from the sample MAMS will be used instead if MAMS in {@code storage} is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * or an empty MAMS will be used instead if errors occur when reading MAMS in {@code storage}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Optional\u003cReadOnlyMams\u003e mamsOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ReadOnlyMams initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            mamsOptional \u003d storage.readMams();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (!mamsOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample MAMS\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            initialData \u003d mamsOptional.orElseGet(SampleDataUtil::getSampleMams);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty MAMS\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            initialData \u003d new Mams();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MAMS\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            initialData \u003d new Mams();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MAMS\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        logger.info(\"Starting MAMS \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping MAMS ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 48,
      "-": 139
    }
  },
  {
    "path": "src/main/java/mams/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/mams/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/mams/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String LOG_FILE \u003d \"mams.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/mams/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_MATRIC_ID \u003d \"The student matric ID provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MESSAGE_MODULES_LISTED_OVERVIEW \u003d \"%1$d modules listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MESSAGE_APPEALS_LISTED_OVERVIEW \u003d \"%1$d appeals listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MESSAGE_INVALID_APPEAL_DISPLAYED_INDEX \u003d \"The appeal index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_INDEX \u003d \"The module index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_INVALID_CREDIT_VALUE \u003d \"The value for credits is invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String MESSAGE_CREDIT_UNDER_AMT_MODS \u003d \"The new credit score is below amount \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            + \"required for current modules taken\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_CREDIT_INSUFFICIENT \u003d \"Unable to add module to student\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            + \" as it will exceed student\u0027s credit limit.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_STUDENT_COMPLETED_MODULE \u003d \"Unable to add module to student\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            + \" as the student already has already completed the module \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 3,
      "AaronLuk": 1,
      "chensu2436": 2,
      "-": 9,
      "cheongliyuan": 8,
      "MistyRainforest": 2
    }
  },
  {
    "path": "src/main/java/mams/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/mams/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/mams/commons/core/time/TimeStamp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.core.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A simple class wrapper around {@code java.util.Date}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * and {@code java.text.SimpleDataFormat}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * for basic encapsulation of"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * time handling in MAMS."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class TimeStamp {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String TIME_STAMP_FORMAT_STRING \u003d \"[yyyy-MM-dd|HH:mm:ss]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final SimpleDateFormat TIME_STAMP_FORMAT \u003d new SimpleDateFormat(TIME_STAMP_FORMAT_STRING);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Initialize a {@code TimeStamp} object from a {@code Date} object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public TimeStamp(Date date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // defensive copy"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.date \u003d new Date(date.getTime());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Initialize a {@code TimeStamp} using unix time in milliseconds"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param unixTimeInMilliSeconds long denoting unix time elapsed in milliseconds"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public TimeStamp(long unixTimeInMilliSeconds) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this(new Date(unixTimeInMilliSeconds));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Initialize a {@code TimeStamp} using the current time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public TimeStamp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.date \u003d new Date();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns Unix Time representation of {@code date} in milliseconds. This is important for Json"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * loading/saving since {@code Date} compares equality using its internal unix time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * If we save TimeStamp directly as its String form as defined in {@code TIME_STAMP_FORMAT}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * we lose some precision when parsing it back to Date, hence resulting in two {@code TimeStamps}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * with similar #toString() output, but #equals returns false since the unix time of both"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * dates are different."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public long asUnixTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return date.getTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the date and time in a standardized format for MAMS usage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return string representation of TimeStamp object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return TIME_STAMP_FORMAT.format(this.date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return date.toString().hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(obj instanceof TimeStamp)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        TimeStamp ts \u003d (TimeStamp) obj;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return this.date.toString().equals(ts.date.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 89
    }
  },
  {
    "path": "src/main/java/mams/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/mams/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/mams/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/mams/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/mams/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/mams/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/mams/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 4,
      "-": 140
    }
  },
  {
    "path": "src/main/java/mams/commons/util/ListPointer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class representing an iterable pointer to a List. Now adapted to take in any List of generic variable T,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * makes a defensive copy of it internally, then returns an iterable pointer to the internal List."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Note that if the original list was modified, the old ListPointer object will no longer be valid since"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * it still points to an old internal copy of the list captured at the time of initialization."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ListPointer\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // defensive copy of the list of interest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private List\u003cT\u003e list;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Constructs {@code ListPointer}, and initialize cursor"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * to point to the last element in {@code list}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ListPointer(List\u003cT\u003e list) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(list);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Appends {@code element} to the end of the list. We don\u0027t check for null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * values here since this is meant as a generic multi-purpose container."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Future developers may need to store null-able values (even if the practice"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * is generally frowned upon)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void add(T element) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if calling {@code #next()}, if next element exists"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * ie. calling {@code #next()} does not throw a {@code NoSuchElementException}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if calling {@code #previous()} if previous element exists"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * ie. calling {@code #previous()} does not throw a {@code NoSuchElementException}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if calling {@code #current()} if current element exists"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * ie. calling {@code #current()} does not throw a {@code NoSuchElementException}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Check if a given index is within bounds of the internal defensive copy."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param index index to be checked against list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return true if within bounds, false otherwise"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public T next() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public T previous() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public T current() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(other instanceof ListPointer)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ListPointer iterator \u003d (ListPointer) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 124
    }
  },
  {
    "path": "src/main/java/mams/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        AppUtil.checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        AppUtil.checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/java/mams/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.InputOutput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyMams;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the Mams."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @see Model#getMams()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    ReadOnlyMams getMams();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of appeals */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    ObservableList\u003cAppeal\u003e getFilteredAppealList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Returns an unmodifiable view of the commands entered by the user */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    ObservableList\u003cInputOutput\u003e getCommandHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the user prefs\u0027 MAMS file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Path getMamsFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 25,
      "chensu2436": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/mams/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.time.TimeStamp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.InputOutput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.ReadOnlyCommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.MamsParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyMams;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final MamsParser mamsParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final CommandHistory commandHistory;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Optional\u003cReadOnlyCommandHistory\u003e commandHistoryOptional;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ReadOnlyCommandHistory startingCommandHistory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.mamsParser \u003d new MamsParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try { // attempt to load CommandHistory from disk"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            commandHistoryOptional \u003d storage.readCommandHistory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (!commandHistoryOptional.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                logger.info(\"Command history data file not found. Starting with an empty command history...\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            startingCommandHistory \u003d commandHistoryOptional.orElseGet(CommandHistory::new);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IOException | DataConversionException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Starting with an empty command history...\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            startingCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistory \u003d new CommandHistory(startingCommandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            command \u003d mamsParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            if (!(command instanceof UndoCommand) \u0026\u0026 !(command instanceof RedoCommand)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                new SaveCommand(\"undo\").privateExecute(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            storage.saveMams(model.getMams());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            commandHistory.add(commandText, commandResult.getFeedbackToUser(), true, new TimeStamp());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            commandHistory.add(commandText, e.getMessage(), false, new TimeStamp());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw e; // after getting message, rethrow. stacktrace is not lost"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            commandHistory.add(commandText, ioe.getMessage(), false, new TimeStamp());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            storage.saveCommandHistory(commandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ReadOnlyMams getMams() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return model.getMams();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cAppeal\u003e getFilteredAppealList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return model.getFilteredAppealList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cInputOutput\u003e getCommandHistory() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return commandHistory.getInputOutputHistory();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Path getMamsFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return model.getMamsFilePath();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 72,
      "-": 53,
      "MistyRainforest": 8
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/AddModCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_CREDIT_INSUFFICIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_STUDENT_COMPLETED_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static mams.logic.commands.ClashCommand.MESSAGE_CLASH_IN_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * Adds a module to a student"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "public class AddModCommand extends ModCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_ADD_MOD_SUCCESS \u003d \"Added module to : %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MESSAGE_STUDENT_ADD_MOD \u003d \"Added %s to : \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String moduleIdentifier;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String studentIdentifier;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private boolean moduleUsingIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private boolean studentUsingIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Builder class for AddModCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static class AddModCommandBuilder {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        private final String moduleIdentifier;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        private final String studentIdentifier;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        private boolean moduleUsingIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        private boolean studentUsingIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        public AddModCommandBuilder (String moduleIdentifier, String studentIdentifier) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            this.moduleIdentifier \u003d moduleIdentifier;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            this.studentIdentifier \u003d studentIdentifier;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            this.moduleUsingIndex \u003d checkIfModuleIndex(moduleIdentifier);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            this.studentUsingIndex \u003d checkIfStudentIndex(studentIdentifier);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         * Checks if identifier given for prefix m/ is a number"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         * @param moduleIdentifier string given under m/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         * @return true if is a index given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        boolean checkIfModuleIndex(String moduleIdentifier) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            assert moduleIdentifier !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            requireNonNull(moduleIdentifier);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            boolean result \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (moduleIdentifier.substring(0, 1).contains(\"C\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    || moduleIdentifier.substring(0, 1).contains(\"c\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                result \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         * Checks if identifier given for prefix s/ is a number"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         * @param studentIdentifier string given under s/"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         * @return true if is a index given"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        boolean checkIfStudentIndex(String studentIdentifier) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            assert studentIdentifier !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            requireNonNull(studentIdentifier);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            boolean result \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (studentIdentifier.substring(0, 1).contains(\"A\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    || studentIdentifier.substring(0, 1).contains(\"a\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                result \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        public AddModCommand build() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return new AddModCommand(this);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private AddModCommand(AddModCommandBuilder builder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.moduleIdentifier \u003d builder.moduleIdentifier;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.studentIdentifier \u003d builder.studentIdentifier;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.moduleUsingIndex \u003d builder.moduleUsingIndex;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.studentUsingIndex \u003d builder.studentUsingIndex;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Checks for logical errors, such as non-existant modules and students etc."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Create a new student with the added module and replaces the old student in mams."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @return {@code CommandResult}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws CommandException for non-existant modules/student or if the student"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * already has the module."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        List\u003cStudent\u003e studentList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        List\u003cModule\u003e moduleList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Student studentToEdit;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Module moduleToEdit;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleList \u003d moduleUsingIndex ? model.getFilteredModuleList() : model.getFullModuleList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        studentList \u003d studentUsingIndex ? model.getFilteredStudentList() : model.getFullStudentList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //various checks"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleToEdit \u003d returnModuleIfExist(moduleList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        studentToEdit \u003d returnStudentIfExist(studentList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        checkIfStudentHasModule(studentToEdit, moduleToEdit.getModuleCode());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        checkIfStudentCompletedModule(studentToEdit, moduleToEdit.getModuleCode());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        checkQuotaLimit(moduleToEdit);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        checkStudentWorkloadLimit(studentToEdit);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        checkIfModuleClash(studentToEdit, model.getFullModuleList(), moduleToEdit.getModuleCode());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //add module to student"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Set\u003cTag\u003e studentAllTags \u003d studentToEdit.getTags();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Set\u003cTag\u003e ret \u003d new HashSet\u003c\u003e(studentAllTags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        ret.add(new Tag(moduleToEdit.getModuleCode()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //add student to module field"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Set\u003cTag\u003e moduleAllStudents \u003d moduleToEdit.getStudents();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Set\u003cTag\u003e ret2 \u003d new HashSet\u003c\u003e(moduleAllStudents);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        ret2.add(new Tag(studentToEdit.getMatricId().toString()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //replace old student and old module objects with new objects"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return updateList(model, studentToEdit, moduleToEdit, ret, ret2, MESSAGE_ADD_MOD_SUCCESS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Checks if the module exists"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param moduleList mMdule list being checked"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @return Module if found"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws CommandException if module is not found"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    Module returnModuleIfExist(List\u003cModule\u003e moduleList) throws CommandException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(moduleList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (moduleUsingIndex) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            int tempIndex \u003d Integer.parseInt(moduleIdentifier);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (tempIndex \u003c 1) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new CommandException(ModCommand.MESSAGE_USAGE_ADD_MOD);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            int tempIndexZeroBased \u003d tempIndex - 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (tempIndexZeroBased \u003e\u003d moduleList.size()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return moduleList.get(tempIndexZeroBased);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            List\u003cModule\u003e moduleToCheckList \u003d moduleList.stream()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    .filter(m -\u003e m.getModuleCode().equalsIgnoreCase(moduleIdentifier)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (moduleToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return moduleToCheckList.get(0);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Checks if the student exists in mams."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param studentList student list in mams"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @return student if found"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws CommandException if student is not found"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    Student returnStudentIfExist(List\u003cStudent\u003e studentList) throws CommandException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(studentList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (studentUsingIndex) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            int tempIndex \u003d Integer.parseInt(studentIdentifier);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (tempIndex \u003c 1) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new CommandException(ModCommand.MESSAGE_USAGE_ADD_MOD);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            int tempIndexZeroBased \u003d tempIndex - 1;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (tempIndexZeroBased \u003e\u003d studentList.size()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return studentList.get(tempIndexZeroBased);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            List\u003cStudent\u003e studentToCheckList \u003d studentList.stream()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    .filter(p -\u003e p.getMatricId().toString().equalsIgnoreCase(studentIdentifier))"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (studentToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_MATRIC_ID);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return studentToCheckList.get(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Checks if students has already has the module."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param studentToEdit student to be checked"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param moduleCode module being added"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws CommandException if the student already has the module"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void checkIfStudentHasModule(Student studentToEdit, String moduleCode) throws CommandException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(studentToEdit);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Set\u003cTag\u003e studentModules \u003d studentToEdit.getCurrentModules();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        for (Tag tag: studentModules) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (tag.getTagName().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Checks if the student has already taken the module before."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param studentToEdit student being checked"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param moduleCode module being added"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws CommandException if the student has previously completed the module"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void checkIfStudentCompletedModule(Student studentToEdit, String moduleCode) throws CommandException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(studentToEdit, moduleCode);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        String prevMods \u003d studentToEdit.getPrevMods().toString();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (prevMods.contains(moduleCode)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new CommandException(MESSAGE_STUDENT_COMPLETED_MODULE);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Checks if the module has reached max quota."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param moduleToEdit module being checked"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws CommandException if the quota is reached. (and the student should not be added)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void checkQuotaLimit(Module moduleToEdit) throws CommandException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(moduleToEdit);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (moduleToEdit.getCurrentEnrolment() \u003d\u003d moduleToEdit.getQuotaInt()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new CommandException(Module.MESSAGE_CONSTRAINTS_QUOTA_REACHED);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Checks if adding a module will exceed the student\u0027s credit limit."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * All modules have a workload of 4MC."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param studentToEdit student being checked"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws CommandException if the student has insufficient credits"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void checkStudentWorkloadLimit(Student studentToEdit) throws CommandException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(studentToEdit);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        int currWorkload \u003d studentToEdit.getNumberOfMods() * 4;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        int maxWorkload \u003d studentToEdit.getCredits().getIntVal();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if ((maxWorkload - currWorkload) \u003c 4) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new CommandException(MESSAGE_CREDIT_INSUFFICIENT);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Checks if module being added clashes with current module"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param studentToEdit student to be checked"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param fullModuleList all modules in list"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param moduleCode module to be added"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws CommandException if there are clashes detected"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    //@@author chensu2436 and AaronLuk"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private void checkIfModuleClash(Student studentToEdit, ObservableList\u003cModule\u003e fullModuleList,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                                    String moduleCode) throws CommandException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        //get module object"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        List\u003cModule\u003e moduleToCheckList \u003d fullModuleList.stream()"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                .filter(m -\u003e m.getModuleCode().equalsIgnoreCase(moduleCode)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        Module moduleToEdit \u003d moduleToCheckList.get(0);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        //Get all the modules object student has and add them into an arraylist of modules for checking"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        Set\u003cTag\u003e studentModules \u003d studentToEdit.getCurrentModules();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        ArrayList\u003cModule\u003e currentModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        for (Tag currentModule : studentModules) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            String modCode \u003d currentModule.getTagName();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            List\u003cModule\u003e filteredModulesList \u003d fullModuleList"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    .filter(m -\u003e m.getModuleCode().equalsIgnoreCase(modCode))"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            Module filteredModule \u003d filteredModulesList.get(0);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            currentModules.add(filteredModule);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        ArrayList\u003cClashCommand.ClashCase\u003e clashCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        //Checks if current modules clashes with requested module"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        for (Module currentModule : currentModules) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (getClashCase(currentModule, moduleToEdit).isPresent()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                clashCases.add(getClashCase(currentModule, moduleToEdit).get());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        //If there exists clashes notify admin via feedback message"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (clashCases.size() !\u003d 0) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            throw new CommandException(MESSAGE_CLASH_IN_STUDENT"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    + studentToEdit.getMatricId()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    + \":\\n\""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    + getClashDetails(clashCases)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    + \"Unable to add module due to clashes. \");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private Optional\u003cClashCommand.ClashCase\u003e getClashCase(Module moduleA, Module moduleB) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        int[] timeTableA \u003d moduleA.getTimeSlotToIntArray();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        int[] timeTableB \u003d moduleB.getTimeSlotToIntArray();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        ArrayList\u003cInteger\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        for (int i : timeTableA) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            for (int j : timeTableB) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                if (i \u003d\u003d j) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    slots.add(i);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (!slots.isEmpty()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            ClashCommand.ClashCase c \u003d new ClashCommand.ClashCase();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            c.setModuleA(moduleA);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            c.setModuleB(moduleB);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            c.setClashingSlots(slots);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return Optional.of(c);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private String getClashDetails(ArrayList\u003cClashCommand.ClashCase\u003e clashCases) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        for (ClashCommand.ClashCase c : clashCases) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            s.append(c.getModuleCodeA());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            s.append(\"  \");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            s.append(c.getModuleCodeB());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            s.append(\"\\n\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            s.append(c.getClashingSlots());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            s.append(\"\\n\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!(other instanceof AddModCommand)) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        AddModCommand e \u003d (AddModCommand) other;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 1,
      "chensu2436": 73,
      "cheongliyuan": 286
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/Approve.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_APPEAL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_MASS_RESOLVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_REASON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Approve parent class for approve commands"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public abstract class Approve extends ResolveCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MESSAGE_USAGE_APPROVE \u003d COMMAND_WORD_APPROVE_APPEAL"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \": approves individual or multiple appeals\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \"To approve individually:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \"Parameters: KEYWORD [\" + PREFIX_APPEAL + \"INDEX] [\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + PREFIX_REASON + \"REASON]\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD_APPROVE_APPEAL + \" \" + PREFIX_APPEAL + \"1 \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + PREFIX_REASON + \"module quota exceeded.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \"To approve multiple:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \"Parameters: KEYWORD [\" + PREFIX_MASS_RESOLVE + \"] [APPEALID] [APPEALID] ...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD_APPROVE_APPEAL + \" \" + PREFIX_MASS_RESOLVE + \"C000001 C000012 C000007 C000020\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 23
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/ApproveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.commands.AddModCommand.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.commands.AddModCommand.MESSAGE_STUDENT_ADD_MOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.commands.ClashCommand.ClashCase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.commands.ClashCommand.MESSAGE_CLASH_IN_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.commands.ModCommand.MESSAGE_INVALID_MODULE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.commands.RemoveModCommand.MESSAGE_MISSING_MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.commands.RemoveModCommand.MESSAGE_STUDENT_REMOVE_MOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.commands.SetCredits.MESSAGE_STUDENT_CREDIT_CHANGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.student.Credits;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * Approves a appeal in mams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class ApproveCommand extends Approve {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String reason;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public ApproveCommand(Index index, String reason) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        requireNonNull(index, reason);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        List\u003cAppeal\u003e lastShownList \u003d model.getFilteredAppealList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPEAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Appeal approvedAppeal;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Appeal appealToApprove \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (appealToApprove.isResolved() \u003d\u003d false) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            Student studentToEdit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            Student editedStudent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            Module moduleToEdit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            Module editedModule;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            String feedback \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            String target \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            String type \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            String change \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            int workLoad \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            String moduleCode;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            List\u003cStudent\u003e fullStudentList \u003d model.getFullStudentList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            List\u003cModule\u003e fullModuleList \u003d model.getFullModuleList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            String appealType \u003d appealToApprove.getAppealType();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            String studentToEditId \u003d appealToApprove.getStudentId();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            if (appealType.equalsIgnoreCase(\"Increase workload\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                List\u003cStudent\u003e studentToCheckList \u003d fullStudentList.stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                .filter(p -\u003e p.getMatricId().toString().equals(studentToEditId))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (studentToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_MATRIC_ID);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                studentToEdit \u003d studentToCheckList.get(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                editedStudent \u003d new Student(studentToEdit.getName(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            new Credits((Integer.toString(appealToApprove.getStudentWorkload()))),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            studentToEdit.getPrevMods(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            studentToEdit.getMatricId(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            studentToEdit.getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                feedback +\u003d MESSAGE_STUDENT_CREDIT_CHANGE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                workLoad \u003d appealToApprove.getStudentWorkload();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                type +\u003d \"increase workload\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                target +\u003d studentToEditId;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            } else if (appealType.equalsIgnoreCase(\"Drop module\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                moduleCode \u003d appealToApprove.getModuleToDrop();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                //Check if student exists"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                List\u003cStudent\u003e studentToCheckList \u003d fullStudentList.stream()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        .filter(p -\u003e p.getMatricId().toString().equals(studentToEditId))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (studentToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_MATRIC_ID);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                studentToEdit \u003d studentToCheckList.get(0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                //check if student has the module (ready for deletion)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                Set\u003cTag\u003e studentModules \u003d studentToEdit.getCurrentModules();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                boolean hasModule \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                for (Tag tag : studentModules) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if (tag.getTagName().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        hasModule \u003d true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (!hasModule) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    throw new CommandException(MESSAGE_MISSING_MODULE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                //check if module exist"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                List\u003cModule\u003e moduleToCheckList \u003d fullModuleList.stream()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        .filter(m -\u003e m.getModuleCode().equalsIgnoreCase(moduleCode)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (moduleToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    throw new CommandException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                moduleToEdit \u003d moduleToCheckList.get(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                Set\u003cTag\u003e ret \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                Set\u003cTag\u003e studentAllTags \u003d studentToEdit.getTags();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                for (Tag tag : studentAllTags) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if (!tag.getTagName().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        ret.add(tag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                //create a tag list without the student for the new module"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                Set\u003cTag\u003e ret2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                Set\u003cTag\u003e moduleAllStudents \u003d moduleToEdit.getStudents();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                for (Tag tag : moduleAllStudents) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if (!tag.getTagName().equalsIgnoreCase(studentToEdit.getMatricId().toString())) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        ret2.add(tag);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                editedStudent \u003d new Student(studentToEdit.getName(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        studentToEdit.getCredits(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        studentToEdit.getPrevMods(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        studentToEdit.getMatricId(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        ret);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                model.updateFilteredAppealList(Model.PREDICATE_SHOW_ALL_APPEALS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                editedModule \u003d new Module(moduleToEdit.getModuleCode(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        moduleToEdit.getModuleName(),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        moduleToEdit.getModuleDescription(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        moduleToEdit.getLecturerName(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        moduleToEdit.getTimeSlot(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        moduleToEdit.getQuota(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        ret2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                model.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                feedback \u003d MESSAGE_STUDENT_REMOVE_MOD;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                target \u003d studentToEditId;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                type +\u003d \"drop module\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                change +\u003d moduleCode;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                ArrayList\u003cClashCase\u003e clashCases \u003d new ArrayList\u003cClashCase\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                moduleCode \u003d appealToApprove.getModuleToAdd();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                List\u003cStudent\u003e studentToCheckList \u003d fullStudentList.stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        .filter(p -\u003e p.getMatricId().toString().equals(studentToEditId)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (studentToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_MATRIC_ID);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                studentToEdit \u003d studentToCheckList.get(0);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                //check if module exist"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                List\u003cModule\u003e moduleToCheckList \u003d fullModuleList.stream()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        .filter(m -\u003e m.getModuleCode().equalsIgnoreCase(moduleCode)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (moduleToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    throw new CommandException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                moduleToEdit \u003d moduleToCheckList.get(0);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                //check if student already has module."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                Set\u003cTag\u003e studentModules \u003d studentToEdit.getCurrentModules();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                for (Tag tag : studentModules) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if (tag.getTagName().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                //Get all the modules student has and add them into an arraylist of modules for checking"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                ArrayList\u003cModule\u003e currentModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                for (Tag currentModule : studentModules) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    String modCode \u003d currentModule.getTagName();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    List\u003cModule\u003e filteredModulesList \u003d model.getFullModuleList()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            .stream()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            .filter(m -\u003e m.getModuleCode().equalsIgnoreCase(modCode))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    Module filteredModule \u003d filteredModulesList.get(0);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    currentModules.add(filteredModule);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                //Checks if current modules clashes with requested module"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                for (Module currentModule : currentModules) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if (getClashCase(currentModule, moduleToEdit).isPresent()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        clashCases.add(getClashCase(currentModule, moduleToEdit).get());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                //If there exists clashes notify admin via feedback message"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (clashCases.size() !\u003d 0) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    return new CommandResult(MESSAGE_CLASH_IN_STUDENT"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            + studentToEditId"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            + \":\\n\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            + getClashDetails(clashCases)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            + \"Unable to approve this appeal\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                //add module to student."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                Set\u003cTag\u003e ret \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                Set\u003cTag\u003e studentAllTags \u003d studentToEdit.getTags();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                for (Tag tag : studentAllTags) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    ret.add(tag);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                ret.add(new Tag(moduleCode));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                //add student to module field"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                Set\u003cTag\u003e moduleAllStudents \u003d moduleToEdit.getStudents();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                Set\u003cTag\u003e ret2 \u003d new HashSet\u003c\u003e(moduleAllStudents);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                ret2.add(new Tag(studentToEdit.getMatricId().toString()));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                //replace old student and old module objects with edited modules."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                editedStudent \u003d new Student(studentToEdit.getName(),"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        studentToEdit.getCredits(),"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        studentToEdit.getPrevMods(),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        studentToEdit.getMatricId(),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        ret);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                editedModule \u003d new Module(moduleToEdit.getModuleCode(),"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        moduleToEdit.getModuleName(),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        moduleToEdit.getModuleDescription(),"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        moduleToEdit.getLecturerName(),"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        moduleToEdit.getTimeSlot(),"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        moduleToEdit.getQuota(),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        ret2);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                model.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                feedback \u003d MESSAGE_STUDENT_ADD_MOD;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                target \u003d studentToEditId;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                type +\u003d \"add module\";"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                change +\u003d moduleCode;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            approvedAppeal \u003d new Appeal(appealToApprove.getAppealId(),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToApprove.getAppealType(),"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToApprove.getStudentId(),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToApprove.getAcademicYear(),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToApprove.getStudentWorkload(),"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToApprove.getAppealDescription(),"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToApprove.getPreviousModule(),"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToApprove.getNewModule(),"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    appealToApprove.getModuleToAdd(),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    appealToApprove.getModuleToDrop(),"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    true,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    \"APPROVED\","
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    reason);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            model.setAppeal(appealToApprove, approvedAppeal);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            model.updateFilteredAppealList(Model.PREDICATE_SHOW_ALL_APPEALS);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            if (type.equalsIgnoreCase(\"increase workload\")) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                return new CommandResult(generateSuccessMessageWorkload(appealToApprove, feedback, workLoad, target));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                return new CommandResult(generateSuccessMessageModule(approvedAppeal, feedback, target, change));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return new CommandResult(MESSAGE_APPEAL_ALREADY_APPROVED);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Formats feedback message for resolving add and remove mod appeals"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param appealToApprove"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param feedback"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param change"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String generateSuccessMessageModule(Appeal appealToApprove,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                                String feedback,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                                String target,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                                String change) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return \"Approved \""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                + appealToApprove.getAppealId()"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                + String.format(feedback, change)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                + target;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Formats feedback message for resolving increase workload appeals"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param appealToApprove"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param feedback"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param workLoad"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String generateSuccessMessageWorkload(Appeal appealToApprove,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                                  String feedback,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                                  int workLoad,"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                                  String target) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return \"Approved \""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                + appealToApprove.getAppealId()"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                + String.format(feedback, target, workLoad);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!(other instanceof ApproveCommand)) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ApproveCommand e \u003d (ApproveCommand) other;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                \u0026\u0026 reason.equals(e.reason);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private Optional\u003cClashCase\u003e getClashCase(Module moduleA, Module moduleB) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        int[] timeTableA \u003d moduleA.getTimeSlotToIntArray();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        int[] timeTableB \u003d moduleB.getTimeSlotToIntArray();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ArrayList\u003cInteger\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        for (int i : timeTableA) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            for (int j : timeTableB) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (i \u003d\u003d j) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    slots.add(i);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!slots.isEmpty()) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            ClashCase c \u003d new ClashCase();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            c.setModuleA(moduleA);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            c.setModuleB(moduleB);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            c.setClashingSlots(slots);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return Optional.of(c);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String getClashDetails(ArrayList\u003cClashCase\u003e clashCases) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        for (ClashCase c : clashCases) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            s.append(c.getModuleCodeA());"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            s.append(\"  \");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            s.append(c.getModuleCodeB());"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            s.append(\"\\n\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            s.append(c.getClashingSlots());"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            s.append(\"\\n\");"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 2,
      "AaronLuk": 394,
      "cheongliyuan": 1
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/ClashCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_APPEAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chensu2436"
        },
        "content": " * Encapsulate a ClashCommand class to check clashes in timetable."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chensu2436"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "public class ClashCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clash\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Checks timetable clashes \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + \"by index or two module codes.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + PREFIX_MODULE + \"CS1010 \" + PREFIX_MODULE + \"CS2030 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + \" OR \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + PREFIX_MODULE + \"1 \" + PREFIX_MODULE + \"2 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + \" OR \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + PREFIX_APPEAL + \"3\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + \" OR \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + PREFIX_STUDENT + \"5\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MESSAGE_CLASH_DETECTED \u003d \"Timetable clash detected: \\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MESSAGE_CLASH_IN_STUDENT \u003d \"Timetable clash detected for \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MESSAGE_CLASH_NOT_DETECTED \u003d \"There is no timetable clash.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MESSAGE_NEED_TWO_MODULES \u003d \"Please enter two modules to check clashes.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MESSAGE_ONLY_ONE_ITEM_ALLOWED \u003d \"Please check only one item at a time.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE \u003d \"Module not found. \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT \u003d \"Student not found. \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Please enter a valid index. \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MESSAGE_INVALID_APPEAL_TYPE \u003d \"This is not a add/drop module appeal. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + \"No need to check clashes.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private ArrayList\u003cClashCase\u003e clashCases;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private ClashCommandParameters params;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public ClashCommand(ClashCommandParameters params) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        List\u003cAppeal\u003e lastShownAppealList \u003d model.getFilteredAppealList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        List\u003cModule\u003e lastShownModuleList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        List\u003cStudent\u003e lastShownStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        clashCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (params.getAppealIndex().isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            verifyIndex(params.getAppealIndex().get().getZeroBased(), lastShownAppealList.size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            Appeal appeal \u003d lastShownAppealList.get(params.getAppealIndex().get().getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (!isAddOrDropModAppeal(appeal)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_APPEAL_TYPE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            Module moduleToAdd \u003d getModule(appeal.getModuleToAdd(), model.getFullModuleList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            Student studentToCheck \u003d getStudent(appeal.getStudentId(), model.getFullStudentList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            ArrayList\u003cModule\u003e currentModules \u003d getStudentCurrentModules(studentToCheck, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            for (Module currentModule : currentModules) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                if (getClashCase(currentModule, moduleToAdd).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    clashCases.add(getClashCase(currentModule, moduleToAdd).get());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (params.getModuleIndices().isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            verifyIndex(params.getFirstModuleIndex().getZeroBased(), lastShownModuleList.size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            verifyIndex(params.getSecondModuleIndex().getZeroBased(), lastShownModuleList.size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            Module firstModule \u003d lastShownModuleList.get(params.getFirstModuleIndex().getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            Module secondModule \u003d lastShownModuleList.get(params.getSecondModuleIndex().getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (getClashCase(firstModule, secondModule).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                clashCases.add(getClashCase(firstModule, secondModule).get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (params.getModuleCodes().isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            Module firstModule \u003d getModule(params.getFirstModuleCode(), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            Module secondModule \u003d getModule(params.getSecondModuleCode(), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (getClashCase(firstModule, secondModule).isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                clashCases.add(getClashCase(firstModule, secondModule).get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (params.getStudentIndex().isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            verifyIndex(params.getStudentIndex().get().getZeroBased(), lastShownStudentList.size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            Student student \u003d lastShownStudentList.get(params.getStudentIndex().get().getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            ArrayList\u003cModule\u003e currentModules \u003d getStudentCurrentModules(student, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            for (int i \u003d 0; i \u003c currentModules.size() - 1; i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                for (int j \u003d i + 1; j \u003c currentModules.size(); j++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    if (getClashCase(currentModules.get(i), currentModules.get(j)).isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        clashCases.add(getClashCase(currentModules.get(i), currentModules.get(j)).get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (clashCases.size() !\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return new CommandResult(MESSAGE_CLASH_DETECTED + getClashDetails());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return new CommandResult(MESSAGE_CLASH_NOT_DETECTED);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private String getClashDetails() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        for (ClashCase c : clashCases) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            s.append(c.getModuleCodeA());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            s.append(\"  \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            s.append(c.getModuleCodeB());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            s.append(\"\\n\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            s.append(c.getClashingSlots());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            s.append(\"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * Check whether index is within the bound of the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param index index input"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param size size of the list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @throws CommandException when index is larger than the size of the list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private void verifyIndex(int index, int size) throws CommandException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (index \u003e\u003d size) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * Returns an ArrayList of Modules which the student are taking currently."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param student a particular Student object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param model the Model object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @return an ArrayList of Modules which the student are taking currently"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private ArrayList\u003cModule\u003e getStudentCurrentModules(Student student, Model model) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        Set\u003cTag\u003e currentModulesSet \u003d student.getCurrentModules();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        ArrayList\u003cModule\u003e currentModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        for (Tag currentModule : currentModulesSet) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            String moduleCode \u003d currentModule.getTagName();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            List\u003cModule\u003e filteredModulesList \u003d model.getFullModuleList()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    .filter(m -\u003e m.getModuleCode().equalsIgnoreCase(moduleCode))"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            Module filteredModule \u003d filteredModulesList.get(0);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            currentModules.add(filteredModule);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return currentModules;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * Returns a Module object according to the module code given."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param moduleCode String of module code"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param moduleList The list containing all modules"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @return a Module object wtih the module code given"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @throws CommandException if the module is not found"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private Module getModule(String moduleCode, List\u003cModule\u003e moduleList) throws CommandException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        List\u003cModule\u003e modulesToCheckList \u003d moduleList.stream()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                .filter(m -\u003e m.getModuleCode().equalsIgnoreCase(moduleCode)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (modulesToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return modulesToCheckList.get(0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * Returns a Student object according to the matric ID given."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param studentId String of matric id"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param studentList The list containing all students"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @return a Student object with the matric ID given"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @throws CommandException if the student is not found"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private Student getStudent(String studentId, List\u003cStudent\u003e studentList) throws CommandException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        List\u003cStudent\u003e studentToCheckList \u003d studentList.stream()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                .filter(s -\u003e s.getMatricId().toString().equalsIgnoreCase(studentId)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (studentToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_STUDENT);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return studentToCheckList.get(0);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * Returns an ArrayList of Integers that contains the clashing time slots."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param moduleA a Module object of module A"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param moduleB a Module object of module B"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @return an ArrayList of Integers that contains the clashing time slots."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private Optional\u003cClashCase\u003e getClashCase(Module moduleA, Module moduleB) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        int[] timeTableA \u003d moduleA.getTimeSlotToIntArray();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        int[] timeTableB \u003d moduleB.getTimeSlotToIntArray();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        ArrayList\u003cInteger\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        for (int i : timeTableA) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            for (int j : timeTableB) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                if (i \u003d\u003d j) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    slots.add(i);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (!slots.isEmpty()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            ClashCase c \u003d new ClashCase();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            c.setModuleA(moduleA);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            c.setModuleB(moduleB);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            c.setClashingSlots(slots);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return Optional.of(c);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * Returns true if the appeal is a request to add or drop module"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param appeal a particular Appeal object"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @return true if the appeal is a request to add or drop module"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private boolean isAddOrDropModAppeal(Appeal appeal) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return appeal.getAppealType().equalsIgnoreCase(\"add module\")"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                || appeal.getAppealType().equalsIgnoreCase(\"drop module\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (!(other instanceof ClashCommand)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        ClashCommand c \u003d (ClashCommand) other;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return params.equals(c.params);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * Stores the details of the parsed parameters that a {@code ClashCommand} will operate on."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * This helps to avoid having too many unnecessary constructors (or passing of null-values)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * caused by the optional nature of the parameters passed to ClashCommand."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static class ClashCommandParameters {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        private Index appealIndex;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        private ArrayList\u003cIndex\u003e moduleIndices;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        private Index studentIndex;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        private ArrayList\u003cString\u003e moduleCodes;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public void setAppealIndex(Index appealIdx) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            this.appealIndex \u003d appealIdx;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public void setModuleIndices(Index firstModule, Index secondModule) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            this.moduleIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            this.moduleIndices.add(firstModule);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            this.moduleIndices.add(secondModule);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public void setStudentIndex(Index studentIndex) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public void setModuleCodes(String firstModule, String secondModule) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            this.moduleCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            this.moduleCodes.add(firstModule);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            this.moduleCodes.add(secondModule);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public Optional\u003cIndex\u003e getAppealIndex() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return Optional.ofNullable(appealIndex);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public Optional\u003cList\u003e getModuleIndices() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return Optional.ofNullable(moduleIndices);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public Index getFirstModuleIndex() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return moduleIndices.get(0);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public Index getSecondModuleIndex() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return moduleIndices.get(1);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public Optional\u003cIndex\u003e getStudentIndex() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return Optional.ofNullable(studentIndex);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public Optional\u003cList\u003e getModuleCodes() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return Optional.ofNullable(moduleCodes);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public String getFirstModuleCode() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return moduleCodes.get(0);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public String getSecondModuleCode() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return moduleCodes.get(1);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public boolean isPresent() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return CollectionUtil.isAnyNonNull(appealIndex, moduleIndices, studentIndex, moduleCodes);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (!(other instanceof ClashCommandParameters)) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            ClashCommandParameters cp \u003d (ClashCommandParameters) other;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return getAppealIndex().equals(cp.getAppealIndex())"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    \u0026\u0026 getModuleIndices().equals(cp.getModuleIndices())"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    \u0026\u0026 getStudentIndex().equals(cp.getStudentIndex())"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    \u0026\u0026 getModuleCodes().equals(cp.getModuleCodes());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * Stores the details of the clash cases that a {@code ClashCommand} will operate on."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * This helps to display relevant information of the clash details."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static class ClashCase {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        private Module moduleA;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        private Module moduleB;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        private ArrayList\u003cInteger\u003e clashingSlots;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public String getModuleCodeA() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return moduleA.getModuleCode();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public String getModuleCodeB() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return moduleB.getModuleCode();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public String getClashingSlots() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return generateTempMod().getModuleTimeTableToString();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public void setModuleA(Module moduleA) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            this.moduleA \u003d moduleA;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public void setModuleB(Module moduleB) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            this.moduleB \u003d moduleB;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public void setClashingSlots(ArrayList\u003cInteger\u003e clashingSlots) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            this.clashingSlots \u003d clashingSlots;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "         * Returns a temporary module object which stores the clashing time slots"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "         * @return Returns a temporary module object which stores the clashing time slots"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "         */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        private Module generateTempMod() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            for (int slot : clashingSlots) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                sb.append(slot).append(\",\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return new Module(\"\", \"\", \"\", \"\", sb.toString(),"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    \"\", new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (!(other instanceof ClashCase)) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            ClashCase c \u003d (ClashCase) other;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return this.getModuleCodeA().equals(c.getModuleCodeA())"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    \u0026\u0026 this.getModuleCodeB().equals(c.getModuleCodeB())"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    \u0026\u0026 this.getClashingSlots().equals(c.getClashingSlots());"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 3,
      "AaronLuk": 1,
      "chensu2436": 413
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** History window should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final boolean showHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Show/hide command output when displaying history window */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final boolean hideOutputHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public CommandResult(String feedbackToUser,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                         boolean showHistory,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                         boolean hideOutputHistory,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                         boolean showHelp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                         boolean exit) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.showHistory \u003d showHistory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.hideOutputHistory \u003d hideOutputHistory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean isShowHistory() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return showHistory;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean isHideOutputHistory() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return hideOutputHistory;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 showHistory \u003d\u003d otherCommandResult.showHistory"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 hideOutputHistory \u003d\u003d otherCommandResult.hideOutputHistory"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, showHistory, hideOutputHistory, exit);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 26,
      "-": 67
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting MAMS as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 5,
      "-": 15
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_APPEAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.appeal.AppealContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.module.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.student.StudentContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Finds and lists all students in MAMS whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all objects in the specified list that contain  \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + \"any of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + PREFIX_APPEAL + \"add\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + \"\\nor \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + PREFIX_MODULE + \"algorithm\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + \"\\nor \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            + PREFIX_STUDENT + \"bob alice\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MESSAGE_EMPTY_KEYWORD \u003d \"Please enter a keyword to search.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private List\u003cPredicate\u003e preds;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public FindCommand (List\u003cPredicate\u003e predicates) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        requireNonNull(predicates);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        this.preds \u003d predicates;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        StringBuilder response \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        for (Predicate pred : preds) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (pred instanceof AppealContainsKeywordsPredicate"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    \u0026\u0026 ((AppealContainsKeywordsPredicate) pred).getListSize() !\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                model.updateFilteredAppealList(pred);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                response.append(String.format(Messages.MESSAGE_APPEALS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        model.getFilteredAppealList().size()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                response.append(\"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (pred instanceof ModuleContainsKeywordsPredicate"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    \u0026\u0026 ((ModuleContainsKeywordsPredicate) pred).getListSize() !\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                model.updateFilteredModuleList(pred);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                response.append(String.format(Messages.MESSAGE_MODULES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        model.getFilteredModuleList().size()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                response.append(\"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (pred instanceof StudentContainsKeywordsPredicate"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    \u0026\u0026 ((StudentContainsKeywordsPredicate) pred).getListSize() !\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                model.updateFilteredStudentList(pred);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                response.append(String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                response.append(\"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return new CommandResult(response.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                \u0026\u0026 preds.equals(preds)); // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 7,
      "chensu2436": 66,
      "-": 13
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, false, false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Opens a new tab displaying the command history."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String SHOWING_HISTORY_MESSAGE \u003d \"Opened command history window.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final boolean hideCommandFeedback;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public HistoryCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.hideCommandFeedback \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public HistoryCommand(boolean hideCommandFeedback) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.hideCommandFeedback \u003d hideCommandFeedback;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return new CommandResult(SHOWING_HISTORY_MESSAGE, true, hideCommandFeedback,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(other instanceof HistoryCommand)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        HistoryCommand v \u003d (HistoryCommand) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return hideCommandFeedback \u003d\u003d v.hideCommandFeedback;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 50
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Lists all students in the MAMS to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_LIST_APPEALS_SUCCESS \u003d \"Listed all appeals\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_LIST_MODULES_SUCCESS \u003d \"Listed all modules\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_LIST_STUDENTS_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String NEWLINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String ASSERT_ERROR_MESSAGE \u003d \"Developer error: ListCommand should not have \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \"been instantiated with all false booleans\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final boolean showAppeals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final boolean showModules;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final boolean showStudents;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ListCommand(boolean showAppeals, boolean showModules, boolean showStudents) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.showAppeals \u003d showAppeals;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.showModules \u003d showModules;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.showStudents \u003d showStudents;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // it is responsibility of parser to enforce this condition"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert(containsAtLeastOneTrue(showAppeals, showModules, showStudents)) : ASSERT_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StringBuilder msg \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (showAppeals) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            model.updateFilteredAppealList(Model.PREDICATE_SHOW_ALL_APPEALS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            msg.append(MESSAGE_LIST_APPEALS_SUCCESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            msg.append(NEWLINE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (showModules) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            msg.append(MESSAGE_LIST_MODULES_SUCCESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            msg.append(NEWLINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (showStudents) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            msg.append(MESSAGE_LIST_STUDENTS_SUCCESS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            msg.append(NEWLINE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return new CommandResult(msg.toString().trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if at least one element in boolean array {@code params} is true."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * This was made for code readability."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param params boolean array to be tested."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static boolean containsAtLeastOneTrue(boolean... params) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(params);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        boolean hasAtLeastOneTrue \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (boolean param : params) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            hasAtLeastOneTrue \u003d hasAtLeastOneTrue || param;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return hasAtLeastOneTrue;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(other instanceof ListCommand)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ListCommand l \u003d (ListCommand) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return showAppeals \u003d\u003d l.showAppeals"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 showModules \u003d\u003d l.showModules"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 showStudents \u003d\u003d l.showStudents;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 75,
      "-": 17
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/MassApprove.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.commands.AddModCommand.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.commands.ClashCommand.ClashCase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.commands.ModCommand.MESSAGE_INVALID_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.commands.RemoveModCommand.MESSAGE_MISSING_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.student.Credits;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Mass approves appeals in Mams"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class MassApprove extends Approve {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final List\u003cString\u003e validIds;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final List\u003cString\u003e invalidIds;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final List\u003cString\u003e appealsWithClash;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final List\u003cString\u003e alreadyApproved \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final List\u003cString\u003e alreadyRejected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final List\u003cString\u003e approvedSuccessfully \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public MassApprove(List\u003cString\u003e validIds, List\u003cString\u003e invalidIds) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.validIds \u003d validIds;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.invalidIds \u003d invalidIds;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.appealsWithClash \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        List\u003cAppeal\u003e fullAppealList \u003d model.getFullAppealList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        for (String appealId : validIds) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            for (Appeal appeal : fullAppealList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (appealId.equalsIgnoreCase(appeal.getAppealId())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    Appeal approvedAppeal;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    Appeal appealToApprove \u003d appeal;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if (appealToApprove.isResolved() \u003d\u003d false) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        if (appealId.equalsIgnoreCase(appeal.getAppealId())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            Student studentToEdit;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            Student editedStudent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            Module moduleToEdit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            Module editedModule;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            String moduleCode;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            List\u003cStudent\u003e fullStudentList \u003d model.getFullStudentList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            List\u003cModule\u003e fullModuleList \u003d model.getFullModuleList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            String appealType \u003d appealToApprove.getAppealType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            String studentToEditId \u003d appealToApprove.getStudentId();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            if (appealType.equalsIgnoreCase(\"Increase workload\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                List\u003cStudent\u003e studentToCheckList \u003d fullStudentList.stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        .filter(p -\u003e p.getMatricId().toString().equals(studentToEditId))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                if (studentToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_MATRIC_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                studentToEdit \u003d studentToCheckList.get(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                editedStudent \u003d new Student(studentToEdit.getName(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        new Credits((Integer.toString(appealToApprove.getStudentWorkload()))),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        studentToEdit.getPrevMods(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        studentToEdit.getMatricId(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        studentToEdit.getTags());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            } else if (appealType.equalsIgnoreCase(\"Drop module\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                moduleCode \u003d appealToApprove.getModuleToDrop();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                //Check if student exists"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                List\u003cStudent\u003e studentToCheckList \u003d fullStudentList.stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        .filter(p -\u003e p.getMatricId().toString().equals(studentToEditId))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                if (studentToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_MATRIC_ID);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                studentToEdit \u003d studentToCheckList.get(0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                //check if student has the module (ready for deletion)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                Set\u003cTag\u003e studentModules \u003d studentToEdit.getCurrentModules();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                boolean hasModule \u003d false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                for (Tag tag : studentModules) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    if (tag.getTagName().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        hasModule \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                if (!hasModule) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    throw new CommandException(MESSAGE_MISSING_MODULE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                //check if module exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                List\u003cModule\u003e moduleToCheckList \u003d fullModuleList.stream()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        .filter(m -\u003e m.getModuleCode().equalsIgnoreCase(moduleCode))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                if (moduleToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    throw new CommandException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                moduleToEdit \u003d moduleToCheckList.get(0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                Set\u003cTag\u003e ret \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                Set\u003cTag\u003e studentAllTags \u003d studentToEdit.getTags();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                for (Tag tag : studentAllTags) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    if (!tag.getTagName().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        ret.add(tag);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                //create a tag list without the student for the new module"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                Set\u003cTag\u003e ret2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                Set\u003cTag\u003e moduleAllStudents \u003d moduleToEdit.getStudents();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                for (Tag tag : moduleAllStudents) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    if (!tag.getTagName().equalsIgnoreCase(studentToEdit.getMatricId().toString())) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        ret2.add(tag);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                editedStudent \u003d new Student(studentToEdit.getName(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        studentToEdit.getCredits(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        studentToEdit.getPrevMods(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        studentToEdit.getMatricId(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        ret);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                model.updateFilteredAppealList(Model.PREDICATE_SHOW_ALL_APPEALS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                editedModule \u003d new Module(moduleToEdit.getModuleCode(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        moduleToEdit.getModuleName(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        moduleToEdit.getModuleDescription(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        moduleToEdit.getLecturerName(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        moduleToEdit.getTimeSlot(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        moduleToEdit.getQuota(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        ret2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                model.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                ArrayList\u003cClashCase\u003e clashCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                moduleCode \u003d appealToApprove.getModuleToAdd();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                List\u003cStudent\u003e studentToCheckList \u003d fullStudentList.stream()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        .filter(p -\u003e p.getMatricId().toString().equals(studentToEditId))"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                if (studentToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_MATRIC_ID);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                studentToEdit \u003d studentToCheckList.get(0);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                //check if module exist"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                List\u003cModule\u003e moduleToCheckList \u003d fullModuleList.stream()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        .filter(m -\u003e m.getModuleCode().equalsIgnoreCase(moduleCode))"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                if (moduleToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    throw new CommandException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                moduleToEdit \u003d moduleToCheckList.get(0);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                //check if student already has module."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                Set\u003cTag\u003e studentModules \u003d studentToEdit.getCurrentModules();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                for (Tag tag : studentModules) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    if (tag.getTagName().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                //Get all the modules student has and add them into an arraylist of modules for checking"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                ArrayList\u003cModule\u003e currentModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                for (Tag currentModule : studentModules) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    String modCode \u003d currentModule.getTagName();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    List\u003cModule\u003e filteredModulesList \u003d model.getFullModuleList()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                            .stream()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                            .filter(m -\u003e m.getModuleCode().equalsIgnoreCase(modCode))"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    Module filteredModule \u003d filteredModulesList.get(0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    currentModules.add(filteredModule);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                //Checks if current modules clashes with requested module"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                for (Module currentModule : currentModules) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    if (getClashCase(currentModule, moduleToEdit).isPresent()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        clashCases.add(getClashCase(currentModule, moduleToEdit).get());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                if (!clashCases.isEmpty()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    appealsWithClash.add(appealId);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                //add module to student."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                Set\u003cTag\u003e ret \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                Set\u003cTag\u003e studentAllTags \u003d studentToEdit.getTags();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                for (Tag tag : studentAllTags) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    ret.add(tag);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                ret.add(new Tag(moduleCode));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                //add student to module field"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                Set\u003cTag\u003e moduleAllStudents \u003d moduleToEdit.getStudents();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                Set\u003cTag\u003e ret2 \u003d new HashSet\u003c\u003e(moduleAllStudents);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                ret2.add(new Tag(studentToEdit.getMatricId().toString()));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                //replace old student and old module objects with edited modules."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                editedStudent \u003d new Student(studentToEdit.getName(),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        studentToEdit.getCredits(),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        studentToEdit.getPrevMods(),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        studentToEdit.getMatricId(),"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        ret);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                editedModule \u003d new Module(moduleToEdit.getModuleCode(),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        moduleToEdit.getModuleName(),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        moduleToEdit.getModuleDescription(),"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        moduleToEdit.getLecturerName(),"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        moduleToEdit.getTimeSlot(),"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        moduleToEdit.getQuota(),"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                        ret2);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                model.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            approvedAppeal \u003d new Appeal(appealToApprove.getAppealId(),"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    appealToApprove.getAppealType(),"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    appealToApprove.getStudentId(),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    appealToApprove.getAcademicYear(),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    appealToApprove.getStudentWorkload(),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    appealToApprove.getAppealDescription(),"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    appealToApprove.getPreviousModule(),"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    appealToApprove.getNewModule(),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                    appealToApprove.getModuleToAdd(),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                    appealToApprove.getModuleToDrop(),"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    true,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    \"APPROVED\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                    \"\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            model.setAppeal(appealToApprove, approvedAppeal);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            model.updateFilteredAppealList(Model.PREDICATE_SHOW_ALL_APPEALS);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            model.setAppeal(appealToApprove, approvedAppeal);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            approvedSuccessfully.add(appealId);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        } else if (appealToApprove.isResolved() \u003d\u003d true"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                \u0026\u0026 appealToApprove.getResult().equalsIgnoreCase(\"APPROVED\")) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            alreadyApproved.add(appeal.getAppealId());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        } else if (appealToApprove.isResolved() \u003d\u003d true"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                \u0026\u0026 appealToApprove.getResult().equalsIgnoreCase(\"REJECTED\")) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            alreadyRejected.add(appeal.getAppealId());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return new CommandResult(resultGenerator());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Generates response for user"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String resultGenerator() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (approvedSuccessfully.isEmpty()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            result +\u003d \"No appeals were approved\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            result +\u003d \"Successfully approved: \" + approvedSuccessfully.toString();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!alreadyApproved.isEmpty()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            result +\u003d \"\\nAlready approved: \" + alreadyApproved.toString();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!alreadyRejected.isEmpty()) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            result +\u003d \"\\nAlready rejected: \" + alreadyRejected.toString();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!invalidIds.isEmpty()) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            result +\u003d \"\\nInvalid appeal IDs: \" + invalidIds.toString();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!appealsWithClash.isEmpty()) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            result +\u003d \"\\nAppeals with module clash: \" + appealsWithClash.toString();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private Optional\u003cClashCase\u003e getClashCase(Module moduleA, Module moduleB) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        int[] timeTableA \u003d moduleA.getTimeSlotToIntArray();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        int[] timeTableB \u003d moduleB.getTimeSlotToIntArray();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ArrayList\u003cInteger\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        for (int i : timeTableA) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            for (int j : timeTableB) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (i \u003d\u003d j) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    slots.add(i);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!slots.isEmpty()) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            ClashCase c \u003d new ClashCase();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            c.setModuleA(moduleA);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            c.setModuleB(moduleB);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            c.setClashingSlots(slots);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return Optional.of(c);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 2,
      "AaronLuk": 326
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/MassReject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Mass rejects appeals in Mams"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class MassReject extends Reject {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final List\u003cString\u003e validIds;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final List\u003cString\u003e invalidIds;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final List\u003cString\u003e alreadyApproved \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final List\u003cString\u003e alreadyRejected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final List\u003cString\u003e rejectedSuccessfully \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public MassReject(List\u003cString\u003e validIds, List\u003cString\u003e invalidIds) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.validIds \u003d validIds;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.invalidIds \u003d invalidIds;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        List\u003cAppeal\u003e lastShownList \u003d model.getFilteredAppealList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        for (String appealId : validIds) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            for (Appeal appeal : lastShownList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (appealId.equalsIgnoreCase(appeal.getAppealId())) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    Appeal approvedAppeal;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    Appeal appealToApprove \u003d appeal;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if (appealToApprove.isResolved() \u003d\u003d false) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        approvedAppeal \u003d new Appeal(appealToApprove.getAppealId(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                appealToApprove.getAppealType(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                appealToApprove.getStudentId(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                appealToApprove.getAcademicYear(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                appealToApprove.getStudentWorkload(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                appealToApprove.getAppealDescription(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                appealToApprove.getPreviousModule(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                appealToApprove.getNewModule(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                appealToApprove.getModuleToAdd(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                appealToApprove.getModuleToDrop(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                true,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                \"REJECTED\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        model.setAppeal(appealToApprove, approvedAppeal);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        rejectedSuccessfully.add(appealId);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    } else if (appealToApprove.isResolved() \u003d\u003d true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            \u0026\u0026 appealToApprove.getResult().equalsIgnoreCase(\"APPROVED\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        alreadyApproved.add(appeal.getAppealId());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    } else if (appealToApprove.isResolved() \u003d\u003d true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                            \u0026\u0026 appealToApprove.getResult().equalsIgnoreCase(\"REJECTED\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        alreadyRejected.add(appeal.getAppealId());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return new CommandResult(resultGenerator());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Generates response for user"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String resultGenerator() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (rejectedSuccessfully.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            result +\u003d \"No appeals were rejected\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            result +\u003d \"Successfully rejected: \" + rejectedSuccessfully.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!alreadyApproved.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            result +\u003d \"\\nAlready approved: \" + alreadyApproved.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!alreadyRejected.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            result +\u003d \"\\nAlready rejected: \" + alreadyRejected.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!invalidIds.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            result +\u003d \"\\nInvalid appeal IDs: \" + invalidIds.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 2,
      "AaronLuk": 89
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/ModCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * Abstract class for AddModCommand and RemoveModCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "public abstract class ModCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String COMMAND_WORD_ADD_MOD \u003d \"addmod\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String COMMAND_WORD_REMOVE_MOD \u003d \"removemod\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_USAGE_ADD_MOD \u003d COMMAND_WORD_ADD_MOD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            + \": Adds a module to a student in MAMS. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            + \"Example: addmod \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            + PREFIX_STUDENT + \"MATRIC_ID or INDEX(Student list) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            + PREFIX_MODULE + \"MODULE_CODE or INDEX(Module list) \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_ARGUMENT_ADDMOD \u003d \"Unknown Argument given. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            + MESSAGE_USAGE_ADD_MOD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_ARGUMENT_REMOVEMOD \u003d \"Unknown Argument given. \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            + MESSAGE_USAGE_ADD_MOD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_USAGE_REMOVE_MOD \u003d COMMAND_WORD_REMOVE_MOD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            + \": Remove a module from a student in MAMS. \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            + \"Example: removemod \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            + PREFIX_STUDENT + \"MATRIC_ID or INDEX(Student list)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            + PREFIX_MODULE + \"MODULE_CODE or INDEX(Module list)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_MISSING_MATRICID_OR_INDEX \u003d \"Please enter a valid Matric ID or Index. \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE \u003d \"Invalid Module Code. \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_MORE_THAN_ONE_MODULE \u003d \"Please specify only 1 Module Code\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_MORE_THAN_ONE_IDENTIFIER \u003d \"Please specify only 1 index or Matric ID\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Student is already registered for this module.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_MISSING_MODULE \u003d \"Student is not registered for this module. \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Updates the list after AddModCommand and RemoveModCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param model mams model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param studentToEdit student to be edited"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param moduleToEdit module to edited"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param ret new tags for student"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param ret2 new tags for module"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param messageRemoveModSuccess result given in GUI window"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @return commandResult of action"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    protected CommandResult updateList(Model model, Student studentToEdit,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                                       Module moduleToEdit, Set\u003cTag\u003e ret, Set\u003cTag\u003e ret2,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                                       String messageRemoveModSuccess) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Student studentWithRemovedModule;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Module moduleWithRemovedStudent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        studentWithRemovedModule \u003d new Student(studentToEdit.getName(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                studentToEdit.getCredits(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                studentToEdit.getPrevMods(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                studentToEdit.getMatricId(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                ret);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleWithRemovedStudent \u003d new Module(moduleToEdit.getModuleCode(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                moduleToEdit.getModuleName(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                moduleToEdit.getModuleDescription(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                moduleToEdit.getLecturerName(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                moduleToEdit.getTimeSlot(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                moduleToEdit.getQuota(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                ret2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        model.setStudent(studentToEdit, studentWithRemovedModule);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        model.setModule(moduleToEdit, moduleWithRemovedStudent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return new CommandResult(String.format(messageRemoveModSuccess,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                studentWithRemovedModule.getName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongliyuan": 81
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.ReadOnlyMams;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.storage.JsonMamsStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " * loads data from mamshistory_undo.json"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public class RedoCommand extends StoreCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        JsonMamsStorage history \u003d new JsonMamsStorage(Paths.get(\"data/mamshistory_redo.json\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        ReadOnlyMams mamsToReplace;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            if (history.readMams().isPresent()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                mamsToReplace \u003d history.readMams().get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                throw new DataConversionException(new Exception(\"DataConversionException\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            new SaveCommand(\"undo\").privateExecute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            model.replaceMams(mamsToReplace);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            File file \u003d new File(\"data/mamshistory_redo.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new CommandException(\"Unable to redo\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return new CommandResult(\"Redo Successful \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MistyRainforest": 51
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/Reject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_APPEAL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_MASS_RESOLVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_REASON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Reject parent class for reject commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public abstract class Reject extends ResolveCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MESSAGE_USAGE_REJECT \u003d COMMAND_WORD_REJECT_APPEAL"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \": rejects individual or multiple appeals\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \"To reject individually:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \"Parameters: KEYWORD [\" + PREFIX_APPEAL + \"INDEX] [\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + PREFIX_REASON + \"REASON]\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD_REJECT_APPEAL + \" \" + PREFIX_APPEAL + \"1 \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + PREFIX_REASON + \"module quota exceeded.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \"To reject multiple:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \"Parameters: KEYWORDS [\" + PREFIX_MASS_RESOLVE + \"] [APPEALID] [APPEALID] ...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD_REJECT_APPEAL + \" \" + PREFIX_MASS_RESOLVE + \"C000001 C000012 C000007 C000020\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 22
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/RejectCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * Rejects a appeal in mams."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class RejectCommand extends Reject {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String reason;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public RejectCommand(Index index, String reason) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        requireNonNull(index, reason);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        List\u003cAppeal\u003e lastShownList \u003d model.getFilteredAppealList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPEAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Appeal rejectedAppeal;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Appeal appealToReject \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (appealToReject.isResolved() \u003d\u003d false) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            rejectedAppeal \u003d new Appeal(appealToReject.getAppealId(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToReject.getAppealType(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToReject.getStudentId(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToReject.getAcademicYear(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToReject.getStudentWorkload(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToReject.getAppealDescription(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToReject.getPreviousModule(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    appealToReject.getNewModule(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    appealToReject.getModuleToAdd(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    appealToReject.getModuleToDrop(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    true,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    \"REJECTED\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    reason);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            model.setAppeal(appealToReject, rejectedAppeal);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            model.updateFilteredAppealList(Model.PREDICATE_SHOW_ALL_APPEALS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return new CommandResult(generateSuccessMessage(appealToReject));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return new CommandResult(MESSAGE_REJECT_ALREADY_REJECTED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String generateSuccessMessage(Appeal appealToReject) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return \"Rejected \" + appealToReject.getAppealId();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!(other instanceof RejectCommand)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        RejectCommand e \u003d (RejectCommand) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                \u0026\u0026 reason.equals(e.reason);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 2,
      "AaronLuk": 83,
      "cheongliyuan": 1
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/RemoveModCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * Adds a module to a student"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "public class RemoveModCommand extends ModCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_REMOVE_MOD_SUCCESS \u003d \"Removed module from : %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MESSAGE_STUDENT_REMOVE_MOD \u003d \"Removed %s from \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String moduleIdentifier;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String studentIdentifier;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private boolean moduleUsingIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private boolean studentUsingIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Builder class for RemoveModCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static class RemoveModCommandBuilder {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        private final String moduleIdentifier;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        private final String studentIdentifier;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        private boolean moduleUsingIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        private boolean studentUsingIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        public RemoveModCommandBuilder (String moduleIdentifier, String studentIdentifier) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            this.moduleIdentifier \u003d moduleIdentifier;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            this.studentIdentifier \u003d studentIdentifier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            this.moduleUsingIndex \u003d checkIfModuleIndex(moduleIdentifier);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            this.studentUsingIndex \u003d checkIfStudentIndex(studentIdentifier);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         * Checks if identifier given for prefix m/ is a number"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         * @param moduleIdentifier string given under m/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         * @return true if is a index given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        boolean checkIfModuleIndex(String moduleIdentifier) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            assert moduleIdentifier !\u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            boolean result \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (moduleIdentifier.substring(0, 1).contains(\"C\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    || moduleIdentifier.substring(0, 1).contains(\"c\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                result \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         * Checks if identifier given for prefix s/ is a number"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         * @param studentIdentifier string given under s/"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         * @return true if is a index given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        boolean checkIfStudentIndex(String studentIdentifier) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            assert studentIdentifier !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            boolean result \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (studentIdentifier.substring(0, 1).contains(\"A\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    || studentIdentifier.substring(0, 1).contains(\"a\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                result \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        public RemoveModCommand build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return new RemoveModCommand(this);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private RemoveModCommand(RemoveModCommandBuilder builder) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.moduleIdentifier \u003d builder.moduleIdentifier;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.studentIdentifier \u003d builder.studentIdentifier;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.moduleUsingIndex \u003d builder.moduleUsingIndex;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.studentUsingIndex \u003d builder.studentUsingIndex;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Checks for logical errors, such as non-existant modules and students etc."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Create a new student with the removed module and replaces the old student in mams."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @return {@code CommandResult}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws CommandException for non-existant modules/student or if the student"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * does not have the module in the first place"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        List\u003cStudent\u003e studentList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        List\u003cModule\u003e moduleList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Student studentToEdit;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Student studentWithRemovedModule;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Module moduleToEdit;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Module moduleWithRemovedStudent;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleList \u003d moduleUsingIndex ? model.getFilteredModuleList() : model.getFullModuleList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        studentList \u003d studentUsingIndex ? model.getFilteredStudentList() : model.getFullStudentList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //various checks"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleToEdit \u003d returnModuleIfExist(moduleList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        studentToEdit \u003d returnStudentIfExist(studentList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        checkIfStudentHasModule(studentToEdit, moduleToEdit.getModuleCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //create a tag list without the module for the new student"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Set\u003cTag\u003e ret \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Set\u003cTag\u003e studentAllTags \u003d studentToEdit.getTags();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        for (Tag tag : studentAllTags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (!tag.getTagName().equalsIgnoreCase(moduleToEdit.getModuleCode())) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                ret.add(tag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //create a tag list without the student for the new module"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Set\u003cTag\u003e ret2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Set\u003cTag\u003e moduleAllStudents \u003d moduleToEdit.getStudents();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        for (Tag tag : moduleAllStudents) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (!tag.getTagName().equalsIgnoreCase(studentToEdit.getMatricId().toString())) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                ret2.add(tag);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //replace old student and old module objects with edited modules."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return updateList(model, studentToEdit, moduleToEdit, ret, ret2, MESSAGE_REMOVE_MOD_SUCCESS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Checks if module exists"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param moduleList module list being checked"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @return module if found"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws CommandException if module is not found"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    Module returnModuleIfExist(List\u003cModule\u003e moduleList) throws CommandException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (moduleUsingIndex) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            int tempIndex \u003d Integer.parseInt(moduleIdentifier);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (tempIndex \u003c 1) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new CommandException(ModCommand.MESSAGE_USAGE_ADD_MOD);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            int tempIndexZeroBased \u003d tempIndex - 1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (tempIndexZeroBased \u003e\u003d moduleList.size()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return moduleList.get(tempIndexZeroBased);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            List\u003cModule\u003e moduleToCheckList \u003d moduleList.stream()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    .filter(m -\u003e m.getModuleCode().equalsIgnoreCase(moduleIdentifier)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (moduleToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return moduleToCheckList.get(0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Checks if student exists for deletion."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param studentList student list being checked"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @return student if found"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws CommandException if student does not exist"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    Student returnStudentIfExist(List\u003cStudent\u003e studentList) throws CommandException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (studentUsingIndex) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            int tempIndex \u003d Integer.parseInt(studentIdentifier);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (tempIndex \u003c 1) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new CommandException(ModCommand.MESSAGE_USAGE_ADD_MOD);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            int tempIndexZeroBased \u003d tempIndex - 1;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (tempIndexZeroBased \u003e\u003d studentList.size()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return studentList.get(tempIndexZeroBased);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            List\u003cStudent\u003e studentToCheckList \u003d studentList.stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    .filter(p -\u003e p.getMatricId().toString().equalsIgnoreCase(studentIdentifier))"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (studentToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_MATRIC_ID);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return studentToCheckList.get(0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Checks if students has the module ready for deletion"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param studentToEdit student to be checked"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws CommandException if the student does not have the module"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private void checkIfStudentHasModule(Student studentToEdit, String moduleCode) throws CommandException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Set\u003cTag\u003e studentModules \u003d studentToEdit.getCurrentModules();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        boolean hasModule \u003d false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        for (Tag tag: studentModules) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (tag.getTagName().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                hasModule \u003d true;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!hasModule) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_MODULE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!(other instanceof RemoveModCommand)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        RemoveModCommand e \u003d (RemoveModCommand) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 1,
      "cheongliyuan": 229
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/ResolveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Parent class for all resolve appeal commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public abstract class ResolveCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String COMMAND_WORD_APPROVE_APPEAL \u003d \"approve\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String COMMAND_WORD_REJECT_APPEAL \u003d \"reject\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MESSAGE_APPEAL_ALREADY_APPROVED \u003d \"The appeal was already resolved\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MESSAGE_REJECT_ALREADY_REJECTED \u003d \"The appeal was already resolved\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 13
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/SaveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.ReadOnlyMams;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.storage.JsonMamsStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " * saves data under mamshistory_tag.json"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public class SaveCommand extends StoreCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private String tag \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public SaveCommand(String tag) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public SaveCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.tag \u003d new SimpleDateFormat(\"yyyy.MM.dd.HH.mm.ss\").format(new Date());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (this.tag.equals(\"\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            this.tag \u003d new SimpleDateFormat(\"yyyy.MM.dd.HH.mm.ss\").format(new Date());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        ReadOnlyMams mamsToSave \u003d model.getMams();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        JsonMamsStorage history \u003d new JsonMamsStorage(Paths.get(\"data/mamshistory_\" + this.tag + \".json\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            history.saveMams(mamsToSave);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new CommandException(\"Unable to backup\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return new CommandResult(\"Backup Successful, Saved in \\\"data/mamshistory_ \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                + this.tag + \".json\\\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    /** execute used for undo and redo objects"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public CommandResult privateExecute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        ReadOnlyMams mamsToSave \u003d model.getMams();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        JsonMamsStorage history \u003d new JsonMamsStorage(Paths.get(\"data/mamshistory_\" + this.tag + \".json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            history.saveMams(mamsToSave);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new CommandException(\"Unable to save\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return new CommandResult(\"Save Successful \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return this.tag;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (!(other instanceof UndoCommand)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MistyRainforest": 79
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/SetCredits.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.Credits;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " * Adds a module to a student"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public class SetCredits extends StudentCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String MESSAGE_CREDIT_CHANGE_SUCCESS \u003d \"Student max credits updated to : %d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MESSAGE_STUDENT_CREDIT_CHANGE \u003d \"%s max credits updated to: %d\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private final String matricId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private final String newCredits;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public SetCredits(Index index, String newCredits) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        requireNonNull(newCredits);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.matricId \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.newCredits \u003d newCredits;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public SetCredits(String matricId, String newCredits) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        requireNonNull(matricId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        requireNonNull(newCredits);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.matricId \u003d matricId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.newCredits \u003d newCredits;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Checks for logical errors, such as non-existant modules and students etc."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Create a new student with the added module and replaces the old student in mams."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @return {@code CommandResult}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @throws CommandException for non-existant modules/student or if the student"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * already has the module."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        List\u003cStudent\u003e lastShownStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Student studentToEdit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Student editedStudent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        //check if student exist"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownStudentList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            studentToEdit \u003d lastShownStudentList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            List\u003cStudent\u003e studentToCheckList \u003d lastShownStudentList.stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                    .filter(p -\u003e p.getMatricId().toString().equals(matricId)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            if (studentToCheckList.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_MATRIC_ID);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            studentToEdit \u003d studentToCheckList.get(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // check if credit value is valid"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (!Credits.isValidCredits(newCredits)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CREDIT_VALUE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        //check if current mods satisfy new credits"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (4 * studentToEdit.getNumberOfMods() \u003e Integer.parseInt(newCredits)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_CREDIT_UNDER_AMT_MODS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        editedStudent \u003d new Student(studentToEdit.getName(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                new Credits(newCredits),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                studentToEdit.getPrevMods(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                studentToEdit.getMatricId(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                studentToEdit.getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CREDIT_CHANGE_SUCCESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                editedStudent.getCredits().getIntVal()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (!(other instanceof AddModCommand)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        AddModCommand e \u003d (AddModCommand) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 1,
      "cheongliyuan": 1,
      "MistyRainforest": 111
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/StoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " * Abstract class for AddModCommand and RemoveModCommand"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public abstract class StoreCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String COMMAND_STORE \u003d \"save\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String COMMAND_UNDO \u003d \"undo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String COMMAND_REDO \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String COMMAND_BACKUP \u003d \"backup\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String MESSAGE_USAGE_BACKUP \u003d COMMAND_BACKUP"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            + \": Creates a backup with specified tag \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            + \"Use an alphanumeric (excluding \\\"undo\\\" and \\\"redo\\\") for the backup tag\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            + \"The file will be prepended with \\\"mamshistory_\\\"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            + \"If no tags are present, a timestamp will be used instead\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            + \"Example: \" + COMMAND_BACKUP"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            + \" \" + PREFIX_TAG + \"TAG NUMBER\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String MESSAGE_USAGE_UNDO \u003d COMMAND_UNDO"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            + \": Undo last action\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String MESSAGE_USAGE_REDO \u003d COMMAND_REDO"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            + \"Undo last undo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String MESSAGE_MISSING_BACKUP_TAG \u003d \"Please enter 1 valid tag number\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MistyRainforest": 32
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/StudentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " * Abstract class for AddModCommand and RemoveModCommand"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public abstract class StudentCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String COMMAND_WORD_SET_CREDITS \u003d \"setcredits\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String MESSAGE_USAGE_SETCREDITS \u003d COMMAND_WORD_SET_CREDITS"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            + \": Sets a student\u0027s maximum credits \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            + \"identified by index number used in the displayed student list\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) or \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            + PREFIX_CREDITS + \"CREDITS \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String MESSAGE_INVALID_MATRICID \u003d \"Please enter 1 valid Matric ID or Index. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String MESSAGE_INVALID_CREDIT_VALUE \u003d \"Please enter 1 valid credit value. \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MistyRainforest": 20
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.ReadOnlyMams;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.storage.JsonMamsStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " * loads data from mamshistory_undo.json"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public class UndoCommand extends StoreCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public UndoCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        JsonMamsStorage history \u003d new JsonMamsStorage(Paths.get(\"data/mamshistory_undo.json\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        ReadOnlyMams mamsToReplace;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            if (history.readMams().isPresent()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                mamsToReplace \u003d history.readMams().get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                throw new DataConversionException(new Exception());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new CommandException(\"Unable to undo\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        new SaveCommand(\"redo\").privateExecute(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        model.replaceMams(mamsToReplace);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return new CommandResult(\"Undo Successful \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (!(other instanceof UndoCommand)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MistyRainforest": 53
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_INVALID_APPEAL_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.util.CollectionUtil.isAnyNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_APPEAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Displays expanded view of items based on its index on the displayed list. Able to specify up to three MAMS items"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * (one from each type) to be displayed in a single command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays expanded view of items \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \"based on their indexes on the displayed lists. Specify up to three items \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \"(one from each type) in a single \" + COMMAND_WORD + \" command.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \"Parameters: KEYWORD \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \" [\" + PREFIX_APPEAL + \"INDEX\" + \"] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \" [\" + PREFIX_MODULE + \"INDEX\" + \"] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \" [\" + PREFIX_STUDENT + \"INDEX\" + \"]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + PREFIX_APPEAL + \"1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + PREFIX_MODULE + \"11 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + PREFIX_STUDENT + \"10\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_VIEW_SUCCESS \u003d \"Displayed items with ID: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_APPEAL_ALREADY_EXPANDED \u003d \"There is already an appeal in expanded form\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_MODULE_ALREADY_EXPANDED \u003d \"There is already a module in expanded form\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_STUDENT_ALREADY_EXPANDED \u003d \"There is already a student in expanded form\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_NO_APPEALS_TO_EXPAND \u003d \"There are no displayed appeals to expand\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_NO_MODULES_TO_EXPAND \u003d \"There are no displayed modules to expand\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_NO_STUDENTS_TO_EXPAND \u003d \"There are no displayed students to expand\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_TIP_ON_FAILURE \u003d \"Tip: You may use the list or find commands to retrieve valid\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \"lists of items to expand\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ViewCommandParameters params;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ViewCommand(ViewCommandParameters params) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(params);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Execute ViewCommand and displays the expanded view of items in the specified indexes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * In the case of multiple specified indexes:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * If at least one of the parameters are out of bounds, then no lists will be updated."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * That is to say, even if the appealIndex was valid, but the supplied studentIndex in"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * ViewCommandParameters was out of bounds, then appeal list will not be updated and an"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * error will be thrown. This is by design - if appeal list had been updated, then the user"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * will have to go back and delete the appeal list argument from the previous command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * before he can reuse the command. (Remember that if ViewCommand is performed successfully on an appeal,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * the new displayed appeal list now only has one item with an Index of 1, so the old Index is no"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * longer valid, and old command is hence no longer reusable)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // Defensive check: ViewCommandParser should have ensured at least one parameter is present"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!params.isAtLeastOneParameterPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new CommandException(MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StringBuilder displayedFeedback \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        List\u003cAppeal\u003e lastShownAppealList \u003d model.getFilteredAppealList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        List\u003cModule\u003e lastShownModuleList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        List\u003cStudent\u003e lastShownStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        verifyAllTargetedListsExpandable(lastShownAppealList, lastShownModuleList, lastShownStudentList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        verifyAllSpecifiedIndexesWithinBounds(lastShownAppealList, lastShownModuleList, lastShownStudentList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (params.getAppealIndex().isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            Appeal appeal \u003d lastShownAppealList.get(params.getAppealIndex().get().getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            model.updateFilteredAppealList(appeal::equals);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            displayedFeedback.append(appeal.getAppealId());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            displayedFeedback.append(\" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (params.getModuleIndex().isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            Module module \u003d lastShownModuleList.get(params.getModuleIndex().get().getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            model.updateFilteredModuleList(module::equals);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            displayedFeedback.append(module.getModuleCode());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            displayedFeedback.append(\" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (params.getStudentIndex().isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            Student student \u003d lastShownStudentList.get(params.getStudentIndex().get().getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            model.updateFilteredStudentList(student::equals);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            displayedFeedback.append(student.getMatricId());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            displayedFeedback.append(\" \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_SUCCESS, displayedFeedback.toString().trim()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Verify that the supplied {@code Index} for appeal, module, and student in ViewCommand are all"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * within bounds of the currently displayed list on MAMS."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param lastShownAppealList appeal list to check {@code appealIndex} against"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param lastShownModuleList module list to check {@code moduleIndex} against"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param lastShownStudentList student list to check {@code studentIndex} against"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws CommandException if any of the indexes are out of bounds within their specific lists"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    protected void verifyAllSpecifiedIndexesWithinBounds(List\u003cAppeal\u003e lastShownAppealList,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                                         List\u003cModule\u003e lastShownModuleList,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                                         List\u003cStudent\u003e lastShownStudentList) throws CommandException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireAllNonNull(lastShownAppealList, lastShownModuleList, lastShownStudentList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StringBuilder errorMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        boolean isIndexOutOfBounds \u003d false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (params.getAppealIndex().isPresent()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 params.getAppealIndex().get().getZeroBased() \u003e\u003d lastShownAppealList.size()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            errorMessage.append(MESSAGE_INVALID_APPEAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            errorMessage.append(\"\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            isIndexOutOfBounds \u003d true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (params.getModuleIndex().isPresent()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 params.getModuleIndex().get().getZeroBased() \u003e\u003d lastShownModuleList.size()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            errorMessage.append(MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            errorMessage.append(\"\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            isIndexOutOfBounds \u003d true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (params.getStudentIndex().isPresent()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 params.getStudentIndex().get().getZeroBased() \u003e\u003d lastShownStudentList.size()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            errorMessage.append(MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            errorMessage.append(\"\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            isIndexOutOfBounds \u003d true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (isIndexOutOfBounds) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new CommandException(errorMessage.toString().trim());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Verify that the lists the current {@code ViewCommand} object is targeting are expandable."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * In other words, the targeted lists should have target-able non-expanded items for expanding."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * If there is already an item in expanded form on the GUI display,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * and the ViewCommandParameters object has an Index that meant for"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * expanding an item on that particular list, this"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * method should throw a exception. Note that as of v1.4, this is as"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * simple as checking whether the lists contain only one item."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * If there are no items on the list to be expanded, this method should also throw an exception."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * This is as simple as checking if the last shown list is of size 0."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param lastShownAppealList appeal list to check for expand-ability"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param lastShownModuleList module list to check for expand-ability"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param lastShownStudentList student list to check for expand-ability"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws CommandException if any of the lists targeted by the ViewCommand object is not expandable."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    protected void verifyAllTargetedListsExpandable(List\u003cAppeal\u003e lastShownAppealList,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                                    List\u003cModule\u003e lastShownModuleList,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                                    List\u003cStudent\u003e lastShownStudentList) throws CommandException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireAllNonNull(lastShownAppealList, lastShownModuleList, lastShownStudentList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StringBuilder errorMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        boolean isNotExpandable \u003d false;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        int appealListSize \u003d lastShownAppealList.size();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        int moduleListSize \u003d lastShownModuleList.size();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        int studentListSize \u003d lastShownStudentList.size();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (params.getAppealIndex().isPresent() \u0026\u0026 (appealListSize \u003d\u003d 0 || appealListSize \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            errorMessage.append((appealListSize \u003d\u003d 0)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    ? MESSAGE_NO_APPEALS_TO_EXPAND"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    : MESSAGE_APPEAL_ALREADY_EXPANDED);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            errorMessage.append(\"\\n\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            isNotExpandable \u003d true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (params.getModuleIndex().isPresent() \u0026\u0026 (moduleListSize \u003d\u003d 0 || moduleListSize \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            errorMessage.append((moduleListSize \u003d\u003d 0)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    ? MESSAGE_NO_MODULES_TO_EXPAND"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    : MESSAGE_MODULE_ALREADY_EXPANDED);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            errorMessage.append(\"\\n\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            isNotExpandable \u003d true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (params.getStudentIndex().isPresent() \u0026\u0026 (studentListSize \u003d\u003d 0 || studentListSize \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            errorMessage.append((studentListSize \u003d\u003d 0)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    ? MESSAGE_NO_STUDENTS_TO_EXPAND"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    : MESSAGE_STUDENT_ALREADY_EXPANDED);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            errorMessage.append(\"\\n\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            isNotExpandable \u003d true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (isNotExpandable) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new CommandException(errorMessage.toString().trim());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(other instanceof ViewCommand)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand v \u003d (ViewCommand) other;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return params.equals(v.params);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Stores the details of the parsed parameters that a {@code ViewCommand} will operate on."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * This helps to avoid having too many unnecessary constructors (or passing of null-values)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * caused by the optional/combinatorial nature of the parameters passed to ViewCommand."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * In future iterations (v1.5 \u0026 above) ViewCommand will accept both indexes and IDs, and this"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * will avoid having too many constructors and null-value handling in ViewCommand, where"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * it might obfuscate functional code."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static class ViewCommandParameters {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        private Index appealIndex;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        private Index moduleIndex;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        private Index studentIndex;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        public void setAppealIndex(Index appealIndex) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            requireNonNull(appealIndex);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.appealIndex \u003d appealIndex;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        public void setModuleIndex(Index moduleIndex) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            requireNonNull(moduleIndex);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.moduleIndex \u003d moduleIndex;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        public void setStudentIndex(Index studentIndex) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            requireNonNull(studentIndex);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        public Optional\u003cIndex\u003e getAppealIndex() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Optional.ofNullable(appealIndex);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        public Optional\u003cIndex\u003e getModuleIndex() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Optional.ofNullable(moduleIndex);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        public Optional\u003cIndex\u003e getStudentIndex() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Optional.ofNullable(studentIndex);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        public boolean isAtLeastOneParameterPresent() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return isAnyNonNull(appealIndex, moduleIndex, studentIndex);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (!(other instanceof ViewCommandParameters)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            ViewCommandParameters vp \u003d (ViewCommandParameters) other;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return getAppealIndex().equals(vp.getAppealIndex())"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u0026\u0026 getModuleIndex().equals(vp.getModuleIndex())"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u0026\u0026 getStudentIndex().equals(vp.getStudentIndex());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 293
    }
  },
  {
    "path": "src/main/java/mams/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/mams/logic/history/CommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.time.TimeStamp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/** Class that stores the history of all user inputs into MAMS */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class CommandHistory implements ReadOnlyCommandHistory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final ObservableList\u003cInputOutput\u003e inputOutputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final ObservableList\u003cInputOutput\u003e unmodifiableInputOutputHistory \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            FXCollections.unmodifiableObservableList(inputOutputHistory);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public CommandHistory() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Initialize from a List of InputOutput objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param inputOutputs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public CommandHistory(List\u003cInputOutput\u003e inputOutputs) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(inputOutputs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.inputOutputHistory.addAll(inputOutputs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Initialize from a {@code ReadonlyCommandHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param commandHistory"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public CommandHistory(ReadOnlyCommandHistory commandHistory) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this(commandHistory.getInputOutputHistory());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Adds the entered input text from the user and the resulting command feedback into a list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void add(String input, String output, boolean wasExecutionSuccessful, TimeStamp timeStamp) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireAllNonNull(input, output, timeStamp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        inputOutputHistory.add(new InputOutput(input, output, wasExecutionSuccessful, timeStamp));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns an unmodifiable view of {@code inputOutputHistory}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cInputOutput\u003e getInputOutputHistory() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return unmodifiableInputOutputHistory;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return inputOutputHistory.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return inputOutputHistory.equals(other.inputOutputHistory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (InputOutput inputOutput : unmodifiableInputOutputHistory) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            sb.append(inputOutput);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 84
    }
  },
  {
    "path": "src/main/java/mams/logic/history/InputOutput.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.time.TimeStamp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class representing the inputs (command entered in {@code CommandBox} and outputs (feedback to user,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * shown in {@code ResultBox}) of a single command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class InputOutput {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final String output;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final boolean isExecutionSuccessful;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final TimeStamp timeStamp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param input the command input of the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param output the feedback given to the user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param wasExecutionSuccessful whether execution of this command succeeded without errors"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param timeStamp time of command execution as a java.util.Date object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public InputOutput(String input, String output, boolean wasExecutionSuccessful, TimeStamp timeStamp) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireAllNonNull(input, output, timeStamp);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.output \u003d output;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.isExecutionSuccessful \u003d wasExecutionSuccessful;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.timeStamp \u003d timeStamp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public TimeStamp getTimeStamp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return timeStamp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String getOutput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String getTimeStampAsString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return timeStamp.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean checkSuccessful() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return isExecutionSuccessful;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return Objects.hash(input, output, isExecutionSuccessful, timeStamp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(obj instanceof InputOutput)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        InputOutput other \u003d (InputOutput) obj;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return getInput().equals(other.getInput())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 getOutput().equals(other.getOutput())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 isExecutionSuccessful \u003d\u003d other.isExecutionSuccessful"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 timeStamp.equals(other.timeStamp);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return timeStamp.toString() + \"\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + ((checkSuccessful())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ? \"SUCCESSFUL\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                : \"UNSUCCESSFUL\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + input + \"\\n\" + output;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 86
    }
  },
  {
    "path": "src/main/java/mams/logic/history/ReadOnlyCommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Unmodifiable view of CommandHistory."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public interface ReadOnlyCommandHistory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns an unmodifiable view of command input and output history."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cInputOutput\u003e getInputOutputHistory();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 14
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/AddModCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.logic.commands.AddModCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.logic.commands.ModCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * Parses input arguments and creates a new AddModCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "public class AddModCommandParser implements Parser\u003cAddModCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * and returns an AddModCommand object for execution. (Only argument checking is done here)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public AddModCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STUDENT, PREFIX_MODULE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        String studentIdentifier;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        String moduleIdentifier;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE).isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    ModCommand.MESSAGE_USAGE_ADD_MOD));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STUDENT).isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new ParseException(ModCommand.MESSAGE_MISSING_MATRICID_OR_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_MODULE).size() \u003e 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new ParseException(ModCommand.MESSAGE_MORE_THAN_ONE_MODULE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_STUDENT).size() \u003e 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    ModCommand.MESSAGE_MORE_THAN_ONE_IDENTIFIER));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        studentIdentifier \u003d argMultimap.getAllValues(PREFIX_STUDENT).get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleIdentifier \u003d argMultimap.getAllValues(PREFIX_MODULE).get(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (containUnknownArguments(studentIdentifier, moduleIdentifier)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    ModCommand.MESSAGE_UNKNOWN_ARGUMENT_ADDMOD));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!isMatricId(studentIdentifier)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            ParserUtil.parseIndex(studentIdentifier);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!isModuleCode(moduleIdentifier)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            ParserUtil.parseIndex(moduleIdentifier);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return new AddModCommand.AddModCommandBuilder(moduleIdentifier,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                studentIdentifier).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private boolean isModuleCode (String moduleIdentifier) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return moduleIdentifier.substring(0, 1).toLowerCase().contains(\"c\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private boolean isMatricId (String studentIdentifier) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return studentIdentifier.substring(0, 1).toLowerCase().contains(\"a\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private boolean containUnknownArguments(String studentIdentifier, String moduleIdentifier) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return (studentIdentifier.contains(\"/\") || moduleIdentifier.contains(\"/\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongliyuan": 78
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/ApproveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_APPEAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_MASS_RESOLVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_REASON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.Approve;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.ApproveCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.MassApprove;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Parses input arguments and creates a new {@code ApproveCommand} object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class ApproveCommandParser implements Parser\u003cApprove\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ApproveCommand}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * and returns a {@code ApproveCommand} object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public Approve parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                PREFIX_APPEAL, PREFIX_REASON, PREFIX_MASS_RESOLVE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (argMultimap.areAllPrefixesAbsent(PREFIX_APPEAL, PREFIX_MASS_RESOLVE)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    ApproveCommand.MESSAGE_USAGE_APPROVE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_APPEAL).isPresent() \u0026\u0026 argMultimap.getValueSize(PREFIX_APPEAL) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            String remark \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                index \u003d ParserUtil.parseIndex((argMultimap.getValue(PREFIX_APPEAL).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        ApproveCommand.MESSAGE_USAGE_APPROVE), ive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            if (argMultimap.getValue(PREFIX_REASON).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                remark \u003d argMultimap.getValue(PREFIX_REASON).orElse(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return new ApproveCommand(index, remark);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_MASS_RESOLVE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            Optional\u003cString\u003e appealLine \u003d argMultimap.getValue(PREFIX_MASS_RESOLVE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            String[] appeals \u003d appealLine.get().split(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            List\u003cString\u003e validIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            List\u003cString\u003e invalidIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            for (String appeal : appeals) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                appeal \u003d appeal.toUpperCase().trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (Appeal.isValidAppealId(appeal)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if (!validIds.contains(appeal)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        validIds.add(appeal);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if (!appeal.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        invalidIds.add(appeal);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return new MassApprove(validIds, invalidIds);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new ParseException(Approve.MESSAGE_USAGE_APPROVE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 78
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public int getValueSize(Prefix prefix) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return getAllValues(prefix).size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if all of the prefixes specified are not present in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean areAllPrefixesAbsent(Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e getValue(prefix).isEmpty());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 10,
      "chensu2436": 4,
      "-": 59
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/ClashCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_APPEAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.logic.commands.ClashCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * Parses input arguments and creates a new ClashCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chensu2436"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "public class ClashCommandParser implements Parser\u003cClashCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public ClashCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_APPEAL, PREFIX_MODULE, PREFIX_STUDENT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        ClashCommand.ClashCommandParameters parameters \u003d new ClashCommand.ClashCommandParameters();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (argMultimap.areAllPrefixesAbsent(PREFIX_APPEAL, PREFIX_MODULE, PREFIX_STUDENT)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                || !hasOnlyOneField(argMultimap)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        verifyNumberOfParameters(argMultimap);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (argMultimap.getValue(PREFIX_APPEAL).isPresent() \u0026\u0026 argMultimap.getValueSize(PREFIX_APPEAL) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                parameters.setAppealIndex(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_APPEAL).get()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (argMultimap.getValue(PREFIX_MODULE).isPresent() \u0026\u0026 argMultimap.getValueSize(PREFIX_MODULE) \u003d\u003d 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                List\u003cString\u003e modules \u003d argMultimap.getAllValues(PREFIX_MODULE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                if (isModuleCode(modules)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    parameters.setModuleCodes(modules.get(0), modules.get(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    parameters.setModuleIndices(ParserUtil.parseIndex(modules.get(0)),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                            ParserUtil.parseIndex(modules.get(1)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (argMultimap.getValue(PREFIX_STUDENT).isPresent() \u0026\u0026 argMultimap.getValueSize(PREFIX_STUDENT) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                parameters.setStudentIndex(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return new ClashCommand(parameters);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * Returns true if PREFIX_MODULE comes with module codes, not indices."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param modules List of inputs after PREFIX_MODULE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @return true if PREFIX_MODULE comes with module codes, not indices"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private boolean isModuleCode(List\u003cString\u003e modules) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return modules.get(0).toLowerCase().contains(\"cs\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * Returns true if only 1 field is present since clash command is only able to clash 1 type of clash cases"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * each time."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param argMultimap an ArgumentMultimap object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @return true if only 1 field is present"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private boolean hasOnlyOneField(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return (argMultimap.getValue(PREFIX_MODULE).isPresent()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_STUDENT).isEmpty()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_APPEAL).isEmpty())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                || (argMultimap.getValue(PREFIX_MODULE).isEmpty()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        \u0026\u0026 argMultimap.getValue(PREFIX_STUDENT).isPresent()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        \u0026\u0026 argMultimap.getValue(PREFIX_APPEAL).isEmpty())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                || (argMultimap.getValue(PREFIX_MODULE).isEmpty()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        \u0026\u0026 argMultimap.getValue(PREFIX_STUDENT).isEmpty()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        \u0026\u0026 argMultimap.getValue(PREFIX_APPEAL).isPresent());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * Checks the number of parameters given by user inputs."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @param argMultimap an ArgumentMultimap object stores value of each prefix."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @throws ParseException when the number of parameters is not correct."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private void verifyNumberOfParameters(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE).isPresent() \u0026\u0026 argMultimap.getValueSize(PREFIX_MODULE) !\u003d 2) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            throw new ParseException(ClashCommand.MESSAGE_NEED_TWO_MODULES);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if ((argMultimap.getValue(PREFIX_APPEAL).isPresent() \u0026\u0026 argMultimap.getValueSize(PREFIX_APPEAL) !\u003d 1)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                || (argMultimap.getValue(PREFIX_STUDENT).isPresent()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                \u0026\u0026 argMultimap.getValueSize(PREFIX_STUDENT) !\u003d 1)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            throw new ParseException(ClashCommand.MESSAGE_ONLY_ONE_ITEM_ALLOWED);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "chensu2436": 101,
      "cheongliyuan": 2
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /* Prefix definitions for Student class */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final Prefix PREFIX_STUDENT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final Prefix PREFIX_CREDITS \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final Prefix PREFIX_PREVMODS \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /* Prefix definitions for Module class */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /*Prefix definitions for Appeal class */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Prefix PREFIX_APPEAL \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final Prefix PREFIX_MASS_RESOLVE \u003d new Prefix(\"mass/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final Prefix PREFIX_REASON \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /* Other misc. prefix definitions. These are used for user clarity: in cases where we only need to check if the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    * prefix is present, without needing to retrieve an associated value, we use these tags. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Prefix OPTION_APPEAL \u003d new Prefix(\"-a\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Prefix OPTION_MODULE \u003d new Prefix(\"-m\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Prefix OPTION_STUDENT \u003d new Prefix(\"-s\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 8,
      "AaronLuk": 4,
      "chensu2436": 2,
      "-": 10,
      "cheongliyuan": 3,
      "MistyRainforest": 2
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_APPEAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.appeal.AppealContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.module.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.student.StudentContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private List\u003cPredicate\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STUDENT, PREFIX_MODULE, PREFIX_APPEAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STUDENT).isPresent() \u0026\u0026 !argMultimap.getValue(PREFIX_STUDENT).get().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            StudentContainsKeywordsPredicate studentPred \u003d new StudentContainsKeywordsPredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    Arrays.asList(argMultimap.getValue(PREFIX_STUDENT).get().split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            predicates.add(studentPred);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE).isPresent() \u0026\u0026 !argMultimap.getValue(PREFIX_MODULE).get().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            ModuleContainsKeywordsPredicate modulePred \u003d new ModuleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    Arrays.asList(argMultimap.getValue(PREFIX_MODULE).get().split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            predicates.add(modulePred);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (argMultimap.getValue(PREFIX_APPEAL).isPresent() \u0026\u0026 !argMultimap.getValue(PREFIX_APPEAL).get().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            AppealContainsKeywordsPredicate appealPred \u003d new AppealContainsKeywordsPredicate("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    Arrays.asList(argMultimap.getValue(PREFIX_APPEAL).get().split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            predicates.add(appealPred);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (!predicates.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return new FindCommand(predicates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 7,
      "chensu2436": 38,
      "-": 24,
      "cheongliyuan": 1
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/HistoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Parses input arguments and creates a new HistoryCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class HistoryCommandParser implements Parser\u003cHistoryCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Prefix PREFIX_HIDE_OUTPUT \u003d new Prefix(\"-h\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HistoryCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * and returns HistoryCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param args {@code String} to be parsed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public HistoryCommand parse(String args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_HIDE_OUTPUT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return new HistoryCommand(argMultimap.getValue(PREFIX_HIDE_OUTPUT).isPresent());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 26
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.OPTION_APPEAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.OPTION_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.OPTION_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ListCommand parse(String args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        boolean showStudents \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        boolean showModules \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        boolean showAppeals \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        boolean showAll;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ArgumentTokenizer.tokenize(args, OPTION_APPEAL, OPTION_MODULE, OPTION_STUDENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // if no prefixes were specified, default to list all items."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll \u003d arePrefixesAbsent(argMultimap, OPTION_APPEAL, OPTION_STUDENT, OPTION_MODULE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (argMultimap.getValue(OPTION_APPEAL).isPresent() || showAll) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            showAppeals \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (argMultimap.getValue(OPTION_MODULE).isPresent() || showAll) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            showModules \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (argMultimap.getValue(OPTION_STUDENT).isPresent() || showAll) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            showStudents \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return new ListCommand(showAppeals, showModules, showStudents);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if all of the prefixes are not present in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static boolean arePrefixesAbsent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isEmpty());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Verifies that the {@code argMultiMap} only has the relevant options, with no other values,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * preambles, or invalid/extra parameters"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 63
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/MamsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.logic.commands.AddModCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.ClashCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.logic.commands.RemoveModCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.ResolveCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.SetCredits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.StoreCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class MamsParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        case ClashCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return new ClashCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        case ResolveCommand.COMMAND_WORD_APPROVE_APPEAL:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return new ApproveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        case ResolveCommand.COMMAND_WORD_REJECT_APPEAL:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return new RejectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case AddModCommand.COMMAND_WORD_ADD_MOD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return new AddModCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case RemoveModCommand.COMMAND_WORD_REMOVE_MOD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return new RemoveModCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        case SetCredits.COMMAND_WORD_SET_CREDITS:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return new SetCreditsParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        case StoreCommand.COMMAND_UNDO:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        case StoreCommand.COMMAND_REDO:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        case SaveCommand.COMMAND_BACKUP:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return new SaveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new HistoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 15,
      "AaronLuk": 11,
      "chensu2436": 3,
      "-": 46,
      "cheongliyuan": 11,
      "MistyRainforest": 16
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.Credits;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.MatricId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.PrevMods;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Parses a {@code String credits} into a {@code Credits}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @throws ParseException if the given {@code credits} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static Credits parseCredits(String credits) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        String trimmedCredits \u003d credits.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (!Credits.isValidCredits(trimmedCredits)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new ParseException(Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return new Credits(trimmedCredits);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Parses a {@code String matricid} into an {@code matricid}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @throws ParseException if the given {@code matricId} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static MatricId parseMatricId(String matricId) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        requireNonNull(matricId);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        String trimmedMatricId \u003d matricId.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (!MatricId.isValidMatricId(trimmedMatricId)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new ParseException(MatricId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return new MatricId(trimmedMatricId);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Parses a {@code String prevMods} into an {@code PrevMods}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @throws ParseException if the given {@code prevMods} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static PrevMods parsePrevMods(String prevMods) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        requireNonNull(prevMods);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        String trimmedPrevMods \u003d prevMods.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (!PrevMods.isValidPrevMods(trimmedPrevMods)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new ParseException(PrevMods.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return new PrevMods(trimmedPrevMods);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 6,
      "-": 91,
      "MistyRainforest": 27
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/RejectCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_APPEAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_MASS_RESOLVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_REASON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.MassReject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.Reject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.commands.RejectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Parses input arguments and creates a new {@code ApproveCommand} object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class RejectCommandParser implements Parser\u003cReject\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ApproveCommand}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * and returns a {@code ApproveCommand} object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public Reject parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                PREFIX_APPEAL, PREFIX_REASON, PREFIX_MASS_RESOLVE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (argMultimap.areAllPrefixesAbsent(PREFIX_APPEAL, PREFIX_MASS_RESOLVE)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    RejectCommand.MESSAGE_USAGE_REJECT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_APPEAL).isPresent() \u0026\u0026 argMultimap.getValueSize(PREFIX_APPEAL) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            String remark \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                index \u003d ParserUtil.parseIndex((argMultimap.getValue(PREFIX_APPEAL).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        RejectCommand.MESSAGE_USAGE_REJECT), ive);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            if (argMultimap.getValue(PREFIX_REASON).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                remark \u003d argMultimap.getValue(PREFIX_REASON).orElse(\"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return new RejectCommand(index, remark);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_MASS_RESOLVE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            Optional\u003cString\u003e appealLine \u003d argMultimap.getValue(PREFIX_MASS_RESOLVE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            String[] appeals \u003d appealLine.get().split(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            List\u003cString\u003e validIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            List\u003cString\u003e invalidIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            for (String appeal : appeals) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                appeal \u003d appeal.toUpperCase().trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (Appeal.isValidAppealId(appeal)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if (!validIds.contains(appeal)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        validIds.add(appeal);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if (!appeal.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        invalidIds.add(appeal);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return new MassReject(validIds, invalidIds);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new ParseException(Reject.MESSAGE_USAGE_REJECT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 77
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/RemoveModCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.logic.commands.ModCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.logic.commands.RemoveModCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * Parses input arguments and creates a new RemoveModCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "public class RemoveModCommandParser implements Parser\u003cRemoveModCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveModCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * and returns an RemoveModCommand object for execution. (Only argument checking is done here)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public RemoveModCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STUDENT, PREFIX_MODULE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        String studentIdentifier;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        String moduleIdentifier;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE).isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new ParseException(ModCommand.MESSAGE_USAGE_REMOVE_MOD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STUDENT).isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new ParseException(ModCommand.MESSAGE_MISSING_MATRICID_OR_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_MODULE).size() \u003e 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new ParseException(ModCommand.MESSAGE_MORE_THAN_ONE_MODULE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_STUDENT).size() \u003e 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new ParseException(ModCommand.MESSAGE_MORE_THAN_ONE_IDENTIFIER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        studentIdentifier \u003d argMultimap.getAllValues(PREFIX_STUDENT).get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleIdentifier \u003d argMultimap.getAllValues(PREFIX_MODULE).get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (containUnknownArguments(studentIdentifier, moduleIdentifier)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new ParseException(ModCommand.MESSAGE_UNKNOWN_ARGUMENT_REMOVEMOD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!isMatricId(studentIdentifier)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            ParserUtil.parseIndex(studentIdentifier);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!isModuleCode(moduleIdentifier)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            ParserUtil.parseIndex(moduleIdentifier);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return new RemoveModCommand.RemoveModCommandBuilder(argMultimap.getAllValues(PREFIX_MODULE).get(0),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                argMultimap.getAllValues(PREFIX_STUDENT).get(0)).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private boolean isModuleCode (String moduleIdentifier) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return moduleIdentifier.substring(0, 1).toLowerCase().contains(\"c\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private boolean isMatricId (String studentIdentifier) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return studentIdentifier.substring(0, 1).toLowerCase().contains(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private boolean containUnknownArguments(String studentIdentifier, String moduleIdentifier) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return (studentIdentifier.contains(\"/\") || moduleIdentifier.contains(\"/\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongliyuan": 75
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/SaveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " * Parses input arguments and creates a new AddModCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public class SaveCommandParser implements Parser\u003cSaveCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetCredits"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * and returns an SetCredits object for execution. (Only argument checking is done here)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public SaveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return new SaveCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_TAG).get().equals(\"undo\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new ParseException((SaveCommand.MESSAGE_USAGE_BACKUP));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_TAG).get().equals(\"redo\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new ParseException(SaveCommand.MESSAGE_USAGE_BACKUP);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        } else if (argMultimap.getValueSize(PREFIX_TAG) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return new SaveCommand(argMultimap.getAllValues(PREFIX_TAG).get(0));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new ParseException(SaveCommand.MESSAGE_USAGE_BACKUP);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MistyRainforest": 39
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/SetCreditsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.SetCredits;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.commands.StudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " * Parses input arguments and creates a new AddModCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public class SetCreditsParser implements Parser\u003cSetCredits\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetCredits"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * and returns an SetCredits object for execution. (Only argument checking is done here)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public SetCredits parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STUDENT, PREFIX_CREDITS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CREDITS).isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new ParseException(StudentCommand.MESSAGE_INVALID_CREDIT_VALUE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        //priority: Matric \u003e Index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STUDENT).isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                return new SetCredits(index, argMultimap.getAllValues(PREFIX_CREDITS).get(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                        SetCredits.MESSAGE_USAGE_SETCREDITS), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        } else if (argMultimap.getValueSize(PREFIX_STUDENT) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            return new SetCredits(argMultimap.getAllValues(PREFIX_STUDENT).get(0),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                    argMultimap.getAllValues(PREFIX_CREDITS).get(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new ParseException(StudentCommand.MESSAGE_USAGE_SETCREDITS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MistyRainforest": 52
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/ViewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_APPEAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_APPEAL, PREFIX_MODULE, PREFIX_STUDENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (argMultimap.areAllPrefixesAbsent(PREFIX_APPEAL, PREFIX_MODULE, PREFIX_STUDENT)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            ViewCommand.ViewCommandParameters parameters \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (argMultimap.getValue(PREFIX_APPEAL).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                parameters.setAppealIndex(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_APPEAL).get()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (argMultimap.getValue(PREFIX_MODULE).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                parameters.setModuleIndex(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_MODULE).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (argMultimap.getValue(PREFIX_STUDENT).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                parameters.setStudentIndex(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            assert parameters.isAtLeastOneParameterPresent() : \"Assertion failed: ViewCommandParameter has no params\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"even after parsing\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new ViewCommand(parameters);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 55
    }
  },
  {
    "path": "src/main/java/mams/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/mams/model/Mams.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.appeal.UniqueAppealList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class Mams implements ReadOnlyMams {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final UniqueAppealList appeals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        appeals \u003d new UniqueAppealList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // todo: add own object to test."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Mams() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Creates an Mams using the Students in the {@code toBeCopied}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Mams(ReadOnlyMams toBeCopied) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Replaces the contents of the appeal list with {@code appeals}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code appeals} must not contain duplicate appeals."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setAppeals(List\u003cAppeal\u003e appeals) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.appeals.setAppeals(appeals);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Resets the existing data of this {@code Mams} with {@code newData}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void resetData(ReadOnlyMams newData) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        setAppeals(newData.getAppealList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    //// student-level operations"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in MAMS."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Adds a student to MAMS."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The student must not already exist in MAMS."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        students.add(p);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code target} must exist in MAMS."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * same as another existing student in MAMS."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Removes {@code key} from {@code Mams}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code key} must exist in MAMS."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    //// module-level operations"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in MAMS."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Adds a module to MAMS."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The module must not already exist in MAMS."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code target} must exist in MAMS."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * The student identity of {@code editedModule} must not be the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * same as another existing module in MAMS."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Removes {@code key} from {@code Mams}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code key} must exist in MAMS."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    //// appeal-level operations"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if an appeal with the same identity as {@code appeal} exists in MAMS."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean hasAppeal(Appeal appeal) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(appeal);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return appeals.contains(appeal);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Adds an appeal to MAMS."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The appeal must not already exist in MAMS."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void addAppeal(Appeal appeal) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        appeals.add(appeal);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Replaces the given Appeal {@code target} in the list with {@code editedAppeal}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code target} must exist in MAMS."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The appeal identity of {@code editedAppeal} must not be the"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * same as another existing appeal in MAMS."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setAppeal(Appeal target, Appeal editedAppeal) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(editedAppeal);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        appeals.setAppeal(target, editedAppeal);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Removes {@code key} from {@code Mams}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code key} must exist in MAMS."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void removeAppeal(Appeal key) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        appeals.remove(key);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" students\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cAppeal\u003e getAppealList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return appeals.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                || (other instanceof Mams // instanceof handles nulls"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 students.equals(((Mams) other).students));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return students.hashCode();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 106,
      "AaronLuk": 1,
      "chensu2436": 1,
      "-": 78,
      "cheongliyuan": 49
    }
  },
  {
    "path": "src/main/java/mams/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Predicate\u003cAppeal\u003e PREDICATE_SHOW_ALL_APPEALS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the user prefs\u0027 MAMS file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Path getMamsFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Sets the user prefs\u0027 MAMS file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void setMamsFilePath(Path mamsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Replaces MAMS data with the data in {@code mams}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void setMams(ReadOnlyMams mams);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Returns the Mams */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    ReadOnlyMams getMams();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in MAMS."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in MAMS."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if an appeal with the same identity as {@code appeal} exists in MAMS."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    boolean hasAppeal(Appeal appeal);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The student must exist in MAMS."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The module must exist in MAMS."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Deletes the given appeal."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The appeal must exist in MAMS."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void deleteAppeal(Appeal target);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code student} must not already exist in MAMS."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code module} must not already exist in MAMS."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Adds the given appeal."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code appeal} must not already exist in MAMS."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void addAppeal(Appeal appeal);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code target} must exist in MAMS."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The student identity of {@code editedStudent} must not be"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * the same as another existing student in MAMS."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code target} must exist in MAMS."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * The module identity of {@code editedModule} must not be"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * the same as another existing module in MAMS."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Replaces the given appeal {@code target} with {@code editedAppeal}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code target} must exist in MAMS."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The appeal identity of {@code editedAppeal} must not be"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * the same as another existing appeal in MAMS."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void setAppeal(Appeal target, Appeal editedAppeal);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Returns an unmodifiable view of the filtered appeal list */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    ObservableList\u003cAppeal\u003e getFilteredAppealList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Returns an unmodifiable view of the full appeal list in MAMS */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    ObservableList\u003cAppeal\u003e getFullAppealList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Returns an unmodifiable view of the full module list in MAMS */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    ObservableList\u003cModule\u003e getFullModuleList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Returns an unmodifiable view of the full student list in MAMS */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    ObservableList\u003cStudent\u003e getFullStudentList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns an {@code Optional} containing the appeal in MAMS matching the given id."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * If no appeal in MAMS matches the given id, then this returns Optional.empty()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Note: the search is performed on the global list, not the filtered list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param id Appeal id to be queried against"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return Optional.of(Appeal) if found, else Optional.empty()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Optional\u003cAppeal\u003e getAppealEqualsToId(String id);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns an {@code Optional} containing the module in MAMS matching the given id."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * If no module in MAMS matches the given id, then this returns Optional.empty()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Note: the search is performed on the global list, not the filtered list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param id module id to be queried against"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return Optional.of(Module) if found, else Optional.empty()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Optional\u003cModule\u003e getModuleEqualsToId(String id);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Updates the filter of the filtered appeal list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void updateFilteredAppealList(Predicate\u003cAppeal\u003e predicate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Replace mams with target mams"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    void replaceMams(ReadOnlyMams mams);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 100,
      "-": 59,
      "cheongliyuan": 34,
      "MistyRainforest": 6
    }
  },
  {
    "path": "src/main/java/mams/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Represents the in-memory model of the MAMS data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final Mams mams;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final FilteredList\u003cAppeal\u003e filteredAppeals;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Initializes a ModelManager with the given MAMS and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ModelManager(ReadOnlyMams mams, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CollectionUtil.requireAllNonNull(mams, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        logger.fine(\"Initializing with MAMS: \" + mams + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.mams \u003d new Mams(mams);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(this.mams.getStudentList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(this.mams.getModuleList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        filteredAppeals \u003d new FilteredList\u003c\u003e(this.mams.getAppealList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this(new Mams(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Path getMamsFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return userPrefs.getMamsFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setMamsFilePath(Path mamsFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(mamsFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        userPrefs.setMamsFilePath(mamsFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Mams \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setMams(ReadOnlyMams mams) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.mams.resetData(mams);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ReadOnlyMams getMams() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return mams;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return mams.hasStudent(student);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in MAMS."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return mams.hasModule(module);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if an appeal with the same identity as {@code appeal} exists in MAMS."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param appeal"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean hasAppeal(Appeal appeal) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(appeal);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return mams.hasAppeal(appeal);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        mams.removeStudent(target);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        mams.removeModule(target);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void deleteAppeal(Appeal target) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        mams.removeAppeal(target);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        mams.addStudent(student);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        mams.addModule(module);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void addAppeal(Appeal appeal) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        mams.addAppeal(appeal);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        updateFilteredAppealList(PREDICATE_SHOW_ALL_APPEALS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        mams.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        mams.setModule(target, editedModule);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setAppeal(Appeal target, Appeal editedAppeal) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedAppeal);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        mams.setAppeal(target, editedAppeal);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code versionedMams}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return filteredStudents;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cAppeal\u003e getFilteredAppealList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return filteredAppeals;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void updateFilteredAppealList(Predicate\u003cAppeal\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        filteredAppeals.setPredicate(predicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Full List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Returns an unmodifiable view of the full appeal list in MAMS */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cAppeal\u003e getFullAppealList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return mams.getAppealList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Returns an unmodifiable view of the full module list in MAMS */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cModule\u003e getFullModuleList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return mams.getModuleList();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Returns an unmodifiable view of the full student list in MAMS */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFullStudentList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return mams.getStudentList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Individual Items Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Optional\u003cAppeal\u003e getAppealEqualsToId(String id) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        List\u003cAppeal\u003e resultList \u003d getFullAppealList().stream()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .filter(a -\u003e a.getAppealId().equalsIgnoreCase(id))"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert resultList.size() \u003c 2 : \"Assertion Error: Appeal List in MAMS has duplicate IDs\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return (resultList.isEmpty())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ? Optional.empty()"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                : Optional.of(resultList.get(0));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Optional\u003cModule\u003e getModuleEqualsToId(String id) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        List\u003cModule\u003e resultList \u003d getFullModuleList().stream()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .filter(m -\u003e m.getModuleCode().equalsIgnoreCase(id))"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert resultList.size() \u003c 2 : \"Assertion Error: Module List in MAMS has duplicate IDs\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return (resultList.isEmpty())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ? Optional.empty()"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                : Optional.of(resultList.get(0));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void replaceMams(ReadOnlyMams mams) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.mams.setAppeals(mams.getAppealList());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.mams.setModules(mams.getModuleList());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.mams.setStudents(mams.getStudentList());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return mams.equals(other.mams)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 filteredAppeals.equals(other.filteredAppeals)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 filteredModules.equals(other.filteredModules)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 134,
      "-": 105,
      "cheongliyuan": 43,
      "MistyRainforest": 7
    }
  },
  {
    "path": "src/main/java/mams/model/ReadOnlyMams.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Unmodifiable view of MAMS"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public interface ReadOnlyMams {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns an unmodifiable view of the module list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns an unmodifiable view of the appeal list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    ObservableList\u003cAppeal\u003e getAppealList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 10,
      "AaronLuk": 2,
      "-": 10,
      "cheongliyuan": 8
    }
  },
  {
    "path": "src/main/java/mams/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Path getMamsFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Path getCommandHistoryFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 5,
      "-": 13
    }
  },
  {
    "path": "src/main/java/mams/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Path mamsFilePath \u003d Paths.get(\"data\" , \"mams.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Path commandHistoryFilePath \u003d Paths.get(\"data\", \"commandHistory.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        setMamsFilePath(newUserPrefs.getMamsFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        setCommandHistoryFilePath(newUserPrefs.getCommandHistoryFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Path getMamsFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return mamsFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setMamsFilePath(Path mamsFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(mamsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.mamsFilePath \u003d mamsFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Path getCommandHistoryFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return commandHistoryFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setCommandHistoryFilePath(Path commandHistoryFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(commandHistoryFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistoryFilePath \u003d commandHistoryFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 mamsFilePath.equals(o.mamsFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 commandHistoryFilePath.equals(o.commandHistoryFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return Objects.hash(guiSettings, mamsFilePath, commandHistoryFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + mamsFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        sb.append(\"\\nLocal command history file location : \" + commandHistoryFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 25,
      "-": 75
    }
  },
  {
    "path": "src/main/java/mams/model/appeal/Appeal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.model.appeal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Represents an appeal in appeal list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class Appeal {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_APPEAL_ID \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"Appeals should start with \u0027C\u0027 followed by a 6 digit number\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_APPEAL_TYPE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"Appeal type should be either add module, drop module or increase workload\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * \"C\" followed by strictly 6 digits."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String VALIDATION_REGEX_APPEAL_CODE \u003d \"C\\\\d{6}$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * \"AY\" followed by strictly 4 digits"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String VALIDATION_REGEX_ACADEMIC_YEAR \u003d \"AY\\\\d{4}\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * \"AY\" followed by 4 digit year"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_ACADEMICYEAR \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"Academic year should start with AY\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String appealId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String appealType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String studentId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String academicYear;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final int studentWorkload;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String appealDescription;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String previousModule;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String newModule;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String moduleToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String moduleToDrop;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final boolean resolved;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String result;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private boolean isModified;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructor for Appeal object when it is loaded from file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param appealId"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param appealType"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param studentId"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param academicYear"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param studentWorkload"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param appealDescription"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param previousModule"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param newModule"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param moduleToAdd"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param moduleToDrop"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param resolved"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param remark"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public Appeal(String appealId,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String appealType,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String studentId,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String academicYear,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  int studentWorkload,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String appealDescription,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String previousModule,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String newModule,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String moduleToAdd,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String moduleToDrop,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  boolean resolved,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String remark) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        CollectionUtil.requireAllNonNull(appealId, appealType, studentId, academicYear,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                appealDescription);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.appealId \u003d appealId;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.appealType \u003d appealType;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.studentWorkload \u003d studentWorkload;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.appealDescription \u003d appealDescription;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.previousModule \u003d previousModule;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.newModule \u003d newModule;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.moduleToAdd \u003d moduleToAdd;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.moduleToDrop \u003d moduleToDrop;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.resolved \u003d resolved;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.result \u003d \"Pending\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.isModified \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        // to check if this is an already resolved appeal,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        // since we are working with immutability."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //  Only appeals that are not modified will be shown/added to file"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     *  Constructor when an existing appeal is resolved"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param appealId"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param appealType"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param studentId"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param academicYear"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param studentWorkload"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param appealDescription"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param previousModule"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param newModule"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param moduleToAdd"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param moduleToDrop"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param resolved"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param remark"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public Appeal(String appealId,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String appealType,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String studentId,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String academicYear,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  int studentWorkload,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String appealDescription,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String previousModule,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String newModule,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String moduleToAdd,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String moduleToDrop,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  boolean resolved,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String result,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                  String remark) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        CollectionUtil.requireAllNonNull(appealId, appealType, studentId, academicYear,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                 appealDescription);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.appealId \u003d appealId;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.appealType \u003d appealType;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.studentWorkload \u003d studentWorkload;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.appealDescription \u003d appealDescription;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.previousModule \u003d previousModule;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.newModule \u003d newModule;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.moduleToAdd \u003d moduleToAdd;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.moduleToDrop \u003d moduleToDrop;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.resolved \u003d resolved;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.isModified \u003d false; // to check if this is an already resolved appeal,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        // since we are working with immutability."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //  Only appeals that are not modified will be shown/added to file"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getAppealId() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return appealId;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getAppealType() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return appealType;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getStudentId() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return studentId;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getAcademicYear() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return academicYear;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public int getStudentWorkload() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return studentWorkload;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getAppealDescription() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return appealDescription;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getPreviousModule() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return previousModule;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getNewModule() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return newModule;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String getModuleToAdd() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return moduleToAdd;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String getModuleToDrop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return moduleToDrop;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public ArrayList\u003cString\u003e getModulesToChange() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ArrayList\u003cString\u003e modulesAffected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!previousModule.isEmpty() || !newModule.isEmpty()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            modulesAffected.add(previousModule);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            modulesAffected.add(newModule);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else if (!moduleToAdd.isEmpty()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            modulesAffected.add(moduleToDrop);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else if (!moduleToAdd.isEmpty()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            modulesAffected.add(moduleToAdd);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return modulesAffected;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public boolean isResolved() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return resolved;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        if (isResolved()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return \"resolved\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            return \"unresolved\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getResult() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getRemark() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Returns true if both appeals of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * This defines a weaker notion of equality between two appeals."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public boolean isSameAppeal(Appeal otherAppeal) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (otherAppeal \u003d\u003d this) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return otherAppeal !\u003d null"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                \u0026\u0026 otherAppeal.getAppealId().equals(getAppealId())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                \u0026\u0026 otherAppeal.getResult().equals(getResult())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                \u0026\u0026 (otherAppeal.getAppealType().equals(getAppealType())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                || otherAppeal.getAppealDescription().equals(getAppealDescription()));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Returns true if both appeals of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * This defines a weaker notion of equality between two appeals."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!(other instanceof Appeal)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Appeal otherAppeal \u003d (Appeal) other;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return otherAppeal.getAppealId().equals(getAppealId())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                \u0026\u0026 otherAppeal.getAppealType().equals(getAppealType())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                \u0026\u0026 otherAppeal.getStudentId().equals(getStudentId())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                \u0026\u0026 otherAppeal.getAppealDescription().equals(getAppealDescription())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                \u0026\u0026 (otherAppeal.getStudentWorkload() \u003d\u003d getStudentWorkload());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return Objects.hash(appealId, appealType, studentId, studentWorkload, appealDescription);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        builder.append(getAppealId())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(\" Appeal type: \")"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(getAppealType())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(\" Student ID: \")"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(getStudentId())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(\" Academic year: \")"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(getAcademicYear())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(\" Student workload: \")"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(getStudentWorkload())"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(\" Previous module: \")"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(getPreviousModule())"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(\" New module: \")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(getNewModule())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(\" Module to add: \")"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .append(getModuleToAdd())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(\" Module to drop \")"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .append(getModuleToDrop())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(\" Resolved?:\")"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(isResolved())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(\" Result: \")"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(getResult())"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(\" Remarks: \")"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                .append(getRemark());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void setModified() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        isModified \u003d true;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Resolves an appeal"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param action"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param remark"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @returns a new appeal with same identities"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public Appeal resolve(String action, String remark) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Appeal appeal;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (action.equalsIgnoreCase(\"approve\")) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            this.setModified();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            appeal \u003d new Appeal(this.appealId, this.appealType, this.studentId, this.academicYear,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    this.studentWorkload, this.appealDescription, this.previousModule, this.newModule,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    this.moduleToAdd, this.moduleToDrop, true, \"approved\", remark);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            this.setModified();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            appeal \u003d new Appeal(this.appealId, this.appealType, this.studentId, this.academicYear,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    this.studentWorkload, this.appealDescription, this.previousModule, this.newModule,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    this.moduleToAdd, this.moduleToDrop, false, \"rejected\", remark);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return appeal;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Returns true if a given string is a valid appeal Id."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static boolean isValidAppealId(String test) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return test.matches(VALIDATION_REGEX_APPEAL_CODE);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Returns true if given string is of correct type"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static boolean isValidAppealType(String test) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return test.equalsIgnoreCase(\"increase workload\")"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                || test.equalsIgnoreCase(\"add module\")"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                || test.equalsIgnoreCase(\"drop module\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static boolean isValidAcademicYear(String test) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return test.matches(VALIDATION_REGEX_ACADEMIC_YEAR);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 4,
      "AaronLuk": 328,
      "chensu2436": 8
    }
  },
  {
    "path": "src/main/java/mams/model/appeal/AppealContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "package mams.model.appeal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chensu2436"
        },
        "content": " * Tests that a {@code Module}\u0027s {@code code} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chensu2436"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "public class AppealContainsKeywordsPredicate implements Predicate\u003cAppeal\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public AppealContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return keywords.isEmpty();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return keywords.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public boolean test(Appeal appeal) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(appeal.getAppealType(), keyword)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(appeal.getModuleToAdd(), keyword)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(appeal.getStatus(), keyword)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(appeal.getAppealId(), keyword));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                || (other instanceof AppealContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                \u0026\u0026 keywords.equals(((AppealContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "chensu2436": 41
    }
  },
  {
    "path": "src/main/java/mams/model/appeal/UniqueAppealList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.model.appeal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.exceptions.AppealNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.exceptions.DuplicateAppealException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * A list of appeals that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * A appeal is considered unique by comparing using {@code Appeal#isSameAppeal(Appeal)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * As such, adding and updating of appeals uses Appeal#isSameAppeal(Appeal)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * for equality so as to ensure that the appeal being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * unique in terms of identity in the UniqueAppealList. However,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * the removal of a appeal uses Appeal#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * as to ensure that the student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * @see Appeal#isSameAppeal(Appeal)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class UniqueAppealList implements Iterable\u003cAppeal\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final ObservableList\u003cAppeal\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final ObservableList\u003cAppeal\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * returns true if this list contains an equivalent appeal as argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param toCheck"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public boolean contains(Appeal toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAppeal);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Adds appeal to list, appeal must not already be in list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void add(Appeal toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new DuplicateAppealException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedAppeal}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * The appeal identity of {@code editedAppeal} must not be the same as another existing appeal in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param editedAppeal"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void setAppeal(Appeal target, Appeal editedAppeal) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedAppeal);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new AppealNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        internalList.set(index, editedAppeal);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Replaces the contents of this list with {@code appeals}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code appeals} must not contain duplicate students."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setAppeals(List\u003cAppeal\u003e appeals) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CollectionUtil.requireAllNonNull(appeals);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!appealsAreUnique(appeals)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DuplicateAppealException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        internalList.setAll(appeals);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Replaces the contents of this list with {@code appeals}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * {@code appeals} must not contain duplicate appeals."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setAppeals(UniqueAppealList replacement) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Removes the equivalent appeal from the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * The appeal must exist in the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void remove(Appeal toRemove) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new AppealNotFoundException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cAppeal\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public Iterator\u003cAppeal\u003e iterator() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                || (other instanceof UniqueAppealList \u0026\u0026 internalList.equals(((UniqueAppealList) other).internalList));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Returns true if {@code appeals} contains only unique appeals."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private boolean appealsAreUnique(List\u003cAppeal\u003e appeals) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        for (int i \u003d 0; i \u003c appeals.size() - 1; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            for (int j \u003d i + 1; j \u003c appeals.size(); j++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (appeals.get(i).isSameAppeal(appeals.get(j))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 15,
      "AaronLuk": 129
    }
  },
  {
    "path": "src/main/java/mams/model/appeal/exceptions/AppealNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.model.appeal.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Signals that the operation is unable to find the specified appeal."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class AppealNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 7
    }
  },
  {
    "path": "src/main/java/mams/model/appeal/exceptions/DuplicateAppealException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.model.appeal.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Signals that the operation will result in duplicate Appeals (Appeals are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class DuplicateAppealException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public DuplicateAppealException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        super(\"Operation would result in duplicate appeal\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 11
    }
  },
  {
    "path": "src/main/java/mams/model/module/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * Represents a Module in MAMS."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_MODULE_CODE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            \"Modules should start with \u0027CS\u0027 followed by a 4 digit number\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_MODULE_NAME \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            \"Module Names should only contain alphanumeric \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    + \"characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_MODULE_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            \"Module Description should only contain alphanumeric \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    + \"characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_LECTURER_NAME \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            \"Lecturer Name should only contain alphanumeric \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    + \"characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_TIME_SLOT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            \"Time slots can only range from 1 to 69, and must be in \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    + \"ascending order\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_QUOTA \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            \"Quota must be more than 0\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_QUOTA_REACHED \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            \"Module has reached max quota, unable to accept any more students. \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Only CS modules are allowed for adding. The first 2 characters should be"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * \"CS\" followed by strictly 4 digits."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String VALIDATION_REGEX_MODULE_CODE \u003d \"CS\\\\d{4}$\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * The first character of the module name must not be a whitespace,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String VALIDATION_REGEX_MODULE_NAME \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * The first character of the module name must not be a whitespace,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String VALIDATION_REGEX_MODULE_DESCRIPTION \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Lecturer name has the same requirements as module name."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String VALIDATION_REGEX_LECTURER_NAME \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String moduleDescription;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String lecturerName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String timeSlot;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String quota;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final Set\u003cTag\u003e students \u003d new HashSet\u003c\u003e(); // to be added"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public Module(String moduleCode, String moduleName, String moduleDescription,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                  String lecturerName, String timeSlot, String quota,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                  Set\u003cTag\u003e students) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        CollectionUtil.requireAllNonNull(moduleCode, moduleName, timeSlot, students);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.moduleDescription \u003d moduleDescription;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.lecturerName \u003d lecturerName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.quota \u003d quota;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return test.matches(VALIDATION_REGEX_MODULE_CODE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns true if a given string is a valid module name."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static boolean isValidModuleName(String test) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return test.matches(VALIDATION_REGEX_MODULE_NAME);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns true if a given string is a valid module description."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static boolean isValidModuleDescription(String test) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return test.matches(VALIDATION_REGEX_MODULE_DESCRIPTION);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns true if a given string is a valid module description."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static boolean isValidLecturerName(String test) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return test.matches(VALIDATION_REGEX_LECTURER_NAME);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns if a given quota is valid. Quota must be more than zero."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static boolean isValidQuota(String test) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        int result \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (result \u003e 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns true if a given time slot is valid"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param test time slots to be tested"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @return result of test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static boolean isValidTimeSlot(String test) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final int firstTimeSlot \u003d 0;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final int lastTimeSlot \u003d 69;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (test \u003d\u003d null || test.isEmpty()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        String []arr \u003d test.split(\",\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        for (String str : arr) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            int temp \u003d Integer.parseInt(str);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (temp \u003e lastTimeSlot || temp \u003c firstTimeSlot || temp \u003d\u003d 14"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                || temp \u003d\u003d 28 || temp \u003d\u003d 42 || temp \u003d\u003d 56) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public String getModuleDescription() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return moduleDescription;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public String getLecturerName() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return lecturerName;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public String getTimeSlot() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return timeSlot;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public String getQuota() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return quota;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * All modules workload is 4 MC for now."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public String getModuleWorkload() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return \"4\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public int getQuotaInt() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return Integer.parseInt(quota);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public int getCurrentEnrolment() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return students.size();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public int[] getTimeSlotToIntArray() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        String []arr \u003d timeSlot.split(\",\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        int[] slots \u003d new int[arr.length];"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        int x \u003d 0;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        for (String str : arr) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            slots[x] \u003d Integer.parseInt(str);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            x++;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Arrays.sort(slots);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return slots;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public Set\u003cTag\u003e getStudents() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return Collections.unmodifiableSet(students);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns true if both module of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return otherModule.getModuleCode().equals(getModuleCode());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return Objects.hash(moduleCode);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        builder.append(getModuleCode())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .append(\" Module Name: \")"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .append(getModuleName())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .append(\" Module Description: \")"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .append(getModuleDescription())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .append(\" Lecturer Name: \")"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .append(getLecturerName())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .append(\" TimeSlots: \")"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                .append(getModuleTimeTableToString())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .append(\" Quota: \")"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .append(quotaToString())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .append(\" Students: \");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        getStudents().forEach(builder::append);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns the string indicating which time slot this module occupies."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @return Day and TimeSlots of this module"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public String getModuleTimeTableToString() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        int[] slots \u003d getTimeSlotToIntArray();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return timeSlotsToString(slots);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * Returns the string indicating of time slots."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @return Day and TimeSlots of the given int array."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public String timeSlotsToString(int[] slots) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        int startTimeSlot \u003d 0;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert(slots.length !\u003d 0);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        int test;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        for (int i \u003d 0; i \u003c slots.length; i++) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            test \u003d slots[i];"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            if (((startTimeSlot \u003d\u003d 0) \u0026\u0026 (i !\u003d slots.length - 1) \u0026\u0026 (slots[i] \u003c slots[i + 1] - 1))"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                    || ((i \u003d\u003d slots.length - 1) \u0026\u0026 (startTimeSlot \u003d\u003d 0))) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                //print for 1hour time slot OR print 1hr time slot(last time in array)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                builder.append(getDay(slots[i]))"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                        .append(\" \")"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        .append(getTime(slots[i]))"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                        .append(\" to \")"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        .append(getTime(slots[i] + 1)); //Ends at next hour"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                // addition of separating comma"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                if (i !\u003d slots.length - 1) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    builder.append(\", \");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                startTimeSlot \u003d 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            } else if (startTimeSlot \u003d\u003d 0 \u0026\u0026 (i !\u003d slots.length - 1)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                //first hour of 2/3hr sessions."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                startTimeSlot \u003d slots[i];"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "            } else if ((i \u003d\u003d slots.length - 1) || (slots[i] \u003c slots[i + 1] - 1)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                //print time slot 2nd hour of 2hr session/3rd hour of 3 hours session."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                builder.append(getDay(slots[i]))"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                        .append(\" \")"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                        .append(getTime(startTimeSlot))"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                        .append(\" to \")"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        .append(getTime(slots[i] + 1)); //Ends at next hour"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                // addition of separating comma"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                if (i !\u003d slots.length - 1) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    builder.append(\", \");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                startTimeSlot \u003d 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns the day of the time slot. Only weekdays are possible days for modules."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param timeSlot integer value that identifies which timeslot of the week the module"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     *                 occupies. Range: (1-69)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @return String indicating which day the module falls on"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    String getDay(int timeSlot) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final int timeSlotsPerDay \u003d 14;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        int day \u003d timeSlot / timeSlotsPerDay;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"Monday\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"Tuesday\";"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"Wednesday\";"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"Thursday\";"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"Friday\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"Invalid day\";"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns the time with respect to the timeslot. All days of the week have 13 possible time slots."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Note: The 14th time slot (21:00) is only valid as a end time, and is not a valid time slot."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @param timeSlot integer value that identifies which timeslot of the week the module"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     *                 occupies. Range: (1-69)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @return String of the time of which the modules falls on"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    String getTime(int timeSlot) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final int numberOfTimeSlots \u003d 14;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        int actualTime \u003d timeSlot % numberOfTimeSlots;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        switch (actualTime) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"08:00\";"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"09:00\";"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"10:00\";"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"11:00\";"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"12:00\";"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"13:00\";"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"14:00\";"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"15:00\";"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 9:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"16:00\";"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 10:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"17:00\";"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 11:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"18:00\";"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 12:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"19:00\";"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 13:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"20:00\";"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"21:00\";"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            return \"Invalid time\";"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns the current number of students and max quota."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @return String of quota figures"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public String quotaToString() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        builder.append(getCurrentEnrolment())"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .append(\"/\")"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .append(getQuotaInt());"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 18,
      "chensu2436": 31,
      "cheongliyuan": 367
    }
  },
  {
    "path": "src/main/java/mams/model/module/ModuleContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "package mams.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chensu2436"
        },
        "content": " * Tests that a {@code Module}\u0027s {@code code} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chensu2436"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "public class ModuleContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public ModuleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return keywords.isEmpty();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return keywords.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(module.getModuleCode(), keyword)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(module.getModuleName(), keyword)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(module.getModuleDescription(), keyword));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                || (other instanceof ModuleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                \u0026\u0026 keywords.equals(((ModuleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chensu2436": 41
    }
  },
  {
    "path": "src/main/java/mams/model/module/UniqueModuleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * As such, adding of modules uses Module#isSameModule(Module)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * for equality so as to ensure that the module being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * unique in terms of identity in the UniqueModuleList. Removal or editing of modules"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * is not supported."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!target.isSameModule(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        CollectionUtil.requireAllNonNull(modules);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 5,
      "cheongliyuan": 134
    }
  },
  {
    "path": "src/main/java/mams/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * Signals that the operation will result in duplicate Modules (Modules are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongliyuan": 11
    }
  },
  {
    "path": "src/main/java/mams/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "cheongliyuan": 6
    }
  },
  {
    "path": "src/main/java/mams/model/student/Credits.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "package mams.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Represents a Student\u0027s credits number in MAMS."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCredits(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public class Credits {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            \"Credits numbers should only contain numbers, and it should be at least 2 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public final int intValue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Constructs a {@code Credits}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @param credits A valid credits number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public Credits(String credits) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        AppUtil.checkArgument(isValidCredits(credits), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        value \u003d credits;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        intValue \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Returns true if a given string is a valid credits number."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static boolean isValidCredits(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public int getIntVal() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return this.intValue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                || (other instanceof Credits // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                \u0026\u0026 value.equals(((Credits) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "AaronLuk": 1,
      "MistyRainforest": 59
    }
  },
  {
    "path": "src/main/java/mams/model/student/MatricId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Represents a Student\u0027s MatricId in MAMS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatricId(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public class MatricId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * The first character of the MatricId must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Constructs an {@code MatricId}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @param matricId A valid MatricId."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public MatricId(String matricId) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        requireNonNull(matricId);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        checkArgument(isValidMatricId(matricId), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        value \u003d matricId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Returns true if a given string is a valid prevMods."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static boolean isValidMatricId(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                || (other instanceof MatricId // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                \u0026\u0026 value.equals(((MatricId) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 3,
      "-": 41,
      "MistyRainforest": 13
    }
  },
  {
    "path": "src/main/java/mams/model/student/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Represents a Student\u0027s name in MAMS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * The first character of the Name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 4,
      "-": 54,
      "MistyRainforest": 1
    }
  },
  {
    "path": "src/main/java/mams/model/student/PrevMods.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "package mams.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Represents a Student\u0027s prevMods in MAMS."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrevMods(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public class PrevMods {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"PrevMods should be comma separated module codes \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([\\\\p{Alnum}\u0026\\\\s]+,)+[\\\\p{Alnum}\u0026\\\\s]+$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String VALIDATION_REGEX_SINGLE \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Constructs an {@code PrevMods}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * @param prevMods A valid prevMods address."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public PrevMods(String prevMods) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        requireNonNull(prevMods);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        AppUtil.checkArgument(isValidPrevMods(prevMods), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        value \u003d prevMods;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Returns if a given string is a valid prevMods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static boolean isValidPrevMods(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return (test.matches(VALIDATION_REGEX) || test.matches(VALIDATION_REGEX_SINGLE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                || (other instanceof PrevMods // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                \u0026\u0026 value.equals(((PrevMods) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "cheongliyuan": 1,
      "MistyRainforest": 52
    }
  },
  {
    "path": "src/main/java/mams/model/student/Student.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Represents a Student in MAMS"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private final Credits credits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private final PrevMods prevMods;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private final MatricId matricId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public Student(Name name, Credits credits, PrevMods prevMods, MatricId matricId, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, credits, prevMods, matricId, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.prevMods \u003d prevMods;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.matricId \u003d matricId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public Credits getCredits() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public PrevMods getPrevMods() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return prevMods;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public MatricId getMatricId() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return matricId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public Set\u003cTag\u003e getCurrentModules() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Set\u003cTag\u003e ret \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            if (tag.type.equals(\"module\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                ret.add(tag);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return Collections.unmodifiableSet(ret);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public int getNumberOfMods() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            if (tag.type.equals(\"module\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public Set\u003cTag\u003e getCurrentAppeals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Set\u003cTag\u003e ret \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            if (tag.type.equals(\"appeal\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                ret.add(tag);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return Collections.unmodifiableSet(ret);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if both students of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                \u0026\u0026 (otherStudent.getCredits().equals(getCredits()) || otherStudent.getPrevMods().equals(getPrevMods()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                \u0026\u0026 otherStudent.getCredits().equals(getCredits())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                \u0026\u0026 otherStudent.getPrevMods().equals(getPrevMods())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                \u0026\u0026 otherStudent.getMatricId().equals(getMatricId())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return Objects.hash(name, credits, prevMods, matricId, tags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                .append(\" Credits: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                .append(getCredits())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                .append(\" PrevMods: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                .append(getPrevMods())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                .append(\" Matric Id: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                .append(getMatricId())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 17,
      "-": 75,
      "MistyRainforest": 55
    }
  },
  {
    "path": "src/main/java/mams/model/student/StudentContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "public class StudentContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public StudentContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return keywords.get(0).trim().isEmpty();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return keywords.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(student.getMatricId().value, keyword));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                || (other instanceof StudentContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                \u0026\u0026 keywords.equals(((StudentContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 4,
      "chensu2436": 14,
      "-": 21
    }
  },
  {
    "path": "src/main/java/mams/model/student/UniqueStudentList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * As such, adding and updating of students uses Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * for equality so as to ensure that the student being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * unique in terms of identity in the UniqueStudentList. However,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * the removal of a student uses Student#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * as to ensure that the student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CollectionUtil.requireAllNonNull(students);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 139
    }
  },
  {
    "path": "src/main/java/mams/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(\"Operation would result in duplicate students\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 11
    }
  },
  {
    "path": "src/main/java/mams/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 6
    }
  },
  {
    "path": "src/main/java/mams/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Represents a Tag in MAMS."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public final String type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (Appeal.isValidAppealId(tagName)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            this.type \u003d \"appeal\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            this.type \u003d \"module\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * Returns the tag name."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     * @return string of tag name."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 5,
      "chensu2436": 8,
      "-": 50,
      "MistyRainforest": 7
    }
  },
  {
    "path": "src/main/java/mams/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Mams;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyMams;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.Credits;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.MatricId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.PrevMods;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Contains utility methods for populating {@code Mams} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return new Student[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            new Student(new Name(\"Alex Yeoh\"), new Credits(\"20\"), new PrevMods(\"CS1010, CS2101\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                new MatricId(\"A0180000R\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            new Student(new Name(\"Bernice Yu\"), new Credits(\"20\"), new PrevMods(\"CS1010, CS2105\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                new MatricId(\"A01455353y\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            new Student(new Name(\"Charlotte Oliveiro\"), new Credits(\"20\"), new PrevMods(\"CS1010, CS2105\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                new MatricId(\"A0199239U\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            new Student(new Name(\"David Li\"), new Credits(\"20\"), new PrevMods(\"CS1010, CS1231, CS2030\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                new MatricId(\"A01423223T\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            new Student(new Name(\"Irfan Ibrahim\"), new Credits(\"20\"), new PrevMods(\"CS1010, CS1231, CS2030\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                new MatricId(\"A12039123S\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            new Student(new Name(\"Roy Balakrishnan\"), new Credits(\"20\"), new PrevMods(\"CS1010, CS1231, CS2309\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                new MatricId(\"A015923848U\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static ReadOnlyMams getSampleMams() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Mams sampleMams \u003d new Mams();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            sampleMams.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return sampleMams;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 18,
      "-": 31,
      "MistyRainforest": 12
    }
  },
  {
    "path": "src/main/java/mams/storage/CommandHistoryStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.ReadOnlyCommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Represents a storage for {@link mams.logic.history.CommandHistory}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public interface CommandHistoryStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Path getCommandHistoryFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns CommandHistory data as a {@link ReadOnlyCommandHistory}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Optional\u003cReadOnlyCommandHistory\u003e readCommandHistory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @see #getCommandHistoryFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Optional\u003cReadOnlyCommandHistory\u003e readCommandHistory(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Saves the given {@link ReadOnlyCommandHistory} to storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param commandHistory cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void saveCommandHistory(ReadOnlyCommandHistory commandHistory) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @see #saveCommandHistory(ReadOnlyCommandHistory)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void saveCommandHistory(ReadOnlyCommandHistory commandHistory, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 43
    }
  },
  {
    "path": "src/main/java/mams/storage/JsonAdaptedAppeal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.student.MatricId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Jackson friendly version of {@link Appeal}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class JsonAdaptedAppeal {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appeal\u0027s %s is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String appealId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String appealType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String studentId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String academicYear;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final int studentWorkload;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String appealDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String previousModule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String newModule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String moduleToAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String moduleToDrop;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final boolean resolved;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String result;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructs a {@code JsonAdaptedAppeal} with the given student details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    //todo"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public JsonAdaptedAppeal(@JsonProperty(\"appealId\") String appealId,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                             @JsonProperty(\"appealType\") String appealType,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                             @JsonProperty(\"studentId\") String studentId,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                             @JsonProperty(\"academicYear\") String academicYear,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                             @JsonProperty(\"studentWorkload\") int studentWorkload,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                             @JsonProperty(\"appealDescription\") String appealDescription,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                             @JsonProperty(\"previousModule\") String previousModule,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                             @JsonProperty(\"newModule\") String newModule,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                             @JsonProperty(\"moduleToAdd\") String moduleToAdd,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                             @JsonProperty(\"moduleToDrop\") String moduleToDrop,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                             @JsonProperty(\"resolved\") boolean resolved,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                             @JsonProperty(\"result\") String result,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                             @JsonProperty(\"remark\") String remark) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.appealId \u003d appealId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.appealType \u003d appealType;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.studentWorkload \u003d studentWorkload;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.appealDescription \u003d appealDescription;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.previousModule \u003d previousModule;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.newModule \u003d newModule;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.moduleToAdd \u003d moduleToAdd;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.moduleToDrop \u003d moduleToDrop;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.resolved \u003d resolved;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Converts a given {@code Appeal} into this class for Jackson use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public JsonAdaptedAppeal(Appeal source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        appealId \u003d source.getAppealId();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        appealType \u003d source.getAppealType();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        studentId \u003d source.getStudentId();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        academicYear \u003d source.getAcademicYear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        studentWorkload \u003d source.getStudentWorkload();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        appealDescription \u003d source.getAppealDescription();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        previousModule \u003d source.getPreviousModule();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        newModule \u003d source.getNewModule();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        moduleToAdd \u003d source.getModuleToAdd();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        moduleToDrop \u003d source.getModuleToDrop();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        resolved \u003d source.isResolved();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        result \u003d source.getResult();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        remark \u003d source.getRemark();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Converts this Jackson-friendly adapted appeal object into the model\u0027s {@code Appeal} object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public Appeal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //Appeal Id"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (appealId \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"appealId\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!Appeal.isValidAppealId(appealId)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new IllegalValueException(Appeal.MESSAGE_CONSTRAINTS_APPEAL_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final String modelAppealId \u003d appealId;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //Appeal Type"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (appealType \u003d\u003d null) { //sessionId expected for Json data"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Appeal Type\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!Appeal.isValidAppealType(appealType)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new IllegalValueException(Appeal.MESSAGE_CONSTRAINTS_APPEAL_TYPE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final String modelAppealType \u003d appealType;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //Student Id"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (studentId \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Student ID\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!MatricId.isValidMatricId(studentId)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new IllegalValueException(MatricId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final String modelStudentId \u003d studentId;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //Academic Year"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (academicYear \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Academic year\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!Appeal.isValidAcademicYear(academicYear)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new IllegalValueException(Appeal.MESSAGE_CONSTRAINTS_ACADEMICYEAR);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final String modelAcademicYear \u003d academicYear;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //Student workload"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final int modelStudentWorkload \u003d studentWorkload;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //Appeal description"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final String modelAppealDescription \u003d appealDescription;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //Previous module for swapping"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!previousModule.isEmpty() \u0026\u0026 !Module.isValidModuleCode(previousModule)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new IllegalValueException(Module.MESSAGE_CONSTRAINTS_MODULE_CODE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final String modelPreviousModule \u003d previousModule;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //New Module for swapping"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!newModule.isEmpty() \u0026\u0026 !Module.isValidModuleCode(newModule)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new IllegalValueException(Module.MESSAGE_CONSTRAINTS_MODULE_CODE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final String modelNewModule \u003d newModule;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //Module requested to be added"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!moduleToAdd.isEmpty() \u0026\u0026 !Module.isValidModuleCode(moduleToAdd)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new IllegalValueException(Module.MESSAGE_CONSTRAINTS_MODULE_CODE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final String modelModuleToAdd \u003d moduleToAdd;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //Module requested to be dropped"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if (!moduleToDrop.isEmpty() \u0026\u0026 !Module.isValidModuleCode(moduleToDrop)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            throw new IllegalValueException(Module.MESSAGE_CONSTRAINTS_MODULE_CODE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final String modelModuleToDrop \u003d moduleToDrop;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //Is this appeal resolved"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final boolean modelIsResolved \u003d resolved;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //The outcome of the appeal"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final String modelResult \u003d result;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //Remark left by admin"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        final String modelRemark \u003d remark;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return new Appeal(modelAppealId, modelAppealType, modelStudentId,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "         modelAcademicYear, modelStudentWorkload, modelAppealDescription,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "         modelPreviousModule, modelNewModule, modelModuleToAdd, modelModuleToDrop,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "         modelIsResolved, modelResult, modelRemark);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 2,
      "AaronLuk": 172
    }
  },
  {
    "path": "src/main/java/mams/storage/JsonAdaptedInputOutput.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.time.TimeStamp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.InputOutput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Jackson-friendly version of {@link InputOutput}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "class JsonAdaptedInputOutput {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"InputOutput\u0027s %s field is missing/blank!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String INPUT_PROPERTY_NAME \u003d \"input\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String OUTPUT_PROPERTY_NAME \u003d \"output\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String EXECUTION_STATUS_PROPERTY_NAME \u003d \"isSuccessfulExecution\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String TIME_STAMP_PROPERTY_NAME \u003d \"timeStamp\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final String output;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final boolean isSuccessfulExecution;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final long timeStamp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Constructs a {@code JsonAdaptedInputOutput} with the given InputOutput details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public JsonAdaptedInputOutput(@JsonProperty(INPUT_PROPERTY_NAME) String input,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                  @JsonProperty(OUTPUT_PROPERTY_NAME) String output,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                  @JsonProperty(EXECUTION_STATUS_PROPERTY_NAME) boolean isSuccessfulExecution,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                  @JsonProperty(TIME_STAMP_PROPERTY_NAME) long timeStamp) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.output \u003d output;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.isSuccessfulExecution \u003d isSuccessfulExecution;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.timeStamp \u003d timeStamp;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Converts a given {@code InputOutput} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public JsonAdaptedInputOutput(InputOutput source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        input \u003d source.getInput();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        output \u003d source.getOutput();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        isSuccessfulExecution \u003d source.checkSuccessful();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        timeStamp \u003d source.getTimeStamp().asUnixTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Converts this Jackson-friendly adapted InputOutput object into the logic\u0027s {@code InputOutput} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted InputOutput."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public InputOutput toLogicType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // it is possible to have a blank space user input, but MAMS will never give a blank-space output."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (input \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    INPUT_PROPERTY_NAME));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (output \u003d\u003d null || output.isBlank()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    OUTPUT_PROPERTY_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return new InputOutput(input, output, isSuccessfulExecution, new TimeStamp(timeStamp));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 72
    }
  },
  {
    "path": "src/main/java/mams/storage/JsonAdaptedModule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String moduleDescription;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String lecturerName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String timeSlot;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final String quota;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e(); //students"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"code\") String moduleCode, @JsonProperty(\"modulename\") String moduleName,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                             @JsonProperty(\"moduledescription\") String moduleDescription,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                             @JsonProperty(\"lecturername\") String lecturerName,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                             @JsonProperty(\"timeslot\") String timeSlot, @JsonProperty(\"quota\") String quota,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.moduleDescription \u003d moduleDescription;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.lecturerName \u003d lecturerName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.quota \u003d quota;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleCode \u003d source.getModuleCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleName \u003d source.getModuleName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleDescription \u003d source.getModuleDescription();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        lecturerName \u003d source.getLecturerName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        timeSlot \u003d source.getTimeSlot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        quota \u003d Integer.toString(source.getQuotaInt());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        tagged.addAll(source.getStudents().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final List\u003cTag\u003e moduleTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            moduleTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Module Code\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!Module.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new IllegalValueException(Module.MESSAGE_CONSTRAINTS_MODULE_CODE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final String modelModuleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (moduleName \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Module Name\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!Module.isValidModuleName(moduleName)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new IllegalValueException(Module.MESSAGE_CONSTRAINTS_MODULE_NAME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final String modelModuleName \u003d moduleName;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (moduleDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Module Description\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!Module.isValidModuleDescription(moduleDescription)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new IllegalValueException(Module.MESSAGE_CONSTRAINTS_MODULE_DESCRIPTION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final String modelModuleDescription \u003d moduleDescription;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (lecturerName \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Lecturer Name\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!Module.isValidLecturerName(lecturerName)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new IllegalValueException(Module.MESSAGE_CONSTRAINTS_LECTURER_NAME);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final String modelLecturerName \u003d lecturerName;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (quota \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Quota\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!Module.isValidQuota(quota)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new IllegalValueException(Module.MESSAGE_CONSTRAINTS_QUOTA);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final String modelQuota \u003d quota;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (timeSlot \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Time Slot\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        if (!Module.isValidTimeSlot(timeSlot)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            throw new IllegalValueException(Module.MESSAGE_CONSTRAINTS_TIME_SLOT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final String modelTimeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(moduleTags); //students"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return new Module(modelModuleCode, modelModuleName, modelModuleDescription,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                modelLecturerName, modelTimeSlot, modelQuota, modelTags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongliyuan": 129
    }
  },
  {
    "path": "src/main/java/mams/storage/JsonAdaptedStudent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.Credits;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.MatricId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.PrevMods;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private final String credits;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private final String prevMods;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private final String matricId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    //todo"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name, @JsonProperty(\"credits\") String credits,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                              @JsonProperty(\"prevMods\") String prevMods, @JsonProperty(\"matricId\") String matricId,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.prevMods \u003d prevMods;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.matricId \u003d matricId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        credits \u003d source.getCredits().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        prevMods \u003d source.getPrevMods().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        matricId \u003d source.getMatricId().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            studentTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                    Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (credits \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Credits.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (!Credits.isValidCredits(credits)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new IllegalValueException(Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        final Credits modelCredits \u003d new Credits(credits);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (prevMods \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                    PrevMods.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (!PrevMods.isValidPrevMods(prevMods)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new IllegalValueException(PrevMods.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        final PrevMods modelPrevMods \u003d new PrevMods(prevMods);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (matricId \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "                    MatricId.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        if (!MatricId.isValidMatricId(matricId)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            throw new IllegalValueException(MatricId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        final MatricId modelMatricId \u003d new MatricId(matricId);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(studentTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return new Student(modelName, modelCredits, modelPrevMods, modelMatricId, modelTags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 15,
      "-": 61,
      "MistyRainforest": 37
    }
  },
  {
    "path": "src/main/java/mams/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/mams/storage/JsonCommandHistoryStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.ReadOnlyCommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A class to access CommandHistory data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class JsonCommandHistoryStorage implements CommandHistoryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCommandHistoryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public JsonCommandHistoryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Path getCommandHistoryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Optional\u003cReadOnlyCommandHistory\u003e readCommandHistory() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return readCommandHistory(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Similar to {@link #readCommandHistory()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Optional\u003cReadOnlyCommandHistory\u003e readCommandHistory(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Optional\u003cJsonSerializableCommandHistory\u003e jsonCommandHistory \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                filePath, JsonSerializableCommandHistory.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (jsonCommandHistory.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Optional.of(jsonCommandHistory.get().toLogicType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void saveCommandHistory(ReadOnlyCommandHistory commandHistory) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        saveCommandHistory(commandHistory, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Similar to {@link #saveCommandHistory(ReadOnlyCommandHistory)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void saveCommandHistory(ReadOnlyCommandHistory commandHistory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(commandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCommandHistory(commandHistory), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 80
    }
  },
  {
    "path": "src/main/java/mams/storage/JsonMamsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyMams;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A class to access Mams data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class JsonMamsStorage implements MamsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMamsStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public JsonMamsStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Path getMamsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Optional\u003cReadOnlyMams\u003e readMams() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return readMams(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Similar to {@link #readMams()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Optional\u003cReadOnlyMams\u003e readMams(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Optional\u003cJsonSerializableMams\u003e jsonMams \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                filePath, JsonSerializableMams.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!jsonMams.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Optional.of(jsonMams.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void saveMams(ReadOnlyMams mams) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        saveMams(mams, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Similar to {@link #saveMams(ReadOnlyMams)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void saveMams(ReadOnlyMams mams, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(mams);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMams(mams), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 80
    }
  },
  {
    "path": "src/main/java/mams/storage/JsonSerializableCommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.InputOutput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.ReadOnlyCommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * An Immutable CommandHistory that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@JsonRootName(value \u003d \"commandHistory\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "class JsonSerializableCommandHistory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final List\u003cJsonAdaptedInputOutput\u003e inputOutputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Constructs a {@code JsonSerializableCommandHistory} with the given command inputs and outputs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public JsonSerializableCommandHistory(@JsonProperty(\"inputOutputs\") List\u003cJsonAdaptedInputOutput\u003e inputOutputs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.inputOutputs.addAll(inputOutputs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Converts a given {@code ReadOnlyCommandHistory} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCommandHistory}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public JsonSerializableCommandHistory(ReadOnlyCommandHistory source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        inputOutputs.addAll(source.getInputOutputHistory().stream().map(JsonAdaptedInputOutput::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Converts this CommandHistory into the logic\u0027s {@code CommandHistory} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public CommandHistory toLogicType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (JsonAdaptedInputOutput jsonAdaptedInputOutput: inputOutputs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            InputOutput inputOutput \u003d jsonAdaptedInputOutput.toLogicType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            commandHistory.add(inputOutput.getInput(), inputOutput.getOutput(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    inputOutput.checkSuccessful(), inputOutput.getTimeStamp());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return commandHistory;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 59
    }
  },
  {
    "path": "src/main/java/mams/storage/JsonSerializableMams.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Mams;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyMams;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * An Immutable MAMS that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@JsonRootName(value \u003d \"mams\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "class JsonSerializableMams {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Students list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Modules list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPEALS \u003d \"Appeals list contains duplicate appeal(s)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final List\u003cJsonAdaptedAppeal\u003e appeals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Constructs a {@code JsonSerializableMams} with the given students and modules."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public JsonSerializableMams(@JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                @JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                                @JsonProperty(\"appeals\") List\u003cJsonAdaptedAppeal\u003e appeals) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.appeals.addAll(appeals);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Converts a given {@code ReadOnlyMams} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMams}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public JsonSerializableMams(ReadOnlyMams source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        appeals.addAll(source.getAppealList().stream().map(JsonAdaptedAppeal::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Converts this MAMS into the model\u0027s {@code Mams} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Mams toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Mams mams \u003d new Mams();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            if (mams.hasModule(module)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            mams.addModule(module);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (mams.hasStudent(student)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            mams.addStudent(student);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        for (JsonAdaptedAppeal jsonAdaptedAppeal: appeals) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            Appeal appeal \u003d jsonAdaptedAppeal.toModelType();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            if (mams.hasAppeal((appeal))) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_APPEALS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            mams.addAppeal(appeal);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return mams;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 25,
      "AaronLuk": 15,
      "chensu2436": 1,
      "-": 36,
      "cheongliyuan": 16
    }
  },
  {
    "path": "src/main/java/mams/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/mams/storage/MamsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Mams;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyMams;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Represents a storage for {@link Mams}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public interface MamsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Path getMamsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns Mams data as a {@link ReadOnlyMams}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Optional\u003cReadOnlyMams\u003e readMams() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @see #getMamsFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Optional\u003cReadOnlyMams\u003e readMams(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Saves the given {@link ReadOnlyMams} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param mams cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void saveMams(ReadOnlyMams mams) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @see #saveMams(ReadOnlyMams)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void saveMams(ReadOnlyMams mams, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 46
    }
  },
  {
    "path": "src/main/java/mams/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.ReadOnlyCommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyMams;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public interface Storage extends MamsStorage, UserPrefsStorage, CommandHistoryStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Path getMamsFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Optional\u003cReadOnlyMams\u003e readMams() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void saveMams(ReadOnlyMams mams) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Optional\u003cReadOnlyCommandHistory\u003e readCommandHistory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void saveCommandHistory(ReadOnlyCommandHistory commandHistory) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 16,
      "-": 23
    }
  },
  {
    "path": "src/main/java/mams/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.ReadOnlyCommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyMams;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Manages storage of Mams data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private MamsStorage mamsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private CommandHistoryStorage commandHistoryStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public StorageManager(MamsStorage mamsStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                          CommandHistoryStorage commandHistoryStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.mamsStorage \u003d mamsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistoryStorage \u003d commandHistoryStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Mams methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Path getMamsFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return mamsStorage.getMamsFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Optional\u003cReadOnlyMams\u003e readMams() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return readMams(mamsStorage.getMamsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Optional\u003cReadOnlyMams\u003e readMams(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return mamsStorage.readMams(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void saveMams(ReadOnlyMams mams) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        saveMams(mams, mamsStorage.getMamsFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void saveMams(ReadOnlyMams mams, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        mamsStorage.saveMams(mams, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CommandHistory methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Path getCommandHistoryFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return commandHistoryStorage.getCommandHistoryFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Optional\u003cReadOnlyCommandHistory\u003e readCommandHistory() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return readCommandHistory(commandHistoryStorage.getCommandHistoryFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Optional\u003cReadOnlyCommandHistory\u003e readCommandHistory(Path filePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        logger.fine(\"Attempting to read command history data from file: \" + filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return commandHistoryStorage.readCommandHistory(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void saveCommandHistory(ReadOnlyCommandHistory commandHistory) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        saveCommandHistory(commandHistory, commandHistoryStorage.getCommandHistoryFilePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void saveCommandHistory(ReadOnlyCommandHistory commandHistory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        logger.fine(\"Attempting to write to command history data file: \" + filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        commandHistoryStorage.saveCommandHistory(commandHistory, filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 54,
      "-": 56
    }
  },
  {
    "path": "src/main/java/mams/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/mams/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.time.TimeStamp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.ListPointer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.InputOutput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final List\u003cInputOutput\u003e commandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ListPointer\u003cInputOutput\u003e commandHistoryPointer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cInputOutput\u003e commandHistory) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistory \u003d commandHistory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistoryPointer \u003d new ListPointer\u003cInputOutput\u003e(commandHistory);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            reinitializeHistoryPointer();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            commandHistoryPointer.next();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            reinitializeHistoryPointer();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Handles {@code keyEvent} event for the {@code CommandBox}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            getPreviousInput();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            getNextInput();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Updates the text field with the previous input pointed to by {@code commandHistoryPointer} in"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code commandHistory}, if there exists a previous input."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void getPreviousInput() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!commandHistoryPointer.hasPrevious()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        replaceText(commandHistoryPointer.previous().getInput());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Updates the text field with the next input pointed to by {@code commandHistoryPointer} in"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code commandHistory}, if there exists a next input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void getNextInput() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!commandHistoryPointer.hasNext()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        replaceText(commandHistoryPointer.next().getInput());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void reinitializeHistoryPointer() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        commandHistoryPointer \u003d new ListPointer\u003cInputOutput\u003e(commandHistory);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // add an dummy InputOutput with input set to an empty string"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // to represent the most-recent end of the defensive list in ListPointer, to be shown to"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // the user if he/she tries to navigate past the most-recent end."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        commandHistoryPointer.add(new InputOutput(\"\", \"\", false, new TimeStamp()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 82,
      "-": 71
    }
  },
  {
    "path": "src/main/java/mams/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.appeal.AppealListPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.help.HelpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.history.HistoryWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.module.ModuleListPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.student.StudentListPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private AppealListPanel appealListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private HistoryWindow historyWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private StackPane appealListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private StackPane studentListPanelPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        historyWindow \u003d new HistoryWindow(false, logic.getCommandHistory());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        appealListPanel \u003d new AppealListPanel(logic.getFilteredAppealList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        appealListPanelPlaceholder.getChildren().add(appealListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getMamsFilePath());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getCommandHistory());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Opens the history window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param hideOutputHistory if true, hides the command feedback in the history window"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void handleHistory(boolean hideOutputHistory) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        historyWindow.hideOutputDisplay(hideOutputHistory);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        handleHistory();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Overloaded method for convenience."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void handleHistory() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!historyWindow.isShowing()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            historyWindow.show();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            historyWindow.focus();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        historyWindow.hide();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (commandResult.isShowHistory()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                handleHistory(commandResult.isHideOutputHistory());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 60,
      "-": 175
    }
  },
  {
    "path": "src/main/java/mams/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void clearDisplay() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        resultDisplay.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/mams/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/mams/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/mams/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/mams_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 6,
      "-": 80
    }
  },
  {
    "path": "src/main/java/mams/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/mams/ui/appeal/AppealCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui.appeal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * An UI component that displays information of an {@code Appeal}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class AppealCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String STATUS_APPROVED \u003d \"Approved\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String STATUS_REJECTED \u003d \"Rejected\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String APPROVED_ICON \u003d \"\\uD83D\\uDC4D\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String REJECTED_ICON \u003d \"\\uD83D\\uDC4E\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String STATUS_RESOLVED \u003d \"\\u2713\" + \" Resolved\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String STATUS_UNRESOLVED \u003d \"\\u2718\" + \" Unresolved\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String STATUS_BASE_STYLE_CLASS \u003d \"prefix-label\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String REJECTED_STYLE_CLASS \u003d \"prefix_red\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String APPROVED_STYLE_CLASS \u003d \"prefix_sky_blue\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String UNRESOLVED_STYLE_CLASS \u003d \"prefix_pink\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String RESOLVED_STYLE_CLASS \u003d \"prefix_green\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FXML \u003d \"AppealListCard.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public final Appeal appeal;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label appealId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label appealType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label studentId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label academicYear;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label approvalIcon;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label approvalStatus;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label resolvedStatus;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public AppealCard(Appeal appeal, int displayedIndex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(appeal);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.appeal \u003d appeal;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        appealId.setText(appeal.getAppealId());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        studentId.setText(appeal.getStudentId());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        appealType.setText(appeal.getAppealType());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        academicYear.setText(appeal.getAcademicYear());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // TODO change once aaron implements getter method"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        setApprovalStatusDisplay(approvalIcon, approvalStatus, appeal.isResolved(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                appeal.getResult().equals(\"APPROVED\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        setResolvedStatusDisplay(resolvedStatus, appeal.isResolved());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static void setResolvedStatusDisplay(Label resolvedStatus, boolean isResolved) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(resolvedStatus);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (isResolved) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            resolvedStatus.setText(STATUS_RESOLVED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            resolvedStatus.getStyleClass().add(RESOLVED_STYLE_CLASS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            resolvedStatus.setText(STATUS_UNRESOLVED);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            resolvedStatus.getStyleClass().add(UNRESOLVED_STYLE_CLASS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static void setApprovalStatusDisplay(Label approvalIcon, Label approvalStatus,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                                boolean isResolved, boolean isApproved) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireAllNonNull(approvalIcon, approvalStatus);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (isResolved) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (isApproved) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                approvalIcon.setText(APPROVED_ICON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                approvalStatus.setText(STATUS_APPROVED);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                approvalStatus.getStyleClass().addAll(STATUS_BASE_STYLE_CLASS, APPROVED_STYLE_CLASS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                approvalIcon.setText(REJECTED_ICON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                approvalStatus.setText(STATUS_REJECTED);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                approvalStatus.getStyleClass().addAll(STATUS_BASE_STYLE_CLASS, REJECTED_STYLE_CLASS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(other instanceof AppealCard)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        AppealCard card \u003d (AppealCard) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 appeal.equals(card.appeal);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 116
    }
  },
  {
    "path": "src/main/java/mams/ui/appeal/AppealListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui.appeal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Panel containing the list of appeals."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class AppealListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FXML \u003d \"ItemListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AppealListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final ObservableList\u003cAppeal\u003e appealList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ListView\u003cAppeal\u003e itemListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public AppealListPanel(ObservableList\u003cAppeal\u003e appealList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(appealList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.appealList \u003d appealList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        itemListView.setItems(appealList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new AppealListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of an {@code Appeal} using an {@code AppealCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    class AppealListViewCell extends ListCell\u003cAppeal\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        protected void updateItem(Appeal appeal, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            super.updateItem(appeal, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (empty || appeal \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            } else if (appealList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                logger.fine(\"Displaying expanded appeal card.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setGraphic(new ExpandedAppealCard(appeal).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setGraphic(new AppealCard(appeal, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 55
    }
  },
  {
    "path": "src/main/java/mams/ui/appeal/ExpandedAppealCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui.appeal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.ui.appeal.AppealCard.setApprovalStatusDisplay;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.ui.appeal.AppealCard.setResolvedStatusDisplay;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A UI component that displays the full expanded information of an {@code Appeal}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Does not inherit from {@code AppealCard} as it uses a different FXML file -"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * this is to ensure minimal complications in future development, where fx:id\u0027s"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * and layouts of various components in the FXML file of {@code ExpandedAppealCard}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * may diverge from the FXML file used in the {@code AppealCard}. Furthermore,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * the {@code id} is also no longer used in the expanded view."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ExpandedAppealCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FXML \u003d \"ExpandedAppealListCard.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public final Appeal appeal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label appealId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label appealType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label studentId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label academicYear;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label requestedWorkload;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label moduleToDrop;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label requestedModule;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label appealDescription;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label approvalIcon;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label approvalStatus;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label resolvedStatus;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label adminRemarks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ExpandedAppealCard(Appeal appeal) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(appeal);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.appeal \u003d appeal;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        appealId.setText(appeal.getAppealId());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        studentId.setText(appeal.getStudentId());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        appealType.setText(appeal.getAppealType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        academicYear.setText(appeal.getAcademicYear());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (appeal.getStudentWorkload() !\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            requestedWorkload.setText((Integer.toString(appeal.getStudentWorkload())));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!appeal.getModuleToDrop().isBlank()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            moduleToDrop.setText(appeal.getModuleToDrop());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!appeal.getModuleToAdd().isBlank()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            requestedModule.setText(appeal.getModuleToAdd());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        appealDescription.setText(appeal.getAppealDescription());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        adminRemarks.setText(appeal.getRemark());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        setResolvedStatusDisplay(resolvedStatus, appeal.isResolved());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        setApprovalStatusDisplay(approvalIcon, approvalStatus, appeal.isResolved(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                appeal.getResult().equals(\"APPROVED\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(other instanceof AppealCard)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        AppealCard card \u003d (AppealCard) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return appeal.equals(card.appeal);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 96
    }
  },
  {
    "path": "src/main/java/mams/ui/help/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103-t11-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String YELLOW_LABEL_STYLE_CLASS \u003d \"prefix_yellow\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String PURPLE_LABEL_STYLE_CLASS \u003d \"prefix_purple\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String RED_LABEL_STYLE_CLASS \u003d \"prefix_red\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String SKY_BLUE_LABEL_CLASS \u003d \"prefix_sky_blue\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String PINK_LABEL_STYLE_CLASS \u003d \"prefix_pink\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String GREEN_LABEL_STYLE_CLASS \u003d \"prefix_green\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final List\u003cString\u003e LABEL_STYLES \u003d Arrays.asList(YELLOW_LABEL_STYLE_CLASS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            PURPLE_LABEL_STYLE_CLASS, RED_LABEL_STYLE_CLASS, SKY_BLUE_LABEL_CLASS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            PINK_LABEL_STYLE_CLASS, GREEN_LABEL_STYLE_CLASS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        changeHelpMessageStyle(); // see #changeHelpMessageStyle() for why this is needed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Changes the background fill for the helpMessage {@code Label} to a random colour. The reason"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * why this is needed is due to a bug on JavaFX on Mac OSX (with tab preference enabled in System Preferences)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * where the help window (or any new window in particular) will sometimes not load on re-opening until"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * an event is fired (or until something \"prompts\" the GUI)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * By changing the Label style randomly on each re-open, we prevent this from happening. Besides,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * it also looks nice."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void changeHelpMessageStyle() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        helpMessage.getStyleClass().removeAll(LABEL_STYLES);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String randomStyleClass \u003d LABEL_STYLES.get(random.nextInt(LABEL_STYLES.size()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        helpMessage.getStyleClass().add(randomStyleClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // unlike #close(), this is not explicitly needed here (see #changeHelpMessageStyle)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // it\u0027s here just purely for the visual effects."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        changeHelpMessageStyle();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void copyUrl() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Handles {@code KeyEvent} for the help window."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case ESCAPE:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            hide();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 59,
      "-": 93
    }
  },
  {
    "path": "src/main/java/mams/ui/history/HistoryListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.InputOutput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.appeal.AppealListPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Panel displaying command history in list form."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class HistoryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FXML \u003d \"ItemListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AppealListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ListView\u003cInputOutput\u003e itemListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private boolean isHideOutput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ObservableList\u003cInputOutput\u003e commandHistoryList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public HistoryListPanel(ObservableList\u003cInputOutput\u003e commandHistory) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(commandHistory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistoryList \u003d commandHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        itemListView.setItems(commandHistory);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new HistoryListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Sets boolean flag for hiding output when updating all existing ListCells"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * in {@code itemListView}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param isHideOutput"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void hideOutput(boolean isHideOutput) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        logger.fine(\"Command output in the command history window has been hidden\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.isHideOutput \u003d isHideOutput;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Scroll {@code commandHistoryListAdapter} to the bottom, and selects the last"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * cell."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void scrollToBottom() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        int lastIndex \u003d commandHistoryList.size() - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        itemListView.scrollTo(lastIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        itemListView.getSelectionModel().select(lastIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        itemListView.getFocusModel().focus(lastIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public InputOutput getCurrentlySelectedInputOutput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        logger.fine(\"Retrieving details of the currently selected InputOutput object\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return itemListView.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of an {@code InputOutput} using an {@code InputOutputCard}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    class HistoryListViewCell extends ListCell\u003cInputOutput\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        protected void updateItem(InputOutput inputOutput, boolean empty) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            super.updateItem(inputOutput, empty);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (empty || inputOutput \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setGraphic(new InputOutputCard(inputOutput, getIndex() + 1, isHideOutput).getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 81
    }
  },
  {
    "path": "src/main/java/mams/ui/history/HistoryWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.InputOutput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.ResultDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiPart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Controller for a page displaying command history."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class HistoryWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HistoryWindow.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FXML \u003d \"HistoryWindow.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String MESSAGE_COPY_FEEDBACK \u003d \"Copied the following command to system clipboard:\\n%1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private boolean hideOutputHistory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private HistoryListPanel historyListPanel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ResultDisplay historyWindowFeedback;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private StackPane historyDisplayPanelPlaceholder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Creates a new HistoryWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public HistoryWindow(Stage root, boolean hideOutputHistory, ObservableList\u003cInputOutput\u003e commandHistory) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.hideOutputHistory \u003d hideOutputHistory;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.historyListPanel \u003d new HistoryListPanel(commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        historyDisplayPanelPlaceholder.getChildren().add(historyListPanel.getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.historyWindowFeedback \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(historyWindowFeedback.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // Global event filter: whenever ESC key is pressed, exit HistoryWindow regardless of focus."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        root.addEventFilter(KeyEvent.KEY_PRESSED, this::handleKeyPress);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Creates a new HistoryWindow, and populates it with the command history."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param hideOutputHistory if true, then command feedback history will be displayed along with command history"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public HistoryWindow(boolean hideOutputHistory, ObservableList\u003cInputOutput\u003e commandHistory) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this(new Stage(), hideOutputHistory, commandHistory); // null checking delegated to other constructor"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Setter method for displaying/hiding command feedback in the history window"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param isOutputHidden if true, command feedback is shown in history window"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void hideOutputDisplay(boolean isOutputHidden) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        logger.fine(\"Feedback display in history window has been set to \" + Boolean.toString(isOutputHidden));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.hideOutputHistory \u003d isOutputHidden;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        historyListPanel.hideOutput(isOutputHidden);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Shows the history window."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        logger.fine(\"Showing the command history page.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        scrollToBottom();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns true if the history window is currently being shown."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Hides the history window."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        historyWindowFeedback.clearDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Focuses on the history window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        scrollToBottom();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Scroll display list to bottom."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void scrollToBottom() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        historyListPanel.scrollToBottom();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Copies the input of a InputOutput object to the system clipboard."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void copyToClipboard() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        final ClipboardContent copiedText \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        InputOutput selected \u003d historyListPanel.getCurrentlySelectedInputOutput();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        copiedText.putString(selected.getInput());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        clipboard.setContent(copiedText);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        historyWindowFeedback.setFeedbackToUser(String.format(MESSAGE_COPY_FEEDBACK, selected.getInput()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Handles {@code KeyEvent} for the history window."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case ESCAPE:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            hide();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case Q:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            copyToClipboard();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 161
    }
  },
  {
    "path": "src/main/java/mams/ui/history/InputOutputCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.InputOutput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * An UI component that displays information of an {@code InputOutput} for display in HistoryWindow."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class InputOutputCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String STATUS_SUCCESSFUL_COMMAND \u003d \"\\u2713\" + \" Successful Execution\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String STATUS_UNSUCCESSFUL_COMMAND \u003d \"\\u2718\" + \" Failed Execution\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String UNSUCCESSFUL_STYLE_CLASS \u003d \"red-text-label\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String SUCCESSFUL_STYLE_CLASS \u003d \"green-text-label\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FXML \u003d \"InputOutputListCard.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final InputOutput inputOutput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final Index positionOnDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label input;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label output;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label executionStatus;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label timeStamp;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public InputOutputCard(InputOutput inputOutput, int displayedListIndex, boolean isHideOutput) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(inputOutput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.inputOutput \u003d inputOutput;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        positionOnDisplay \u003d Index.fromOneBased(displayedListIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        input.setText(inputOutput.getInput());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        output.setText((isHideOutput) ? \"\" : inputOutput.getOutput());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        timeStamp.setText(inputOutput.getTimeStampAsString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        setExecutionStatusDisplay(executionStatus, output, inputOutput.checkSuccessful());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static void setExecutionStatusDisplay(Label executionStatus, Label output, boolean isSuccessfulCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireAllNonNull(executionStatus, output);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (isSuccessfulCommand) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            executionStatus.setText(STATUS_SUCCESSFUL_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            executionStatus.getStyleClass().add(SUCCESSFUL_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            executionStatus.setText(STATUS_UNSUCCESSFUL_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            executionStatus.getStyleClass().add(UNSUCCESSFUL_STYLE_CLASS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            output.getStyleClass().add(UNSUCCESSFUL_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(other instanceof InputOutputCard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        InputOutputCard card \u003d (InputOutputCard) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return positionOnDisplay \u003d\u003d card.positionOnDisplay"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 inputOutput.equals(card.inputOutput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 82
    }
  },
  {
    "path": "src/main/java/mams/ui/module/ExpandedModuleCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A UI component that displays the full expanded information of an {@code Module}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Does not inherit from {@code ModuleCard} as it uses a different FXML file -"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * this is to ensure minimal complications in future development, where fx:id\u0027s"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * and layouts of various components in the FXML file of {@code ExpandedModuleCard}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * may diverge from the FXML file used in the {@code ModuleCard}. Furthermore,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * the {@code id} is also no longer used in the expanded view."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ExpandedModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FXML \u003d \"ExpandedModuleListCard.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String EXPANDED_CREDITS_LABEL_TEMPLATE \u003d \"%1$s Modular Credit(s)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label moduleName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label credits;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label lecturerName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label timeSlot;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label enrolment;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label quota;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ProgressBar quotaBar;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label moduleDescription;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label studentsEnrolled;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ExpandedModuleCard(Module module) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        moduleCode.setText(module.getModuleCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        moduleName.setText(module.getModuleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        credits.setText(String.format(EXPANDED_CREDITS_LABEL_TEMPLATE, module.getModuleWorkload()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        lecturerName.setText(module.getLecturerName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        timeSlot.setText(module.getModuleTimeTableToString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        enrolment.setText(Integer.toString(module.getCurrentEnrolment()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        quota.setText(module.getQuota());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        setEnrolmentProgressBar();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        moduleDescription.setText(module.getModuleDescription());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        studentsEnrolled.setText(formatStudentEnrolmentToText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void setEnrolmentProgressBar() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        double percentageFilled \u003d (double) module.getCurrentEnrolment() / module.getQuotaInt();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        quotaBar.setProgress(percentageFilled);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Formats the list of student IDs contained in {@code Module} to a {@code String} object,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * with one student ID on each line, sorted by alpha-numeric order."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return formatted text of student IDs."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private String formatStudentEnrolmentToText() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return module.getStudents().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .sorted(Comparator.comparing(student -\u003e student.tagName))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .map(student -\u003e student.tagName)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return module.equals(card.module);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 100,
      "cheongliyuan": 2
    }
  },
  {
    "path": "src/main/java/mams/ui/module/ModuleCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String CREDITS_LABEL_TEMPLATE \u003d \"%1$s MC(s)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label credits;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private Label moduleName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private Label lecturerName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label timeSlot;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label enrolment;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private Label quota;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ProgressBar quotaBar;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        moduleCode.setText(module.getModuleCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        credits.setText(String.format(CREDITS_LABEL_TEMPLATE, module.getModuleWorkload()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleName.setText(module.getModuleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        lecturerName.setText(module.getLecturerName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        timeSlot.setText(module.getModuleTimeTableToString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        enrolment.setText(Integer.toString(module.getCurrentEnrolment()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        quota.setText(Integer.toString(module.getQuotaInt()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        double percentageFilled \u003d (double) module.getCurrentEnrolment() / module.getQuotaInt();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        quotaBar.setProgress(percentageFilled);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 66,
      "chensu2436": 1,
      "cheongliyuan": 10
    }
  },
  {
    "path": "src/main/java/mams/ui/module/ModuleListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FXML \u003d \"ItemListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final ObservableList\u003cModule\u003e moduleList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ListView\u003cModule\u003e itemListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(moduleList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        itemListView.setItems(moduleList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            } else if (moduleList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                logger.fine(\"Displaying expanded module card\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setGraphic(new ExpandedModuleCard(module).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 55
    }
  },
  {
    "path": "src/main/java/mams/ui/student/ExpandedStudentCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A UI component that displays the full expanded information of an {@code Student}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Does not inherit from {@code StudentCard} as it uses a different FXML file -"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * this is to ensure minimal complications in future development, where fx:id\u0027s"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * and layouts of various components in the FXML file of {@code ExpandedStudentCard}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * may diverge from the FXML file used in the {@code StudentCard}. Furthermore,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * the {@code id} is also no longer used in the expanded view."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ExpandedStudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FXML \u003d \"ExpandedStudentListCard.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label credits;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label matricId;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label currentMods;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label currentAppeals;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private FlowPane appealTags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label numberOfMods;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label previousModules;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public ExpandedStudentCard(Student student) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        credits.setText(student.getCredits().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        matricId.setText(student.getMatricId().value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        currentMods.setText(formatCurrentModuleListToText());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        currentAppeals.setText(formatCurrentAppealListToText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        numberOfMods.setText(Integer.toString(student.getNumberOfMods()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        previousModules.setText(student.getPrevMods().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        student.getCurrentAppeals().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .forEach(tag -\u003e appealTags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Formats the list of {@code Module} codes contained in {@code Student} to a {@code String} object,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * with one module code on each line, sorted by alpha-numeric order."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return formatted text of module codes."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private String formatCurrentModuleListToText() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return student.getCurrentModules().stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .sorted(Comparator.comparing(module -\u003e module.tagName))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .map(module -\u003e module.tagName)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Formats the list of {@code Appeal} IDs contained in {@code Student} to a {@code String} object,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * with one appeal ID on each line, sorted by alpha-numeric order."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return formatted text of appeal IDs."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private String formatCurrentAppealListToText() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return student.getCurrentAppeals().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .sorted(Comparator.comparing(appeal -\u003e appeal.tagName))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .map(appeal -\u003e appeal.tagName)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return student.equals(card.student);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 113
    }
  },
  {
    "path": "src/main/java/mams/ui/student/StudentCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private Label credits;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private Label matricId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label numberOfMods;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private FlowPane appealTags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        credits.setText(student.getCredits().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        matricId.setText(student.getMatricId().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        numberOfMods.setText(Integer.toString(student.getNumberOfMods()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        student.getCurrentAppeals().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .forEach(tag -\u003e appealTags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 23,
      "-": 53,
      "MistyRainforest": 2
    }
  },
  {
    "path": "src/main/java/mams/ui/student/StudentListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FXML \u003d \"ItemListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ObservableList\u003cStudent\u003e studentList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ListView\u003cStudent\u003e itemListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        requireNonNull(studentList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.studentList \u003d studentList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        itemListView.setItems(studentList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            } else if (studentList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                logger.fine(\"Displaying expanded student card\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setGraphic(new ExpandedStudentCard(student).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 56
    }
  },
  {
    "path": "src/main/resources/view/AppealListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"appealId\" text\u003d\"\\$appealId\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cPane HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"approvalIcon\" alignment\u003d\"CENTER_RIGHT\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"approvalStatus\" alignment\u003d\"CENTER_RIGHT\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"resolvedStatus\" styleClass\u003d\"prefix-label\" text\u003d\"\\%resolvedStatus\" alignment\u003d\"CENTER_RIGHT\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"appealTypePrefix\" styleClass\u003d\"prefix-label, prefix_yellow\" text\u003d\"Appeal Type\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"appealType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appealType\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"studentIdPrefix\" styleClass\u003d\"prefix-label, prefix_orange\" text\u003d\"Requested By\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"studentId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentId\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"academicYearPrefix\" styleClass\u003d\"prefix-label, prefix_orange\" text\u003d\"Academic Year\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"academicYear\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$academicYear\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 61
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: derive(#282A36, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    background-color: #20212A; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-base: #282A36;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-control-inner-background: #282A36;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #282A36;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: derive(#282A36, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: derive(#282A36, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: derive(#282A36, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-padding: 1 1 1 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #333644;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #44475A;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".list-cell:filled:selected #expandedCardPane {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #333644;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-color: #333644;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-color: #737fff;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".label.cell_small_label {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-tile-alignment: CENTER;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     -fx-background-color: derive(#282A36, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     -fx-background-color: derive(#282A36, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     -fx-border-color: derive(#282A36, 10%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: derive(#282A36, 30%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-font-family: \"Roboto Mono for Powerline\", \"Courier\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: derive(#282A36, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-color: derive(#282A36, 25%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: derive(#282A36, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-color: derive(#282A36, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: derive(#282A36, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: derive(#282A36, 50%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: derive(#282A36, 20%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #282A36;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  -fx-text-fill: #282A36;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #282A36;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #282A36;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #282A36;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: derive(#282A36, 25%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: derive(#282A36, 20%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: derive(#282A36, 50%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: transparent #20212A transparent #20212A;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-color: #20212A #20212A #BD93F9 #20212A;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-font-family: \"Avenir Next\", \"Segoe UI\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: transparent, #20212A, transparent, #20212A;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "#appealTags .label {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #990000;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 56,
      "-": 303
    }
  },
  {
    "path": "src/main/resources/view/DarkThemeHistoryWindow.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-padding: 1 1 1 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-radius: 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #20212A;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #20212A;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #20212A;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-radius: 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background: transparent;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".stack-pane.history-display {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #20212A;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".label.time-stamp {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #FA77C3;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "#timeStamp .label {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-font-size: 10px;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 54
    }
  },
  {
    "path": "src/main/resources/view/ExpandedAppealListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003cHBox id\u003d\"expandedCardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cVBox alignment\u003d\"TOP_LEFT\" minHeight\u003d\"600\" prefHeight\u003d\"900\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"appealId\" text\u003d\"\\$appealId\" styleClass\u003d\"cell_bigger_label\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cPane HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"approvalIcon\" alignment\u003d\"CENTER_RIGHT\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"approvalStatus\" alignment\u003d\"CENTER_RIGHT\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"resolvedStatus\" styleClass\u003d\"prefix-label\" text\u003d\"\\%resolvedStatus\" alignment\u003d\"CENTER_RIGHT\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"appealType\" styleClass\u003d\"cell_bigger_label, pink-text-label\" text\u003d\"\\$appealType\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel minHeight\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"studentIdPrefix\" styleClass\u003d\"prefix-label, prefix_yellow\" text\u003d\"Requested By\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"studentId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentId\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"academicYearPrefix\" styleClass\u003d\"prefix-label, prefix_yellow\" text\u003d\"Academic Year\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"academicYear\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$academicYear\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel minHeight\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"requestedWorkloadPrefix\" styleClass\u003d\"prefix-label, prefix_orange\" text\u003d\"Requested Workload\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"requestedWorkload\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleToDropPrefix\" styleClass\u003d\"prefix-label, prefix_orange\" text\u003d\"Module to Drop\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleToDrop\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"requestedModulePrefix\" styleClass\u003d\"prefix-label, prefix_orange\" text\u003d\"Requested Module\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"requestedModule\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel minHeight\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"appealDescriptionPrefix\" styleClass\u003d\"cell_big_label, orange-text-label\" text\u003d\"Student Reason:\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"appealDescription\" styleClass\u003d\"cell_small_label, description_text\" text\u003d\"\\$appealDescription\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel minHeight\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"adminRemarksPrefix\" styleClass\u003d\"cell_big_label, orange-text-label\" text\u003d\"Admin Remarks:\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"adminRemarks\" styleClass\u003d\"cell_small_label, description_text\" text\u003d\"\\$adminRemarks\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 82
    }
  },
  {
    "path": "src/main/resources/view/ExpandedModuleListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003cHBox id\u003d\"expandedCardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cVBox alignment\u003d\"TOP_LEFT\" minHeight\u003d\"600\" prefHeight\u003d\"900\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleCode\" text\u003d\"\\$first\" styleClass\u003d\"cell_bigger_label\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleName\" styleClass\u003d\"cell_bigger_label, green-text-label\" text\u003d\"\\$moduleName\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"credits\" styleClass\u003d\"prefix-label, prefix_sky_blue\" text\u003d\"\\$credits\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel minHeight\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeSlot\" styleClass\u003d\"cell_small_label, yellow-text-label\" text\u003d\"\\$timeSlot\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"lecturerNamePrefix\" styleClass\u003d\"prefix-label, prefix_sky_blue\" text\u003d\"Coordinator\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"lecturerName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$lecturerName\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"quotaPrefix\" styleClass\u003d\"prefix-label, prefix_sky_blue\" text\u003d\"Quota\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cProgressBar fx:id\u003d\"quotaBar\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"enrolment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$enrolment\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"/\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"quota\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quota\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel minHeight\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleDescriptionPrefix\" styleClass\u003d\"cell_big_label, yellow-text-label\" text\u003d\"Module Description:\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleDescription\" styleClass\u003d\"cell_small_label, description_text\" text\u003d\"\\$moduleDescription\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel minHeight\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"studentsEnrolledPrefix\" styleClass\u003d\"cell_big_label, yellow-text-label\" text\u003d\"Students Enrolled: \" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"studentsEnrolled\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentsEnrolled\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 54
    }
  },
  {
    "path": "src/main/resources/view/ExpandedStudentListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003cHBox id\u003d\"expandedCardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cVBox minHeight\u003d\"600\" prefHeight\u003d\"900\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"matricId\" styleClass\u003d\"cell_bigger_label\" text\u003d\"\\$matricId\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_bigger_label, blue-text-label\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"appealTags\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel minHeight\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"creditsPrefix\" styleClass\u003d\"prefix-label,  prefix_purple\" text\u003d\"Current Workload\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"credits\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$credits\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"creditsSuffix\" styleClass\u003d\"cell_small_label\" text\u003d\" MC(s)\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"numberOfModsPrefix\" styleClass\u003d\"prefix-label,  prefix_purple\" text\u003d\"Currently Taking\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"numberOfMods\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$numberOfMods\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"numberOfModsSuffix\" styleClass\u003d\"cell_small_label\" text\u003d\" module(s)\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel minHeight\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"currentModsPrefix\" styleClass\u003d\"cell_big_label, pink-text-label\" text\u003d\"Modules Currently Taking:\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"currentMods\" styleClass\u003d\"cell_small_label, description_text\" text\u003d\"\\$currentMods\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel minHeight\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"currentAppealsPrefix\" styleClass\u003d\"cell_big_label, pink-text-label\" text\u003d\"Appeals:\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"currentAppeals\" styleClass\u003d\"cell_small_label, description_text\" text\u003d\"\\$appeals\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel minHeight\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"previousModulesPrefix\" styleClass\u003d\"cell_big_label, pink-text-label\" text\u003d\"Modules Previously Taken:\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"previousModules\" styleClass\u003d\"cell_small_label, description_text\" text\u003d\"\\$prevMods\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 60
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background: derive(#282A36, 20%);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_small_label.description_text {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".label.cell_big_label {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".label.cell_bigger_label {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-font-size: 25px;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_small_label.green-text-label {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #4FF77A;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_small_label.yellow-text-label {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #EFF88B;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_small_label.pink-text-label {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #FA77C3;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_small_label.sky-blue-text-label {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #8BE9FD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_small_label.blue-text-label {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #86ACC9;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_small_label.red-text-label {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #CF6651;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_big_label.green-text-label {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #4FF77A;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_big_label.yellow-text-label {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #EFF88B;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_big_label.orange-text-label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #FEB86C;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_big_label.pink-text-label {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #FA77C3;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_bigger_label.green-text-label {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #4FF77A;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_bigger_label.yellow-text-label {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #EFF88B;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_bigger_label.blue-text-label {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #86ACC9;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".cell_bigger_label.pink-text-label {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: #FA77C3;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".label.prefix-label {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-font-family: \"Arial Black\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-padding: 0 1 0 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".prefix-label.prefix_green {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #4FF77A;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".prefix-label.prefix_yellow {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #EFF88B;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".prefix-label.prefix_pink {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #FA77C3;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".prefix-label.prefix_orange {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #FEB86C;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".prefix-label.prefix_sky_blue {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #8BE9FD;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".prefix-label.prefix_purple {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #B88FF2;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ".prefix-label.prefix_red {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    -fx-background-color: #990000;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 108,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"pane-with-border\" onKeyPressed\u003d\"#handleKeyPress\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox fx:id\u003d\"hotKeyHelpBar\" styleClass\u003d\"pane-with-border\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cImageView fitHeight\u003d\"40\" fitWidth\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cimage\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cImage url\u003d\"@/images/space-icon.png\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003c/image\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"SpaceLabel\" styleClass\u003d\"cell_small_label, blue-text-label\" text\u003d\"Copy URL\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cImageView fitHeight\u003d\"40\" fitWidth\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cimage\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cImage url\u003d\"@/images/esc-icon.png\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003c/image\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"closeLabel\" styleClass\u003d\"cell_small_label, blue-text-label\" text\u003d\"Close Window\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\" styleClass\u003d\"prefix-label\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 27,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/HistoryWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"600\" title\u003d\"Command History\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cImage url\u003d\"@/images/history_icon.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cURL value\u003d\"@DarkThemeHistoryWindow.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" minWidth\u003d\"600\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cLabel fx:id\u003d\"commandHistoryTitle\" styleClass\u003d\"prefix-label, prefix_purple\" text\u003d\"MAMS Command History\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cHBox fx:id\u003d\"hotKeyHelpBar\" styleClass\u003d\"pane-with-border\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cImageView fitHeight\u003d\"40\" fitWidth\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                            \u003cimage\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                \u003cImage url\u003d\"@/images/q-icon.png\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                            \u003c/image\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cLabel fx:id\u003d\"copyLabel\" styleClass\u003d\"cell_small_label, blue-text-label\" text\u003d\"Copy Command\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cHBox HBox.hgrow\u003d\"ALWAYS\"/\u003e \u003c!-- for spacing out the icons in the bar--\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cImageView fitHeight\u003d\"40\" fitWidth\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                            \u003cimage\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                \u003cImage url\u003d\"@/images/arrow-up-icon.png\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                            \u003c/image\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cImageView fitHeight\u003d\"40\" fitWidth\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                            \u003cimage\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                \u003cImage url\u003d\"@/images/arrow-down-icon.png\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                            \u003c/image\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cLabel fx:id\u003d\"navigateLabel\" styleClass\u003d\"cell_small_label, blue-text-label\" text\u003d\"Navigate Selection\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cHBox HBox.hgrow\u003d\"ALWAYS\"/\u003e \u003c!-- for spacing out the icons in the bar--\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cImageView fitHeight\u003d\"40\" fitWidth\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                            \u003cimage\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                \u003cImage url\u003d\"@/images/esc-icon.png\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                            \u003c/image\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cLabel fx:id\u003d\"closeLabel\" styleClass\u003d\"cell_small_label, blue-text-label\" text\u003d\"Close Window\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cVBox fx:id\u003d\"historyDisplay\" minWidth\u003d\"200\" minHeight\u003d\"200\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"historyDisplayPanelPlaceholder\" styleClass\u003d\"stack-pane, history-display\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                               minHeight\u003d\"75\" prefHeight\u003d\"75\" maxHeight\u003d\"75\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 83,
      "AaronLuk": 3
    }
  },
  {
    "path": "src/main/resources/view/InputOutputListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cVBox GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cPane HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cHBox spacing\u003d\"3\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cLabel fx:id\u003d\"commandPromptSymbol\" styleClass\u003d\"cell_small_label, sky-blue-text-label\" text\u003d\"\u003e\u003e \" alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cVBox VBox.vgrow\u003d\"ALWAYS\"/\u003e \u003c!-- Ensures that prompt symbol always aligns top left even if other Label elements in enclosing Hbox wraps --\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cLabel fx:id\u003d\"input\" styleClass\u003d\"cell_small_label, sky-blue-text-label\" text\u003d\"\\$input\" alignment\u003d\"TOP_LEFT\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"output\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$output\" alignment\u003d\"TOP_LEFT\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cPane HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cVBox alignment\u003d\"TOP_RIGHT\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"executionStatus\" styleClass\u003d\"cell_small_label, green-text-label\" text\u003d\"\\%executionStatus\" alignment\u003d\"TOP_RIGHT\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"timeStamp\" styleClass\u003d\"time-stamp\" text\u003d\"\\%timeStamp\" alignment\u003d\"TOP_RIGHT\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 70
    }
  },
  {
    "path": "src/main/resources/view/ItemListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  \u003cListView fx:id\u003d\"itemListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         title\u003d\"Module Appeal Management System\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003cImage url\u003d\"@/images/mams_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cHBox fx:id\u003d\"DisplayListsContainer\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"600\" prefHeight\u003d\"1000\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "          \u003cVBox fx:id\u003d\"appealList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"200\" prefWidth\u003d\"700\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cStackPane fx:id\u003d\"appealListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "          \u003cVBox fx:id\u003d\"moduleList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"200\" prefWidth\u003d\"700\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "          \u003cVBox fx:id\u003d\"studentList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"200\" prefWidth\u003d\"700\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cStackPane fx:id\u003d\"studentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 24,
      "-": 58
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cHBox HBox.hgrow\u003d\"ALWAYS\"/\u003e \u003c!-- for spacing out the icons in the bar--\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"credits\" styleClass\u003d\"prefix-label, prefix_sky_blue\" text\u003d\"\\$credits\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleName\" styleClass\u003d\"cell_small_label, green-text-label\" text\u003d\"\\$moduleName\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeSlot\" styleClass\u003d\"cell_small_label, yellow-text-label\" text\u003d\"\\$timeSlot\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"lecturerNamePrefix\" styleClass\u003d\"prefix-label, prefix_sky_blue\" text\u003d\"Coordinator\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"lecturerName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$lecturerName\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cHBox spacing\u003d\"3\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"quotaPrefix\" styleClass\u003d\"prefix-label, prefix_sky_blue\" text\u003d\"Quota\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cProgressBar fx:id\u003d\"quotaBar\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"enrolment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$enrolment\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"/\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \u003cLabel fx:id\u003d\"quota\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quota\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 57,
      "cheongliyuan": 1
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"appealTags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003cHBox spacing\u003d\"3\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "          \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cLabel fx:id\u003d\"matricPrefix\" styleClass\u003d\"prefix-label, prefix_purple\" text\u003d\"Matric. No\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        \u003cLabel fx:id\u003d\"matricId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$matricId\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003cHBox spacing\u003d\"3\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "          \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cLabel fx:id\u003d\"creditsPrefix\" styleClass\u003d\"prefix-label,  prefix_purple\" text\u003d\"Allowed Credits\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cLabel fx:id\u003d\"credits\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$credits\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003cHBox spacing\u003d\"3\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "          \u003cInsets top\u003d\"1\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cLabel fx:id\u003d\"currentModulesPrefix\" styleClass\u003d\"prefix-label,  prefix_purple\" text\u003d\"Currently Taking\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cLabel fx:id\u003d\"numberOfMods\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$numberOfMods\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        \u003cLabel fx:id\u003d\"numberOfModsSuffix\" styleClass\u003d\"cell_small_label\" text\u003d\" module(s)\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 22,
      "-": 32,
      "MistyRainforest": 1
    }
  },
  {
    "path": "src/test/java/mams/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/mams/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/mams/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 4,
      "-": 132
    }
  },
  {
    "path": "src/test/java/mams/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 12,
      "-": 49
    }
  },
  {
    "path": "src/test/java/mams/commons/core/time/TimeStampTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.core.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_3;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_4;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class TimeStampTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        TimeStamp sameTimeStamp \u003d new TimeStamp(new Date("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                TIME_STAMP_1.asUnixTime()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same object -\u003e same hashcode"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(TIME_STAMP_1.hashCode(), TIME_STAMP_1.hashCode());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same internal details -\u003e same hashcode"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(TIME_STAMP_1.hashCode(), sameTimeStamp.hashCode());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different internal values -\u003e different hashcode"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNotEquals(TIME_STAMP_1, TIME_STAMP_2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different object types -\u003e different hashcode"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNotEquals(TIME_STAMP_1, Objects.hash(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        TimeStamp sameTimeStamp \u003d new TimeStamp(new Date("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                TIME_STAMP_1.asUnixTime()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(TIME_STAMP_1.equals(TIME_STAMP_1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(TIME_STAMP_1.equals(sameTimeStamp));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(TIME_STAMP_1.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(TIME_STAMP_1.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different internal values -\u003e return false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(TIME_STAMP_1.equals(TIME_STAMP_2));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(TIME_STAMP_1.equals(TIME_STAMP_3));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(TIME_STAMP_1.equals(TIME_STAMP_4));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 61
    }
  },
  {
    "path": "src/test/java/mams/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/mams_32.png\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 8,
      "-": 30
    }
  },
  {
    "path": "src/test/java/mams/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CollectionUtil.requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CollectionUtil.requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 7,
      "-": 101
    }
  },
  {
    "path": "src/test/java/mams/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 11,
      "-": 105
    }
  },
  {
    "path": "src/test/java/mams/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/java/mams/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 5,
      "-": 40
    }
  },
  {
    "path": "src/test/java/mams/commons/util/ListPointerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Although the ListPointer is primarily used to iterate a List of InputOutput"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * objects in MAMS, the unit tests will focus only on seeing if it works with String since"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * it is not within the scope of a ListPointer unit test to check if it works with InputOutput."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ListPointerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private List\u003cString\u003e stringElements;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ListPointer\u003cString\u003e stringPointer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        stringElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        stringElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        stringElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        stringPointer \u003d new ListPointer\u003cString\u003e(list);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ListPointer\u003cString\u003e emptyPointer \u003d new ListPointer\u003c\u003e(Collections.emptyList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(emptyPointer, stringPointer);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        stringPointer \u003d new ListPointer\u003cString\u003e(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        stringPointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        stringPointer \u003d new ListPointer\u003cString\u003e(list);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        stringPointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        stringPointer \u003d new ListPointer\u003cString\u003e(stringElements);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        stringPointer.add(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ListPointer firstPointer \u003d new ListPointer\u003cString\u003e(stringElements);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ListPointer firstPointerCopy \u003d new ListPointer\u003cString\u003e(stringElements);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ListPointer differentElementPointer \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ListPointer\u003cString\u003e(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(stringPointer.hasNext());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(element, stringPointer.next());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(stringPointer.hasPrevious());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(element, stringPointer.previous());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(stringPointer.hasCurrent());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(element, stringPointer.current());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(stringPointer.hasNext());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            stringPointer.next();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(stringPointer.hasPrevious());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            stringPointer.previous();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(stringPointer.hasCurrent());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            stringPointer.current();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 180
    }
  },
  {
    "path": "src/test/java/mams/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 24,
      "-": 129
    }
  },
  {
    "path": "src/test/java/mams/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.InputOutput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ReadOnlyMams;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.storage.JsonCommandHistoryStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.storage.JsonMamsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonMamsStorage mamsStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new JsonMamsStorage(temporaryFolder.resolve(\"mams.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonCommandHistoryStorage commandHistoryStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new JsonCommandHistoryStorage(temporaryFolder.resolve(\"commandHistory.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mamsStorage, userPrefsStorage, commandHistoryStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertHistorySuccess(Arrays.asList(invalidCommand), Arrays.asList(MESSAGE_UNKNOWN_COMMAND),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                Arrays.asList(false));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // delete command removed. New tests to be implemented later."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        final String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        final String expectedFeedback \u003d ListCommand.MESSAGE_LIST_APPEALS_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + ListCommand.MESSAGE_LIST_MODULES_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + ListCommand.MESSAGE_LIST_STUDENTS_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(listCommand, expectedFeedback, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertHistorySuccess(Arrays.asList(listCommand), Arrays.asList(expectedFeedback), Arrays.asList(true));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // Setup LogicManager with JsonMamsIoExceptionThrowingStub"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonMamsStorage mamsStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new JsonMamsIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionMams.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonCommandHistoryStorage commandHistoryStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new JsonCommandHistoryStorage(temporaryFolder.resolve(\"ioExceptionCommandHistory.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mamsStorage, userPrefsStorage, commandHistoryStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // Execute add command removed, to be implemented with new test later."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMams(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Asserts that the {@code CommandHistory} object within {@code LogicManager} is storing the correct sequence"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * of command inputs and command feedback. However, it is impossible to test the timestamp equality"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * exactly, so we simply retrieve it from the actual Logic and set the expectedCommandHistory"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * to the same timestamps."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param inputs List of inputs entered. Each input is assumed to be in the same index as the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * corresponding {@code outputs}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param outputs List of expected outputs received."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void assertHistorySuccess(List\u003cString\u003e inputs, List\u003cString\u003e outputs, List\u003cBoolean\u003e isSuccessfulArray) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(inputs.size(), outputs.size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        List\u003cInputOutput\u003e actualCommandHistory \u003d logic.getCommandHistory();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ArrayList\u003cInputOutput\u003e expectedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (int i \u003d 0; i \u003c inputs.size(); i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            expectedList.add(new InputOutput(inputs.get(i), outputs.get(i), isSuccessfulArray.get(i),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    actualCommandHistory.get(i).getTimeStamp()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ObservableList\u003cInputOutput\u003e expectedHistory \u003d FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                FXCollections.observableList(expectedList));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(expectedHistory, logic.getCommandHistory());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static class JsonMamsIoExceptionThrowingStub extends JsonMamsStorage {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        private JsonMamsIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        public void saveMams(ReadOnlyMams mams, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 71,
      "chensu2436": 2,
      "-": 112
    }
  },
  {
    "path": "src/test/java/mams/logic/commands/ClashCommandClashCaseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "public class ClashCommandClashCaseTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chensu2436": 4
    }
  },
  {
    "path": "src/test/java/mams/logic/commands/ClashCommandParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "public class ClashCommandParametersTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chensu2436": 4
    }
  },
  {
    "path": "src/test/java/mams/logic/commands/ClashCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "public class ClashCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chensu2436": 4
    }
  },
  {
    "path": "src/test/java/mams/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different showHistory value -\u003e return false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different hideOutputHistory value -\u003e return false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true, false)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, false, true)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different showHistory value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different hideOutputHistory value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false, false).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true, false).hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, false, true).hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 18,
      "-": 48
    }
  },
  {
    "path": "src/test/java/mams/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_PREVMODS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Mams;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.student.StudentContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String VALID_CREDITS_AMY \u003d \"20\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String VALID_CREDITS_BOB \u003d \"20\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String VALID_PREVMODS_AMY \u003d \"CS1010, CS2101\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String VALID_PREVMODS_BOB \u003d \"CS1010, CS2105\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String VALID_MATRICID_AMY \u003d \"A0169928E\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String VALID_MATRICID_BOB \u003d \"A0124123Q\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String VALID_TAG_APPEAL1 \u003d \"C000001\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String VALID_TAG_APPEAL2 \u003d \"C000002\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String CREDITS_DESC_AMY \u003d \" \" + PREFIX_CREDITS + VALID_CREDITS_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String CREDITS_DESC_BOB \u003d \" \" + PREFIX_CREDITS + VALID_CREDITS_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String PREVMODS_DESC_AMY \u003d \" \" + PREFIX_PREVMODS + VALID_PREVMODS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String PREVMODS_DESC_BOB \u003d \" \" + PREFIX_PREVMODS + VALID_PREVMODS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MATRICID_DESC_AMY \u003d \" \" + PREFIX_STUDENT + VALID_MATRICID_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String MATRICID_DESC_BOB \u003d \" \" + PREFIX_STUDENT + VALID_MATRICID_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_APPEAL2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_APPEAL1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String INVALID_CREDITS_DESC \u003d \" \" + PREFIX_CREDITS + \"6\"; // too low"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String INVALID_PREVMODS_DESC \u003d \" \" + PREFIX_PREVMODS + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public static final String INVALID_MATRICID_DESC \u003d \" \" + PREFIX_STUDENT; // empty string not allowed for matricId"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * - MAMS, filtered student list and selected student in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Mams expectedMams \u003d new Mams(actualModel.getMams());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(expectedMams, actualModel.getMams());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the appeal at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code model}\u0027s MAMS."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static void showAppealAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAppealList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Appeal appeal \u003d model.getFilteredAppealList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredAppealList(appeal::equals);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(1, model.getFilteredAppealList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the module at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code model}\u0027s MAMS."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static void showModuleAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredModuleList(module::equals);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(1, model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code model}\u0027s MAMS."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        model.updateFilteredStudentList(new StudentContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show all appeals in MAMS."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static void showAllAppeals(Model model) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredAppealList(Model.PREDICATE_SHOW_ALL_APPEALS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show all modules in MAMS."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static void showAllModules(Model model) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show all students in MAMS."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static void showAllStudents(Model model) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Updates {@code model}\u0027s filtered lists to show all items in all three lists of MAMS."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static void showAll(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAllAppeals(model);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAllModules(model);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAllStudents(model);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 87,
      "chensu2436": 6,
      "-": 73,
      "MistyRainforest": 12
    }
  },
  {
    "path": "src/test/java/mams/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chensu2436": 4
    }
  },
  {
    "path": "src/test/java/mams/logic/commands/HistoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new CommandResult(HistoryCommand.SHOWING_HISTORY_MESSAGE, true, false, false, false),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(true), model,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new CommandResult(HistoryCommand.SHOWING_HISTORY_MESSAGE, true, true, false, false),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        HistoryCommand showOutput \u003d new HistoryCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        HistoryCommand hideOutput \u003d new HistoryCommand(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        HistoryCommand anotherShowOutput \u003d new HistoryCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(showOutput.equals(showOutput));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(showOutput.equals(anotherShowOutput));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(showOutput.equals(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(showOutput.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different internal values -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(showOutput.equals(hideOutput));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 49
    }
  },
  {
    "path": "src/test/java/mams/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.commands.CommandTestUtil.showAppealAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalMams.getTypicalMams;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String MESSAGE_LIST_ALL_SUCCESS \u003d ListCommand.MESSAGE_LIST_APPEALS_SUCCESS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + ListCommand.NEWLINE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + ListCommand.MESSAGE_LIST_MODULES_SUCCESS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + ListCommand.NEWLINE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + ListCommand.MESSAGE_LIST_STUDENTS_SUCCESS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String MESSAGE_LIST_APPEALS_MODULES_SUCCESS \u003d ListCommand.MESSAGE_LIST_APPEALS_SUCCESS"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + ListCommand.NEWLINE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + ListCommand.MESSAGE_LIST_MODULES_SUCCESS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String MESSAGE_LIST_APPEALS_STUDENTS_SUCCESS \u003d ListCommand.MESSAGE_LIST_APPEALS_SUCCESS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + ListCommand.NEWLINE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + ListCommand.MESSAGE_LIST_STUDENTS_SUCCESS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String MESSAGE_LIST_MODULES_STUDENTS_SUCCESS \u003d ListCommand.MESSAGE_LIST_MODULES_SUCCESS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + ListCommand.NEWLINE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + ListCommand.MESSAGE_LIST_STUDENTS_SUCCESS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model \u003d new ModelManager(getTypicalMams(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMams(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_allListsNotFiltered_showsSameLists() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // attempt listing appeals -\u003e same lists"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(true, false, false),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ListCommand.MESSAGE_LIST_APPEALS_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // attempt listing modules -\u003e same lists"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(false, true, false),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ListCommand.MESSAGE_LIST_MODULES_SUCCESS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // attempt listing students -\u003e same lists"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(false, false, true),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ListCommand.MESSAGE_LIST_STUDENTS_SUCCESS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // attempt listing all -\u003e same lists"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(true, true, true),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_ALL_SUCCESS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_appealListFilteredAndTargetedByListCommand_showsEverything() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list all items -\u003e all items listed"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(true, true, true),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_ALL_SUCCESS,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list appeals only -\u003e all items listed"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(true, false, false),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ListCommand.MESSAGE_LIST_APPEALS_SUCCESS,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list appeals and students only -\u003e all items listed"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(true, false, true),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_APPEALS_STUDENTS_SUCCESS,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list appeals and modules only -\u003e all items listed"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(true, true, false),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_APPEALS_MODULES_SUCCESS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_moduleListFilteredAndTargetedByListCommand_showsEverything() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list all items -\u003e all items listed"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(true, true, true),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_ALL_SUCCESS,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list modules only -\u003e all items listed"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(false, true, false),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ListCommand.MESSAGE_LIST_MODULES_SUCCESS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list modules and students only -\u003e all items listed"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(false, true, true),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_MODULES_STUDENTS_SUCCESS,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list appeals and modules only -\u003e all items listed"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(true, true, false),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_APPEALS_MODULES_SUCCESS,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_studentListFilteredAndTargetedByListCommand_showsEverything() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list all items -\u003e all items listed"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(true, true, true),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_ALL_SUCCESS,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list students only -\u003e all items listed"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(false, false, true),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ListCommand.MESSAGE_LIST_STUDENTS_SUCCESS,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list appeals and students only -\u003e all items listed"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(true, false, true),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_APPEALS_STUDENTS_SUCCESS,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list students and modules only -\u003e all items listed"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(false, true, true),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_MODULES_STUDENTS_SUCCESS,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_appealListFilteredButNotTargetedByListCommand_appealListRemainsFiltered() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal list filtered, not targeted for list command -\u003e appeal list remains filtered"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(false, true, true),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_MODULES_STUDENTS_SUCCESS,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_moduleListFilteredButNotTargetedByListCommand_moduleListRemainsFiltered() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // module list filtered, not targeted for list command -\u003e module list remains filtered"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(true, false, true),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_APPEALS_STUDENTS_SUCCESS,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_studentListFilteredButNotTargetedByListCommand_studentListRemainsFiltered() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // student list filtered, not targeted for list command -\u003e student list remains filtered"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showStudentAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(true, true, false),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_APPEALS_MODULES_SUCCESS,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_allListsUnfilteredAndTargetedByListCommand_showAllLists() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(new ListCommand(true, true, true),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                MESSAGE_LIST_ALL_SUCCESS,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void requireAtLeastOneTrue() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // all true -\u003e true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(ListCommand.containsAtLeastOneTrue(true, true, true, true, true));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // one true -\u003e true"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(ListCommand.containsAtLeastOneTrue(true, false, false, false));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // none true -\u003e false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(ListCommand.containsAtLeastOneTrue(false, false, false));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_listCommandInitializedWithAllFalse_throwsError() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new ListCommand(false, false, false).execute(model));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ListCommand listAll \u003d new ListCommand(true, true, true);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ListCommand listAppealModule \u003d new ListCommand(true, true, false);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ListCommand listAppeal \u003d new ListCommand(true, false, false);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(listAll.equals(listAll));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(listAll.equals(new ListCommand(true, true, true)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(listAll.equals(1));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(listAll.equals(null));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different internal values -\u003e returns false"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(listAll.equals(listAppealModule));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(listAll.equals(listAppeal));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 257
    }
  },
  {
    "path": "src/test/java/mams/logic/commands/ViewCommandParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ViewCommandParametersTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ViewCommand.ViewCommandParameters params;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void isAtLeastOneParameterPresent() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // no parameters present"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(params.isAtLeastOneParameterPresent());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal parameter present"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(params.isAtLeastOneParameterPresent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // module parameter present"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(params.isAtLeastOneParameterPresent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // student parameter present"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(params.isAtLeastOneParameterPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // two parameters present"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(params.isAtLeastOneParameterPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // all parameters present"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(params.isAtLeastOneParameterPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void settersAndGetters_setMultipleTimes_acceptLastValue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(INDEX_FIRST, params.getAppealIndex().get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_SECOND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(INDEX_SECOND, params.getAppealIndex().get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // module index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(INDEX_FIRST, params.getModuleIndex().get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_SECOND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(INDEX_SECOND, params.getModuleIndex().get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // student index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(INDEX_FIRST, params.getStudentIndex().get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_SECOND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(INDEX_SECOND, params.getStudentIndex().get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand.ViewCommandParameters sameParams \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        sameParams.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        sameParams.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        sameParams.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand.ViewCommandParameters otherParams \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        otherParams.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand.ViewCommandParameters anotherParams \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        anotherParams.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        anotherParams.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(params.equals(params));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(params.equals(sameParams));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(params.equals(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(params.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different internal values -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(params.equals(otherParams));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(params.equals(anotherParams));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 115
    }
  },
  {
    "path": "src/test/java/mams/logic/commands/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_INVALID_APPEAL_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.commands.CommandTestUtil.showAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.commands.CommandTestUtil.showAppealAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalIndexes.INDEX_MAX_INT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalMams.getTypicalMams;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ViewCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Because {@code ViewCommand#verifyAllIndexesWithinBounds}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ViewCommand.ViewCommandParameters params;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model \u003d new ModelManager(getTypicalMams(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMams(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void verifyAllIndexesWithinBounds_allWithinBound_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // if no parameters are present, then it should not throw an error"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // this is just a sanity check - ViewCommand#execute should have measures"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // to prevent acting on a empty ViewCommandParameter, which will be tested"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // in another test here."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertWithinBoundsSuccess(params, model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // module index is at one, appeal and student index not present -\u003e success"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertWithinBoundsSuccess(params, model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // student index is at one, module and appeal index not present -\u003e success"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertWithinBoundsSuccess(params, model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal index is at one, module and student index not present -\u003e success"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertWithinBoundsSuccess(params, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal and module indexes are at one, student index not present -\u003e success"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertWithinBoundsSuccess(params, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // all three indexes are one -\u003e success"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertWithinBoundsSuccess(params, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal index at the end of the list -\u003e success"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(Index.fromOneBased(model.getFilteredAppealList().size()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertWithinBoundsSuccess(params, model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // all indexes at the end of their respective list indices -\u003e success"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(Index.fromOneBased(model.getFilteredModuleList().size()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(Index.fromOneBased(model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertWithinBoundsSuccess(params, model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void verifyAllIndexesWithinBounds_outOfBounds_exceptionThrown() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal index out of bounds at an impossibly high number (Integer.MAX_VALUE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_MAX_INT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertWithinBoundsSuccess(params, model));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal index just outside bounds of list (size of list + 1)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(Index.fromOneBased(model.getFilteredAppealList().size() + 1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertWithinBoundsSuccess(params, model));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // module index out of bounds at an impossibly high number (Integer.MAX_VALUE)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_MAX_INT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertWithinBoundsSuccess(params, model));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // module index just outside bounds of list (size of list + 1)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(Index.fromOneBased(model.getFilteredModuleList().size() + 1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertWithinBoundsSuccess(params, model));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // student index out of bounds at an impossibly high number (Integer.MAX_VALUE)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_MAX_INT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertWithinBoundsSuccess(params, model));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // student index just outside bounds of list (size of list + 1)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(Index.fromOneBased(model.getFilteredStudentList().size() + 1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertWithinBoundsSuccess(params, model));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // all indexes out of bounds"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(Index.fromOneBased(model.getFilteredAppealList().size() + 1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(Index.fromOneBased(model.getFilteredModuleList().size() + 1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(Index.fromOneBased(model.getFilteredStudentList().size() + 1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertWithinBoundsSuccess(params, model));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void verifyAllTargetedListsExpandable_allExpandable_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // if no parameters are present, then it should not throw an error"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // this is just a sanity check - ViewCommand#execute should have measures"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // to prevent acting on a empty ViewCommandParameter, which will be tested"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // in another test here."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTargetedListsExpandableSuccess(params, model);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // module index is at one (list size \u003e 1), appeal and student index not present -\u003e success"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTargetedListsExpandableSuccess(params, model);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // student index is at one (list size \u003e 1), module and appeal index not present -\u003e success"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTargetedListsExpandableSuccess(params, model);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal index is at one (list size \u003e 1), module and student index not present -\u003e success"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTargetedListsExpandableSuccess(params, model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal and module indexes are at one (list sizes \u003e 1), student index not present -\u003e success"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTargetedListsExpandableSuccess(params, model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // all three indexes are one (list sizes \u003e 1) -\u003e success"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTargetedListsExpandableSuccess(params, model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal index at the end of the list (list sizes \u003e 1) -\u003e success"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(Index.fromOneBased(model.getFilteredAppealList().size()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTargetedListsExpandableSuccess(params, model);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // all indexes at the end of their respective list indices (list sizes \u003e 1) -\u003e success"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(Index.fromOneBased(model.getFilteredModuleList().size()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(Index.fromOneBased(model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTargetedListsExpandableSuccess(params, model);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void verifyAllTargetedListsExpandable_outOfBounds_exceptionThrown() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal list already in expanded form, appeal list targeted"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertTargetedListsExpandableSuccess(params, model));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal list size is zero, appeal list targeted"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredAppealList(unused -\u003e false);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertTargetedListsExpandableSuccess(params, model));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // module list already in expanded form, module list targeted"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertTargetedListsExpandableSuccess(params, model));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // module list size is zero, module list targeted"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredModuleList(unused -\u003e false);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertTargetedListsExpandableSuccess(params, model));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // student list already in expanded form, student list targeted"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertTargetedListsExpandableSuccess(params, model));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // student list size is zero, student list targeted"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredStudentList(unused -\u003e false);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertTargetedListsExpandableSuccess(params, model));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // all lists have zero size, all lists targeted"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredAppealList(unused -\u003e false);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredModuleList(unused -\u003e false);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredStudentList(unused -\u003e false);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertTargetedListsExpandableSuccess(params, model));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // all lists already in expanded form, all lists targeted"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertTargetedListsExpandableSuccess(params, model));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // some lists have size zero, others already in expanded form, all targeted"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredAppealList(unused -\u003e false);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredStudentList(unused -\u003e false);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertTargetedListsExpandableSuccess(params, model));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // one list has size zero, one list already in expanded form, one list is expandable"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredAppealList(unused -\u003e false);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e assertTargetedListsExpandableSuccess(params, model));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * It is {@code ViewCommandParser}\u0027s responsibility to check that the {@code ViewCommandParameter} object"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * contains at least one actionable Index. However, ViewCommand should defensively check the condition"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * as well."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_viewCommandParameterHasNoIndexes_throwsException() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(params);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandFailure(viewCommand,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_oneParameterWithinBounds_success() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal index within bounds (testing first index) -\u003e execute success"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String expectedAppealId \u003d expectedModel.getFilteredAppealList().get(0).getAppealId();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(params);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(viewCommand,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_SUCCESS, expectedAppealId),"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal index within bounds (testing last index) -\u003e execute success"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(expectedModel);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        final Index appealLastIndex \u003d Index.fromOneBased(expectedModel.getFilteredAppealList().size());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(appealLastIndex);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(expectedModel, appealLastIndex);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        expectedAppealId \u003d expectedModel.getFilteredAppealList().get(0).getAppealId();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        viewCommand \u003d new ViewCommand(params);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(viewCommand,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_SUCCESS, expectedAppealId),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // module index within bounds (testing first index) -\u003e execute success"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(expectedModel);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String expectedModuleId \u003d expectedModel.getFilteredModuleList().get(0).getModuleCode();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        viewCommand \u003d new ViewCommand(params);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(viewCommand,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_SUCCESS, expectedModuleId),"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // module index within bounds (testing last index) -\u003e execute success"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(expectedModel);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        final Index moduleLastIndex \u003d Index.fromOneBased(expectedModel.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(moduleLastIndex);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(expectedModel, moduleLastIndex);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        expectedModuleId \u003d expectedModel.getFilteredModuleList().get(0).getModuleCode();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        viewCommand \u003d new ViewCommand(params);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(viewCommand,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_SUCCESS, expectedModuleId),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // student index within bounds (testing first index) -\u003e execute success"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(expectedModel);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showStudentAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String expectedStudentId \u003d expectedModel.getFilteredStudentList().get(0).getMatricId().toString();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        viewCommand \u003d new ViewCommand(params);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(viewCommand,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_SUCCESS, expectedStudentId),"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // student index within bounds (testing last index) -\u003e execute success"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(expectedModel);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        final Index studentLastIndex \u003d Index.fromOneBased(expectedModel.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(studentLastIndex);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showStudentAtIndex(expectedModel, studentLastIndex);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        expectedStudentId \u003d expectedModel.getFilteredStudentList().get(0).getMatricId().toString();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        viewCommand \u003d new ViewCommand(params);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(viewCommand,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_SUCCESS, expectedStudentId),"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_multipleParametersWithinBounds_success() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal and module index within bounds -\u003e execute success"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_SECOND);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(expectedModel, INDEX_SECOND);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String expectedAppealId \u003d expectedModel.getFilteredAppealList().get(0).getAppealId();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String expectedModuleId \u003d expectedModel.getFilteredModuleList().get(0).getModuleCode();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(params);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(viewCommand,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_SUCCESS, expectedAppealId + \" \""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        + expectedModuleId),"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // all indexes within bounds -\u003e execute success"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_THIRD);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showStudentAtIndex(expectedModel, INDEX_THIRD);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String expectedStudentId \u003d expectedModel.getFilteredStudentList().get(0).getMatricId().toString();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        viewCommand \u003d new ViewCommand(params);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandSuccess(viewCommand,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_SUCCESS, expectedAppealId + \" \""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        + expectedModuleId + \" \""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        + expectedStudentId),"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // for explanation of why no lists will be updated in event of failure,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // refer to ViewCommand"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_atLeastOneParameterOutOfBounds_exceptionThrownAndNoListsUpdated() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // student index out of bounds"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_MAX_INT); // out of bounds"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandFailure(new ViewCommand(params),"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // module index out of bounds"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_MAX_INT); // out of bounds"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandFailure(new ViewCommand(params),"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model, MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal index out of bounds"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_MAX_INT); // out of bounds"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandFailure(new ViewCommand(params),"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model, MESSAGE_INVALID_APPEAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // both appeal and module index out of bounds"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_MAX_INT);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandFailure(new ViewCommand(params),"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model, MESSAGE_INVALID_APPEAL_DISPLAYED_INDEX + \"\\n\""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        + MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // all indexes out of bounds"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_MAX_INT);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandFailure(new ViewCommand(params),"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model, MESSAGE_INVALID_APPEAL_DISPLAYED_INDEX + \"\\n\""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        + MESSAGE_INVALID_MODULE_DISPLAYED_INDEX + \"\\n\""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        + MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // for explanation of why no lists will be updated in event of failure,"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // refer to ViewCommand"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void execute_atLeastOneListNotExpandableButTargeted_exceptionThrownAndNoListsUpdated() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // student list has size 0"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredStudentList(unused -\u003e false);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        expectedModel.updateFilteredStudentList(unused -\u003e false);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandFailure(new ViewCommand(params),"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model, ViewCommand.MESSAGE_NO_STUDENTS_TO_EXPAND);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // both student and module list has size 0"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(expectedModel);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredModuleList(unused -\u003e false);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredStudentList(unused -\u003e false);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        expectedModel.updateFilteredModuleList(unused -\u003e false);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        expectedModel.updateFilteredStudentList(unused -\u003e false);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandFailure(new ViewCommand(params),"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model, ViewCommand.MESSAGE_NO_MODULES_TO_EXPAND + \"\\n\""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        + ViewCommand.MESSAGE_NO_STUDENTS_TO_EXPAND);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal list is already expanded"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(expectedModel);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAppealAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandFailure(new ViewCommand(params),"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model, ViewCommand.MESSAGE_APPEAL_ALREADY_EXPANDED);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // appeal list has size 0, module list already expanded"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(model);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showAll(expectedModel);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredAppealList(unused -\u003e false);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        expectedModel.updateFilteredAppealList(unused -\u003e false);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        showModuleAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandFailure(new ViewCommand(params),"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model, ViewCommand.MESSAGE_NO_APPEALS_TO_EXPAND + \"\\n\""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        + ViewCommand.MESSAGE_MODULE_ALREADY_EXPANDED);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // all lists have size zero"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredAppealList(unused -\u003e false);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredModuleList(unused -\u003e false);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        model.updateFilteredStudentList(unused -\u003e false);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        expectedModel.updateFilteredAppealList(unused -\u003e false);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        expectedModel.updateFilteredModuleList(unused -\u003e false);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        expectedModel.updateFilteredStudentList(unused -\u003e false);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertCommandFailure(new ViewCommand(params),"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                model, ViewCommand.MESSAGE_NO_APPEALS_TO_EXPAND + \"\\n\""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        + ViewCommand.MESSAGE_NO_MODULES_TO_EXPAND + \"\\n\""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        + ViewCommand.MESSAGE_NO_STUDENTS_TO_EXPAND);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(params);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand.ViewCommandParameters sameParams \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        sameParams.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        sameParams.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        sameParams.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand sameViewCommand \u003d new ViewCommand(sameParams);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand.ViewCommandParameters otherParams \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        otherParams.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        otherParams.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand otherViewCommand \u003d new ViewCommand(otherParams);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand.ViewCommandParameters otherParams1 \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        otherParams.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        otherParams.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand otherViewCommand1 \u003d new ViewCommand(otherParams1);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(viewCommand.equals(viewCommand));"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(viewCommand.equals(sameViewCommand));"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(viewCommand.equals(1));"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(viewCommand.equals(null));"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different internal values -\u003e returns false"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(viewCommand.equals(otherViewCommand));"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(viewCommand.equals(otherViewCommand1));"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Runs {@code ViewCommand#verifyAllIndexesWithinBounds} on the given"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code params} and {@code model}, and verify that it does not throw"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * an exception"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param params used to initialize the ViewCommand object"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param model acted on by the initialized ViewCommand object"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void assertWithinBoundsSuccess(ViewCommand.ViewCommandParameters params,"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                          Model model) {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            ViewCommand v \u003d new ViewCommand(params);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            v.verifyAllSpecifiedIndexesWithinBounds(model.getFilteredAppealList(),"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    model.getFilteredModuleList(),"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    model.getFilteredStudentList());"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new AssertionError(\"Execution of this method should not fail\", ce);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Runs {@code ViewCommand#verifyAllTargetedListsExpandable} on the given"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * {@code params} and {@code model}, and verify that it does not throw"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * an exception"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param params used to initialize the ViewCommand object"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param model acted on by the initialized ViewCommand object"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void assertTargetedListsExpandableSuccess(ViewCommand.ViewCommandParameters params,"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                                          Model model) {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            ViewCommand v \u003d new ViewCommand(params);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            v.verifyAllTargetedListsExpandable(model.getFilteredAppealList(),"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    model.getFilteredModuleList(),"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    model.getFilteredStudentList());"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new AssertionError(\"Execution of this method should not fail\", ce);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 549
    }
  },
  {
    "path": "src/test/java/mams/logic/history/CommandHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.SUCCESSFUL_IO_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.SUCCESSFUL_IO_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.SUCCESS_COMMAND_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.SUCCESS_COMMAND_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.SUCCESS_COMMAND_OUTPUT_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.SUCCESS_COMMAND_OUTPUT_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.UNSUCCESSFUL_COMMAND_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.UNSUCCESSFUL_COMMAND_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.UNSUCCESSFUL_COMMAND_OUTPUT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.UNSUCCESSFUL_IO_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.UNSUCCESSFUL_IO_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void addTest1() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistory.add(SUCCESS_COMMAND_1, SUCCESS_COMMAND_OUTPUT_1, true, TIME_STAMP_1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistory.add(SUCCESS_COMMAND_2, SUCCESS_COMMAND_OUTPUT_2, true, TIME_STAMP_2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(Arrays.asList(SUCCESSFUL_IO_1, SUCCESSFUL_IO_2), this.commandHistory.getInputOutputHistory());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void addTest2() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistory.add(UNSUCCESSFUL_COMMAND_1, UNSUCCESSFUL_COMMAND_OUTPUT, false, TIME_STAMP_3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistory.add(UNSUCCESSFUL_COMMAND_2, UNSUCCESSFUL_COMMAND_OUTPUT, false, TIME_STAMP_4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(Arrays.asList(UNSUCCESSFUL_IO_1, UNSUCCESSFUL_IO_2), this.commandHistory.getInputOutputHistory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void hashCodeTest1() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistory.add(SUCCESS_COMMAND_1, SUCCESS_COMMAND_OUTPUT_1, true, TIME_STAMP_1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CommandHistory sameCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        sameCommandHistory.add(SUCCESS_COMMAND_1, SUCCESS_COMMAND_OUTPUT_1, true, TIME_STAMP_1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CommandHistory differentCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        differentCommandHistory.add(SUCCESS_COMMAND_2, SUCCESS_COMMAND_OUTPUT_2, true, TIME_STAMP_2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same object -\u003e same hashcode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(commandHistory.hashCode(), commandHistory.hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same internal values -\u003e same hashcode"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(commandHistory.hashCode(), sameCommandHistory.hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different internal values -\u003e different hashcode"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNotEquals(commandHistory.hashCode(), differentCommandHistory.hashCode());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different object types -\u003e different hashcode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNotEquals(commandHistory.hashCode(), Objects.hash(0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void hashCodeTest2() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistory.add(SUCCESS_COMMAND_1, SUCCESS_COMMAND_OUTPUT_1, true, TIME_STAMP_1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CommandHistory appendedCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        appendedCommandHistory.add(SUCCESS_COMMAND_1, SUCCESS_COMMAND_OUTPUT_1, true, TIME_STAMP_1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        appendedCommandHistory.add(SUCCESS_COMMAND_2, SUCCESS_COMMAND_OUTPUT_2, true, TIME_STAMP_2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CommandHistory anotherAppendedCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        anotherAppendedCommandHistory.add(SUCCESS_COMMAND_1, SUCCESS_COMMAND_OUTPUT_1, true, TIME_STAMP_1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        anotherAppendedCommandHistory.add(UNSUCCESSFUL_COMMAND_1, UNSUCCESSFUL_COMMAND_OUTPUT, false, TIME_STAMP_3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // internal value different -\u003e different hashcode"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNotEquals(commandHistory.hashCode(), appendedCommandHistory.hashCode());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNotEquals(commandHistory.hashCode(), anotherAppendedCommandHistory.hashCode());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.commandHistory.add(SUCCESS_COMMAND_1, SUCCESS_COMMAND_OUTPUT_1, true, TIME_STAMP_1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CommandHistory sameCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        sameCommandHistory.add(SUCCESS_COMMAND_1, SUCCESS_COMMAND_OUTPUT_1, true, TIME_STAMP_1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CommandHistory differentCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        differentCommandHistory.add(UNSUCCESSFUL_COMMAND_1, UNSUCCESSFUL_COMMAND_OUTPUT, false, TIME_STAMP_3);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // not same type, equals should return false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(commandHistory.equals(5));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(commandHistory.equals(new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // compare valid history to null, should return false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(commandHistory.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same object, returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(commandHistory.equals(commandHistory));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same internal values but different objects, returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(commandHistory.equals(sameCommandHistory));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different internal values, returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(commandHistory.equals(differentCommandHistory));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 119
    }
  },
  {
    "path": "src/test/java/mams/logic/history/InputOutputTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.SUCCESSFUL_IO_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.SUCCESSFUL_IO_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.UNSUCCESSFUL_IO_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.UNSUCCESSFUL_IO_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class InputOutputTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        InputOutput sameIo \u003d new InputOutput(SUCCESSFUL_IO_1.getInput(), SUCCESSFUL_IO_1.getOutput(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                SUCCESSFUL_IO_1.checkSuccessful(), SUCCESSFUL_IO_1.getTimeStamp());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same object -\u003e same hashcode"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(SUCCESSFUL_IO_1.hashCode(), SUCCESSFUL_IO_1.hashCode());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same internal values -\u003e same hashcode"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(SUCCESSFUL_IO_1.hashCode(), sameIo.hashCode());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different internal values -\u003e different hashcode"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNotEquals(SUCCESSFUL_IO_1.hashCode(), SUCCESSFUL_IO_2.hashCode());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different object types -\u003e different hashcode"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertNotEquals(SUCCESSFUL_IO_1.hashCode(), Objects.hash(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        InputOutput sameIo \u003d new InputOutput(SUCCESSFUL_IO_1.getInput(), SUCCESSFUL_IO_1.getOutput(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                SUCCESSFUL_IO_1.checkSuccessful(), SUCCESSFUL_IO_1.getTimeStamp());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        InputOutput slightlyDifferentIo \u003d new InputOutput(SUCCESSFUL_IO_1.getInput(), SUCCESSFUL_IO_1.getOutput(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                SUCCESSFUL_IO_1.checkSuccessful(), TIME_STAMP_3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(SUCCESSFUL_IO_1.equals(SUCCESSFUL_IO_1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertTrue(SUCCESSFUL_IO_1.equals(sameIo));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(SUCCESSFUL_IO_1.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(SUCCESSFUL_IO_1.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different internal values -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(SUCCESSFUL_IO_1.equals(slightlyDifferentIo));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(SUCCESSFUL_IO_1.equals(SUCCESSFUL_IO_2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(SUCCESSFUL_IO_1.equals(UNSUCCESSFUL_IO_1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(SUCCESSFUL_IO_1.equals(UNSUCCESSFUL_IO_2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 63
    }
  },
  {
    "path": "src/test/java/mams/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/mams/logic/parser/ClashCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static mams.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static mams.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static mams.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static mams.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static mams.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static mams.testutil.TypicalModules.CS1020;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.logic.commands.ClashCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "public class ClashCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    private ClashCommandParser parser \u003d new ClashCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public void parse_noRelevantPrefixesPresent_throwParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                \" t/1 y/1 8/ -s -all\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public void parse_someIrrelevantPrefixesPresent_throwParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // irrelevant prefix without input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" a/1 t/\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // irrelevant prefix with input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" s/1 t/1 y/1\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public void parse_emptyFields_throwParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // single prefix"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" a/\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" m/\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                ClashCommand.MESSAGE_NEED_TWO_MODULES);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" s/\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // multiple prefixes"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" s/ m/ a/\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // some empty fields"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" s/1 m/ \","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public void parse_invalidFields_throwParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" a/-2\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" s/-2\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" m/-5 m/-1\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // trailing invalid characters behind valid indexes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" a/4 sdfsdferggdsss\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" s/1 1\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // invalid integer or integer overflow"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" a/0\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" s/222222222222222222222222222\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClashCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public void parse_incorrectNumberOfFields_throwParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // checking two or more appeals"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" a/1 a/2\", ClashCommand.MESSAGE_ONLY_ONE_ITEM_ALLOWED);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" a/1 a/2 a/3 a/4\", ClashCommand.MESSAGE_ONLY_ONE_ITEM_ALLOWED);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // checking two or more students"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" s/1 s/2\", ClashCommand.MESSAGE_ONLY_ONE_ITEM_ALLOWED);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" s/1 s/2 s/3 s/4\", ClashCommand.MESSAGE_ONLY_ONE_ITEM_ALLOWED);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // only 1 module field"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" m/5\", ClashCommand.MESSAGE_NEED_TWO_MODULES);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" m/cs1231\", ClashCommand.MESSAGE_NEED_TWO_MODULES);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // more than 2 module fields"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" m/cs1231 m/cs2030 m/cs2040\", ClashCommand.MESSAGE_NEED_TWO_MODULES);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser, \" m/2 m/3 m/5 m/7\", ClashCommand.MESSAGE_NEED_TWO_MODULES);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        ClashCommand.ClashCommandParameters params \u003d new ClashCommand.ClashCommandParameters();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // valid appeal index"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseSuccess(parser, \" a/1\", new ClashCommand(params));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // valid module indices"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        params \u003d new ClashCommand.ClashCommandParameters();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        params.setModuleIndices(INDEX_FIRST, INDEX_SECOND);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseSuccess(parser, \" m/1 m/2\", new ClashCommand(params));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // valid module codes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        params \u003d new ClashCommand.ClashCommandParameters();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        params.setModuleCodes(CS1010.getModuleCode(), CS1020.getModuleCode());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseSuccess(parser, \" m/CS1010 m/CS1020\", new ClashCommand(params));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // valid student index"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        params \u003d new ClashCommand.ClashCommandParameters();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseSuccess(parser, \" s/1\", new ClashCommand(params));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chensu2436": 137
    }
  },
  {
    "path": "src/test/java/mams/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/mams/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import static mams.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.appeal.AppealContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.module.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "import mams.model.student.StudentContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public void parse_noRelevantPrefixesPresent_throwParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                \" t/1 y/1 8/ -s -all\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public void parse_someIrrelevantPrefixesPresent_returnsFindCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        List\u003cPredicate\u003e studentNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        studentNames.add(new StudentContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                new FindCommand(studentNames);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // irrelevant prefix with keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseSuccess(parser, \" s/Alice Bob t/cs1231\", expectedFindCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // irrelevant prefix without keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseSuccess(parser, \" s/Alice Bob t/ y/\", expectedFindCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public void parse_allEmptyKeywords_throwParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // single prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                \" a/\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // multiple prefixes"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                \" s/ m/\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    public void parse_someEmptyKeywords_returnsFindCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        List\u003cPredicate\u003e studentNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        studentNames.add(new StudentContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                new FindCommand(studentNames);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseSuccess(parser, \" s/Alice Bob m/ a/\", expectedFindCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        List\u003cPredicate\u003e studentNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        studentNames.add(new StudentContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "                new FindCommand(studentNames);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseSuccess(parser, \" s/Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseSuccess(parser, \" s/ \\n Alice \\n  Bob \", expectedFindCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // multiple prefixes"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        List\u003cPredicate\u003e multiplePreds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        multiplePreds.add(new StudentContainsKeywordsPredicate(Arrays.asList(\"alice\", \"bob\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        multiplePreds.add(new ModuleContainsKeywordsPredicate(Collections.singletonList(\"cs1231\")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        multiplePreds.add(new AppealContainsKeywordsPredicate(Collections.singletonList(\"unresolved\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(multiplePreds);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseSuccess(parser, \" s/alice bob m/cs1231 a/unresolved\", expectedFindCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chensu2436"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        // different ordering but same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        assertParseSuccess(parser, \" a/unresolved s/alice bob m/cs1231\", expectedFindCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 4,
      "chensu2436": 74,
      "-": 22
    }
  },
  {
    "path": "src/test/java/mams/logic/parser/HistoryCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class HistoryCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private HistoryCommandParser parser \u003d new HistoryCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void parse_noParameters_returnsHistoryCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser, \" \", new HistoryCommand());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void parse_hideOutput_returnsHistoryCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" \" + HistoryCommandParser.PREFIX_HIDE_OUTPUT.toString(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new HistoryCommand(true));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 25
    }
  },
  {
    "path": "src/test/java/mams/logic/parser/ListCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void parse_emptyArg_listAllMamsItems() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ListCommand(true, true, true));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void parse_whiteSpaceEmptyArgs_listAllMamsItems() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"         \","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ListCommand(true, true, true));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void parse_validArgsOnlyOneParamPresent_listOneItemTypeOnly() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list appeals only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" -a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ListCommand(true, false, false));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list modules only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" -m\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ListCommand(false, true, false));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list students only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" -s\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ListCommand(false, false, true));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void parse_validArgsCombinationOfParams_parseSuccessful() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list appeals and modules only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" -a -m \","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ListCommand(true, true, false));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list modules and students only"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" -s -m\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ListCommand(false, true, true));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list students and appeals only"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" -s -a\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ListCommand(true, false, true));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // duplicate tags, list student and appeals"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" -s -a -s -a -s -a -s -a\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ListCommand(true, false, true));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // duplicate tags, list modules"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" -m -m -m -m -m -m -m -m\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ListCommand(false, true, false));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // list all three items"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" -s -a -m\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ListCommand(true, true, true));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 76
    }
  },
  {
    "path": "src/test/java/mams/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.Credits;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.MatricId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.PrevMods;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private static final String INVALID_CREDITS \u003d \"20\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private static final String INVALID_MATRICID \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private static final String INVALID_PREVMODS \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private static final String VALID_CREDITS \u003d \"20\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private static final String VALID_MATRICID \u003d \"A0169982H\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private static final String VALID_PREVMODS \u003d \"CS2030, CS1231\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void parseCredits_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCredits((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void parseCredits_validValueWithoutWhitespace_returnsCredits() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Credits expectedCredits \u003d new Credits(VALID_CREDITS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertEquals(expectedCredits, ParserUtil.parseCredits(VALID_CREDITS));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void parseCredits_validValueWithWhitespace_returnsTrimmedCredits() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        String creditsWithWhitespace \u003d WHITESPACE + VALID_CREDITS + WHITESPACE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Credits expectedCredits \u003d new Credits(VALID_CREDITS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertEquals(expectedCredits, ParserUtil.parseCredits(creditsWithWhitespace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void parseMatricId_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMatricId((String) null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void parseMatricId_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMatricId(INVALID_MATRICID));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void parseMatricId_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        MatricId expectedMatricId \u003d new MatricId(VALID_MATRICID);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertEquals(expectedMatricId, ParserUtil.parseMatricId(VALID_MATRICID));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void parseMatricId_validValueWithWhitespace_returnsTrimmedMatricId() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        String matricIdWithWhitespace \u003d WHITESPACE + VALID_MATRICID + WHITESPACE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        MatricId expectedMatricId \u003d new MatricId(VALID_MATRICID);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertEquals(expectedMatricId, ParserUtil.parseMatricId(matricIdWithWhitespace));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void parsePrevMods_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePrevMods((String) null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void parsePrevMods_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePrevMods(INVALID_PREVMODS));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void parsePrevMods_validValueWithoutWhitespace_returnsPrevMods() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        PrevMods expectedPrevMods \u003d new PrevMods(VALID_PREVMODS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertEquals(expectedPrevMods, ParserUtil.parsePrevMods(VALID_PREVMODS));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void parsePrevMods_validValueWithWhitespace_returnsTrimmedPrevMods() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        String prevModsWithWhitespace \u003d WHITESPACE + VALID_PREVMODS + WHITESPACE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        PrevMods expectedPrevMods \u003d new PrevMods(VALID_PREVMODS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertEquals(expectedPrevMods, ParserUtil.parsePrevMods(prevModsWithWhitespace));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 11,
      "-": 141,
      "MistyRainforest": 40
    }
  },
  {
    "path": "src/test/java/mams/logic/parser/ViewCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void parse_emptyArgs_throwParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"     \","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void parse_noRelevantPrefixesPresent_throwParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" t/1 y/1 8/ -s -all\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void parse_parametersSpecifiedWithoutSeparatingSpace_throwParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"a/2s/2\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/2s/2m/5\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void parse_allSpecifiedFieldsInvalid_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // negative integers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/-2\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" s/-2\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" m/-5\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/-2 s/-2\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/-2 s/-2 m/-5\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // nonsense String fields"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/alkfaklm\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/eafalm^ s/-eafaklm@ m/1222\u0026\u0026%\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // trailing invalid characters behind valid indexes"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/2   aedadea   s/2 m/5\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // integer overflow"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/2147483648\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/222222222222222222222222222\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void parse_someFieldsValidButAtLeastOneOtherFieldInvalid_throwParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // negative indexes"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/-2 s/2 m/5\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/2 s/-2 m/5\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/2 s/2 m/-5\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/-2 s/2\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" m/2 s/ada\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/2.2 s/2.3 m/1.3\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" s/alfkaflkan m/5\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void parse_allIndexesSpecifiedValid_parseSuccess() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand.ViewCommandParameters params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/1 m/1 s/1\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different ordering of prefixes -\u003e same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" s/1 a/1 m/1\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // different index values"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_SECOND);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_THIRD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" s/3 m/2 a/1\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void parse_oneValidFieldSpecified_parseSuccess() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand.ViewCommandParameters params;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // only appeal specified"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/1\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // only module specified"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" m/1\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // only student specified"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" s/1\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    void parse_someValidFieldsSpecified_parseSuccess() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand.ViewCommandParameters params;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // only appeal and module specified"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/1 m/1\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // only appeal and student specified"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/1 s/1\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // only student and module specified"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" s/1 m/1\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand.ViewCommandParameters params;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // one field repeated"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_SECOND);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/1 a/2 a/3 a/4 a/1 a/3 a/2\","
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // two fields repeated"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_THIRD);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/1 m/2 a/1 m/2 m/3 a/1\","
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // three fields repeated"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_THIRD);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/1 s/3 s/2 m/2  s/2 a/1  s/2 m/2 s/1 m/3 a/1\","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ViewCommand.ViewCommandParameters params;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/aakflm m/1 s/1 a/1\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/1 m/aeakfam s/1 m/1\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params \u003d new ViewCommand.ViewCommandParameters();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setAppealIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setModuleIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        params.setStudentIndex(INDEX_FIRST);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \" a/1 m/1 s/afafakfmaklm s/1\","
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new ViewCommand(params));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 265
    }
  },
  {
    "path": "src/test/java/mams/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setMamsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setMamsFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 6,
      "-": 15
    }
  },
  {
    "path": "src/test/java/mams/model/appeal/AppealTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.model.appeal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.testutil.TypicalAppeals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class AppealTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void isSameAppeal() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Assertions.assertTrue(TypicalAppeals.APPEAL1.isSameAppeal(TypicalAppeals.APPEAL1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test void isValidAppealId() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //invalid code"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertFalse(Appeal.isValidAppealId(\"\")); // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertFalse(Appeal.isValidAppealId(\"CS\")); // C with another letter only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertFalse(Appeal.isValidAppealId(\"C23\")); // less than 6 numbers"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertFalse(Appeal.isValidAppealId(\"C1233333314\")); // more than 6 numbers"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //valid code"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertTrue(Appeal.isValidAppealId(\"C000002\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertTrue(Appeal.isValidAppealId(\"C123456\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertTrue(Appeal.isValidAppealId(\"C123232\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Test void isValidAppealType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //invalid code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertFalse(Appeal.isValidAppealType(\"\")); // empty string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertFalse(Appeal.isValidAppealType(\"addmodule\")); // no spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertFalse(Appeal.isValidAppealType(\"drop  module\")); // more than 1 space"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertFalse(Appeal.isValidAppealType(\"increase workload2\")); // with numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        //valid code"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertTrue(Appeal.isValidAppealType(\"add MOdule\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertTrue(Appeal.isValidAppealType(\"DroP mOdUle\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertTrue(Appeal.isValidAppealType(\"INCREASE WORKLOAD\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void isEqual() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 50,
      "cheongliyuan": 1
    }
  },
  {
    "path": "src/test/java/mams/model/appeal/UniqueAppealListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.model.appeal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.exceptions.AppealNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.exceptions.DuplicateAppealException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.testutil.TypicalAppeals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class UniqueAppealListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private final UniqueAppealList uniqueAppealList \u003d new UniqueAppealList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void contains_nullAppeal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueAppealList.contains(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void contains_appealNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertFalse(uniqueAppealList.contains(TypicalAppeals.APPEAL1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void contains_appealInList_returnsTrue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        uniqueAppealList.add(TypicalAppeals.APPEAL1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertTrue(uniqueAppealList.contains(TypicalAppeals.APPEAL1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void add_nullAppeal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueAppealList.add(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void add_duplicateAppeal_throwsDuplicateAppealException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        uniqueAppealList.add(TypicalAppeals.APPEAL1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Assert.assertThrows(DuplicateAppealException.class, () -\u003e uniqueAppealList.add(TypicalAppeals.APPEAL1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void remove_nullAppeal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueAppealList.remove(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void remove_studentDoesNotExist_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Assert.assertThrows(AppealNotFoundException.class, () -\u003e uniqueAppealList.remove(TypicalAppeals.APPEAL1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void remove_existingAppeal_removesAppeal() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        uniqueAppealList.add(TypicalAppeals.APPEAL1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        uniqueAppealList.remove(TypicalAppeals.APPEAL1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        UniqueAppealList expectedUniqueAppealList \u003d new UniqueAppealList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertEquals(expectedUniqueAppealList, uniqueAppealList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 64
    }
  },
  {
    "path": "src/test/java/mams/model/module/ModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.student.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "class ModuleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void isValidModuleCode() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //invalid code"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertFalse(Module.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertFalse(Module.isValidModuleCode(\"CS\")); // CS letters only"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertFalse(Module.isValidModuleCode(\"CS123\")); // less than 4 numbers"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertFalse(Module.isValidModuleCode(\"CS12314\")); // more than 4 numbers"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //valid code"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertTrue(Module.isValidModuleCode(\"CS1020\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertTrue(Module.isValidModuleCode(\"CS9999\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertTrue(Module.isValidModuleCode(\"CS0000\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void isValidModuleName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //@@adapted from author MistyRainforest"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertFalse(Module.isValidModuleName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertFalse(Module.isValidModuleName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertFalse(Module.isValidModuleName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertFalse(Module.isValidModuleName(\"Programming* Methology\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertTrue(Name.isValidName(\"programming methology\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertTrue(Name.isValidName(\"cs research methodology 2\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertTrue(Name.isValidName(\"Intro to Psych Class\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertTrue(Name.isValidName(\"Module with Long Nameeeeeeeeeeeeeeeeeeeee\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void isValidQuota() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //invalid code"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertFalse(Module.isValidQuota(\"-5\")); // negative numbers"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //valid code"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertTrue(Module.isValidQuota(\"100\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void isValidTimeSlot() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //invalid code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertFalse(Module.isValidTimeSlot(null)); // null input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertFalse(Module.isValidTimeSlot(\"\")); // empty time slot"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertFalse(Module.isValidTimeSlot(\"32,74\")); // invalid time slot"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertFalse(Module.isValidTimeSlot(\"-5,20\")); // invalid time slot"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //valid code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertTrue(Module.isValidTimeSlot(\"23,24,55,54\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void isSameModule() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //Assertions.assertTrue(TypicalModules.CS1010.isSameModule(TypicalModules.CS1010));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //null -\u003e return false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        //Assertions.assertFalse(TypicalModules.CS1020.isSameModule(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "cheongliyuan": 75
    }
  },
  {
    "path": "src/test/java/mams/model/student/CreditsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "package mams.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public class CreditsTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Credits(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void constructor_invalidCredits_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        String invalidCredits \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Credits(invalidCredits));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void isValidCredits() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // null credits number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Credits.isValidCredits(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // invalid credits numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(Credits.isValidCredits(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // valid credits numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertTrue(Credits.isValidCredits(\"20\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertTrue(Credits.isValidCredits(\"20\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertTrue(Credits.isValidCredits(\"24\")); // long credits numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MistyRainforest": 38
    }
  },
  {
    "path": "src/test/java/mams/model/student/MatricIdTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "package mams.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static mams.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public class MatricIdTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MatricId(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void constructor_invalidMatricId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        String invalidMatricId \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new MatricId(invalidMatricId));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void isValidMatricId() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // null matricId"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MatricId.isValidMatricId(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // invalid matricId"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(MatricId.isValidMatricId(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(MatricId.isValidMatricId(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // valid matricId"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertTrue(MatricId.isValidMatricId(\"A0189999Q\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertTrue(MatricId.isValidMatricId(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertTrue(MatricId.isValidMatricId(\"Matric ID\")); // long matricId"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MistyRainforest": 36
    }
  },
  {
    "path": "src/test/java/mams/model/student/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 6,
      "-": 35
    }
  },
  {
    "path": "src/test/java/mams/model/student/PrevModsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "package mams.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "public class PrevModsTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new PrevMods(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void constructor_invalidPrevMods_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        String invalidPrevMods \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new PrevMods(invalidPrevMods));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public void isValidPrevMods() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // null prevMods"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e PrevMods.isValidPrevMods(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // blank prevMods"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertFalse(PrevMods.isValidPrevMods(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        // valid prevMods"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        assertTrue(PrevMods.isValidPrevMods(\"CS2030, CS1231\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MistyRainforest": 55
    }
  },
  {
    "path": "src/test/java/mams/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"CS1010\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 25,
      "cheongliyuan": 6
    }
  },
  {
    "path": "src/test/java/mams/storage/JsonAdaptedAppealTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.testutil.TypicalAppeals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class JsonAdaptedAppealTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static final String INVALID_APPEAL_ID \u003d \"C!22222\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static final String INVALID_APPEAL_TYPE \u003d \"addmod\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static final String INVALID_ACADEMIC_YEAR \u003d \"2019\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static final int INVALID_WORKLOAD \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static final String INVALID_MATRICID \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static final String VALID_APPEAL_ID \u003d TypicalAppeals.APPEAL2.getAppealId();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static final String VALID_APPEAL_TYPE \u003d TypicalAppeals.APPEAL2.getAppealType();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static final String VALID_STUDENT_ID \u003d TypicalAppeals.APPEAL2.getStudentId();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static final String VALID_ACADEMIC_YEAR \u003d TypicalAppeals.APPEAL2.getAcademicYear();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static final int VALID_WORKLOAD \u003d TypicalAppeals.APPEAL2.getStudentWorkload();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d TypicalAppeals.APPEAL2.getAppealDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String VALID_MODULES \u003d TypicalAppeals.APPEAL2.getModuleToDrop();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static final boolean VALID_IS_RESOLVED \u003d TypicalAppeals.APPEAL2.isResolved();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static final String VALID_REMARK \u003d TypicalAppeals.APPEAL2.getRemark();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void toModelType_validAppealDetails_returnsAppeal() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        JsonAdaptedAppeal appeal \u003d new JsonAdaptedAppeal(TypicalAppeals.APPEAL2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Assertions.assertEquals(TypicalAppeals.APPEAL2, appeal.toModelType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void toModelType_invalidAppealId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        JsonAdaptedAppeal appeal \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                new JsonAdaptedAppeal(INVALID_APPEAL_ID, VALID_APPEAL_TYPE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        VALID_STUDENT_ID, VALID_ACADEMIC_YEAR,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        VALID_WORKLOAD, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        VALID_MODULES, VALID_MODULES,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        VALID_MODULES, VALID_MODULES,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        false, \"pending\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        VALID_REMARK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        String expectedMessage \u003d Appeal.MESSAGE_CONSTRAINTS_APPEAL_ID;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, appeal::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void toModelType_nullID_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        JsonAdaptedAppeal appeal \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                new JsonAdaptedAppeal(null, VALID_APPEAL_TYPE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        VALID_STUDENT_ID, VALID_ACADEMIC_YEAR,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        VALID_WORKLOAD, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        VALID_MODULES, VALID_MODULES,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        VALID_MODULES, VALID_MODULES,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        false, \"pending\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        VALID_REMARK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedAppeal.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                \"appealId\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, appeal::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "AaronLuk": 64
    }
  },
  {
    "path": "src/test/java/mams/storage/JsonAdaptedInputOutputTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.SUCCESSFUL_IO_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.UNSUCCESSFUL_IO_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.InputOutput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class JsonAdaptedInputOutputTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String BLANK_STRING \u003d \"     \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MISSING_INPUT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            String.format(JsonAdaptedInputOutput.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    JsonAdaptedInputOutput.INPUT_PROPERTY_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MISSING_OUTPUT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            String.format(JsonAdaptedInputOutput.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    JsonAdaptedInputOutput.OUTPUT_PROPERTY_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String MISSING_TIME_STAMP \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            String.format(JsonAdaptedInputOutput.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    JsonAdaptedInputOutput.TIME_STAMP_PROPERTY_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void toLogicType_validParams_returnsInputOutput() throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonAdaptedInputOutput inputOutput \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new JsonAdaptedInputOutput(SUCCESSFUL_IO_1.getInput(), SUCCESSFUL_IO_1.getOutput(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        SUCCESSFUL_IO_1.checkSuccessful(), SUCCESSFUL_IO_1.getTimeStamp().asUnixTime());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        InputOutput test \u003d inputOutput.toLogicType();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(test, SUCCESSFUL_IO_1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        inputOutput \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new JsonAdaptedInputOutput(UNSUCCESSFUL_IO_1.getInput(), UNSUCCESSFUL_IO_1.getOutput(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        UNSUCCESSFUL_IO_1.checkSuccessful(), UNSUCCESSFUL_IO_1.getTimeStamp().asUnixTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(inputOutput.toLogicType(), UNSUCCESSFUL_IO_1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void toLogicType_nullInput_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonAdaptedInputOutput inputOutput \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new JsonAdaptedInputOutput(null, SUCCESSFUL_IO_1.getOutput(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        SUCCESSFUL_IO_1.checkSuccessful(), SUCCESSFUL_IO_1.getTimeStamp().asUnixTime());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(IllegalValueException.class, MISSING_INPUT, inputOutput::toLogicType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void toLogicType_nullOutput_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonAdaptedInputOutput inputOutput \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new JsonAdaptedInputOutput(SUCCESSFUL_IO_1.getInput(), null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        SUCCESSFUL_IO_1.checkSuccessful(), SUCCESSFUL_IO_1.getTimeStamp().asUnixTime());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(IllegalValueException.class, MISSING_OUTPUT, inputOutput::toLogicType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * it is possible to have a empty String user input, but MAMS will never give an empty String output."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void toLogicType_emptyOutput_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonAdaptedInputOutput inputOutput \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new JsonAdaptedInputOutput(SUCCESSFUL_IO_1.getInput(), EMPTY_STRING,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        SUCCESSFUL_IO_1.checkSuccessful(), SUCCESSFUL_IO_1.getTimeStamp().asUnixTime());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(IllegalValueException.class, MISSING_OUTPUT, inputOutput::toLogicType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * it is possible to have a blank space user input, but MAMS will never give a blank space output."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void toLogicType_blankOutput_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonAdaptedInputOutput inputOutput \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                new JsonAdaptedInputOutput(SUCCESSFUL_IO_1.getInput(), BLANK_STRING,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        SUCCESSFUL_IO_1.checkSuccessful(), SUCCESSFUL_IO_1.getTimeStamp().asUnixTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(IllegalValueException.class, MISSING_OUTPUT, inputOutput::toLogicType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 83
    }
  },
  {
    "path": "src/test/java/mams/storage/JsonCommandHistoryStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.SUCCESSFUL_IO_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.SUCCESSFUL_IO_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalCommandHistory.getTypicalCommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.ReadOnlyCommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class JsonCommandHistoryStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonCommandHistoryStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void readCommandHistory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCommandHistory(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCommandHistory\u003e readCommandHistory(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return new JsonCommandHistoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                .readCommandHistory(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertFalse(readCommandHistory(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCommandHistory("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"notJsonFormatCommandHistory.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void readCommandHistory_invalidCommandHistory_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCommandHistory(\"invalidCommandHistory.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void readCommandHistory_invalidAndValidCommandHistory_throwDataConversionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCommandHistory("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                \"invalidAndValidCommandHistory.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void readAndSaveCommandHistory_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CommandHistory original \u003d getTypicalCommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonCommandHistoryStorage jsonCommandHistoryStorage \u003d new JsonCommandHistoryStorage(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        jsonCommandHistoryStorage.saveCommandHistory(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ReadOnlyCommandHistory readBack \u003d jsonCommandHistoryStorage.readCommandHistory(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(original, new CommandHistory(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        original.add(SUCCESSFUL_IO_1.getInput(), SUCCESSFUL_IO_1.getOutput(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                SUCCESSFUL_IO_1.checkSuccessful(), SUCCESSFUL_IO_1.getTimeStamp());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        jsonCommandHistoryStorage.saveCommandHistory(original, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        readBack \u003d jsonCommandHistoryStorage.readCommandHistory(filePath).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(original, new CommandHistory(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        original.add(SUCCESSFUL_IO_2.getInput(), SUCCESSFUL_IO_2.getOutput(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                SUCCESSFUL_IO_2.checkSuccessful(), SUCCESSFUL_IO_2.getTimeStamp());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        jsonCommandHistoryStorage.saveCommandHistory(original); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        readBack \u003d jsonCommandHistoryStorage.readCommandHistory().get(); // file path not specified"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(original, new CommandHistory(readBack));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void saveCommandHistory_nullCommandHistory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCommandHistory(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Saves {@code commandHistory} at the specified {@code filePath}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void saveCommandHistory(ReadOnlyCommandHistory commandHistory, String filePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            new JsonCommandHistoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    .saveCommandHistory(commandHistory, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void saveCommandHistory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCommandHistory(new CommandHistory(), null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 115
    }
  },
  {
    "path": "src/test/java/mams/storage/JsonSerializableCommandHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.TypicalCommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class JsonSerializableCommandHistoryTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \"data\", \"JsonSerializableCommandHistoryTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final Path TYPICAL_COMMAND_HISTORY_FILE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalCommandHistory.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final Path INVALID_COMMAND_HISTORY_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidCommandHistory.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void toLogicType_typicalCommandHistoryFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonSerializableCommandHistory dataFromFile \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                JsonUtil.readJsonFile(TYPICAL_COMMAND_HISTORY_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                        JsonSerializableCommandHistory.class).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CommandHistory commandHistoryFromFile \u003d dataFromFile.toLogicType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        CommandHistory typicalCommandHistory \u003d TypicalCommandHistory.getTypicalCommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(commandHistoryFromFile, typicalCommandHistory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void toLogicType_invalidCommandHistoryFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        JsonSerializableCommandHistory dataFromFile \u003d JsonUtil.readJsonFile(INVALID_COMMAND_HISTORY_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                JsonSerializableCommandHistory.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toLogicType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 41
    }
  },
  {
    "path": "src/test/java/mams/storage/JsonSerializableMamsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "public class JsonSerializableMamsTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            \"data\", \"JsonSerializableMamsTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private static final Path TYPICAL_STUDENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalStudentsMams.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private static final Path INVALID_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentMams.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentMams.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        JsonSerializableMams dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_FILE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                JsonSerializableMams.class).get();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongliyuan": 27
    }
  },
  {
    "path": "src/test/java/mams/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        userPrefs.setMamsFilePath(Paths.get(\"mams.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 13,
      "-": 110
    }
  },
  {
    "path": "src/test/java/mams/testutil/AppealBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * A utility class to help with building Appeal objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class AppealBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String DEFAULT_APPEAL_ID \u003d \"C000001\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String DEFAULT_APPEAL_TYPE \u003d \"add module\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String DEFAULT_STUDENT_ID \u003d \"A0180000A\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String DEFAULT_ACADEMIC_YEAR \u003d \"AY2019\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final int DEFAULT_WORKLOAD \u003d 20;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"I want to graduate early\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String DEFAULT_PREVIOUS_MODULE \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String DEFAULT_NEW_MODULE \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String DEFAULT_MODULE_TO_ADD \u003d \"CS2100\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String DEFAULT_MODULE_TO_DROP \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final boolean DEFAULT_RESOLVED \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final String DEFAULT_RESULT \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String appealId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String appealType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String studentId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String academicYear;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private int workLoad;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String appealDescription;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String previousModule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String newModule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String moduleToAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String moduleToDrop;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private boolean isResolved;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String result;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Initializes the AppealBuilder with the data of {@code appealToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public AppealBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        appealId \u003d DEFAULT_APPEAL_ID;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        appealType \u003d DEFAULT_APPEAL_TYPE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        studentId \u003d DEFAULT_STUDENT_ID;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        academicYear \u003d DEFAULT_ACADEMIC_YEAR;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        workLoad \u003d DEFAULT_WORKLOAD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        appealDescription \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        previousModule \u003d DEFAULT_PREVIOUS_MODULE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        newModule \u003d DEFAULT_NEW_MODULE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        moduleToAdd \u003d DEFAULT_MODULE_TO_ADD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        moduleToDrop \u003d DEFAULT_MODULE_TO_DROP;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        isResolved \u003d DEFAULT_RESOLVED;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        result \u003d DEFAULT_RESULT;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 53
    }
  },
  {
    "path": "src/test/java/mams/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/mams/testutil/MamsBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Mams;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A utility class to help with building MAMS objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " *     {@code Mams ab \u003d new MamsBuilder().withStudent(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class MamsBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Mams mams;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public MamsBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        mams \u003d new Mams();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public MamsBuilder(Mams mams) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.mams \u003d mams;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Adds a new {@code Student} to the {@code Mams} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public MamsBuilder withStudent(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        mams.addStudent(student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Mams build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return mams;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 34
    }
  },
  {
    "path": "src/test/java/mams/testutil/ModuleBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS1010\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String DEFAULT_MODULE_NAME \u003d \"Programming Methodology\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String DEFAULT_MODULE_DESCRIPTION \u003d \"Test description\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String DEFAULT_LECTURER_NAME \u003d \"Tung Kum Hoe Anthony\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String DEFAULT_TIME_SLOT \u003d \"1,2,45,46\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final String DEFAULT_QUOTA \u003d \"100\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private String moduleName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private String moduleDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private String lecturerName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private String timeSlot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private String quota;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private Set\u003cTag\u003e students;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleCode \u003d DEFAULT_MODULE_CODE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleName \u003d DEFAULT_MODULE_NAME;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleDescription \u003d DEFAULT_MODULE_DESCRIPTION;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        lecturerName \u003d DEFAULT_LECTURER_NAME;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        timeSlot \u003d DEFAULT_TIME_SLOT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        quota \u003d DEFAULT_QUOTA;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        students \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleCode \u003d moduleToCopy.getModuleCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleName \u003d moduleToCopy.getModuleName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        moduleDescription \u003d moduleToCopy.getModuleDescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        lecturerName \u003d moduleToCopy.getLecturerName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        timeSlot \u003d moduleToCopy.getTimeSlot();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        quota \u003d Integer.toString(moduleToCopy.getQuotaInt());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        students \u003d new HashSet\u003c\u003e(moduleToCopy.getStudents());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Sets the {@code moduleCode} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public ModuleBuilder withModuleCode(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.moduleCode \u003d name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Sets the {@code moduleName} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public ModuleBuilder withModuleName(String moduleName) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Sets the {@code MatricId} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public ModuleBuilder withModuleDescription(String moduleDescription) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.moduleDescription \u003d moduleDescription;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Sets the {@code lecturerName} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public ModuleBuilder withLecturerName(String lecturerName) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.lecturerName \u003d lecturerName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Sets the {@code timeSlot} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public ModuleBuilder withTimeSlot(String timeSlot) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Sets the {@code timeSlot} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public ModuleBuilder withQuota(String quota) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.quota \u003d quota;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Parses the {@code students} into a {@code Set\u003cTag\u003e} and set it to the {@code Module} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public ModuleBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        this.students \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * Returns a module for testing"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     * @return Module"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return new Module(moduleCode, moduleName, moduleDescription, lecturerName,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "                timeSlot, quota, students);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongliyuan": 117
    }
  },
  {
    "path": "src/test/java/mams/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/mams/testutil/StudentBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.Credits;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.MatricId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.PrevMods;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String DEFAULT_CREDITS \u003d \"18\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String DEFAULT_PREVMODS \u003d \"CS1010, CS2105\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final String DEFAULT_MATRICID \u003d \"A0179930Y\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private Credits credits;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private PrevMods prevMods;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    private MatricId matricId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        credits \u003d new Credits(DEFAULT_CREDITS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        prevMods \u003d new PrevMods(DEFAULT_PREVMODS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        matricId \u003d new MatricId(DEFAULT_MATRICID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        credits \u003d studentToCopy.getCredits();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        prevMods \u003d studentToCopy.getPrevMods();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        matricId \u003d studentToCopy.getMatricId();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public StudentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Sets the {@code MatricId} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public StudentBuilder withMatricId(String matricId) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.matricId \u003d new MatricId(matricId);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Sets the {@code Credits} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public StudentBuilder withCredits(String credits) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.credits \u003d new Credits(credits);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "     * Sets the {@code PrevMods} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public StudentBuilder withPrevMods(String prevMods) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        this.prevMods \u003d new PrevMods(prevMods);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        return new Student(name, credits, prevMods, matricId, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 16,
      "-": 51,
      "MistyRainforest": 26
    }
  },
  {
    "path": "src/test/java/mams/testutil/StudentUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        sb.append(CliSyntax.PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        sb.append(CliSyntax.PREFIX_CREDITS + student.getCredits().value + \" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "        sb.append(CliSyntax.PREFIX_PREVMODS + student.getPrevMods().value + \" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chensu2436"
        },
        "content": "        sb.append(CliSyntax.PREFIX_STUDENT + student.getMatricId().value + \" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        student.getTags().stream().forEach("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            s -\u003e sb.append(CliSyntax.PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 23,
      "chensu2436": 1,
      "MistyRainforest": 2
    }
  },
  {
    "path": "src/test/java/mams/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the middle index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the last index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the student in the {@code model}\u0027s student list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static Student getStudent(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/mams/testutil/TypicalAppeals.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class TypicalAppeals {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final Appeal APPEAL1 \u003d new Appeal(\"C000001\" ,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"add module\", \"A0180000A\", \"AY2019\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            20, \"I want to graduate early\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"\", \"\", \"CS2100\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"\", false, \"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final Appeal APPEAL2 \u003d new Appeal(\"C000002\" ,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"drop module\", \"A0180001A\", \"AY2019\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            20, \"I want to take another module\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"\", \"\", \"\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"CS2103\", false, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final Appeal APPEAL3 \u003d new Appeal(\"C000003\" ,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"increase workload\", \"A0180003A\", \"AY2019\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            20, \"I want to overload\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"\", \"\", \"\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"\", false, \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static final Appeal APPEAL4 \u003d new Appeal(\"C000004\" ,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"add module\", \"A0180002A\", \"AY2019\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            20, \"I want to clear prerequisites\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"\", \"\", \"CS2105\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \"\", false, \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static List\u003cAppeal\u003e getTypicalAppeals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPEAL1, APPEAL2, APPEAL3, APPEAL4));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 38
    }
  },
  {
    "path": "src/test/java/mams/testutil/TypicalCommandHistory.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_3;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_4;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_5;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalTimeStamps.TIME_STAMP_6;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.history.InputOutput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Utility class for building a sample CommandHistory populated with dummy InputOutput data"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * for testing purposes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class TypicalCommandHistory {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // Defined explicitly instead of imported to reduce dependencies"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String SUCCESS_COMMAND_1 \u003d \"list\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String SUCCESS_COMMAND_OUTPUT_1 \u003d \"Listed all appeals\\nListed all modules\\nListed all students\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String SUCCESS_COMMAND_2 \u003d \"list -a\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String SUCCESS_COMMAND_OUTPUT_2 \u003d \"Listed all appeals\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String UNSUCCESSFUL_COMMAND_1 \u003d \"afoaref\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String UNSUCCESSFUL_COMMAND_2 \u003d \"cs2103\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String UNSUCCESSFUL_COMMAND_OUTPUT \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final InputOutput SUCCESSFUL_IO_1 \u003d new InputOutput(SUCCESS_COMMAND_1, SUCCESS_COMMAND_OUTPUT_1,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            true, TIME_STAMP_1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final InputOutput SUCCESSFUL_IO_2 \u003d new InputOutput(SUCCESS_COMMAND_2, SUCCESS_COMMAND_OUTPUT_2,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            true, TIME_STAMP_2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final InputOutput UNSUCCESSFUL_IO_1 \u003d new InputOutput(UNSUCCESSFUL_COMMAND_1,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            UNSUCCESSFUL_COMMAND_OUTPUT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            TIME_STAMP_3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final InputOutput UNSUCCESSFUL_IO_2 \u003d new InputOutput(UNSUCCESSFUL_COMMAND_2,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            UNSUCCESSFUL_COMMAND_OUTPUT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            TIME_STAMP_4);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // not used as part of #getTypicalCommandHistory()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String SUCCESSFUL_COMMAND_3 \u003d \"list -a -s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String SUCCESSFUL_COMMAND_OUTPUT_3 \u003d \"Listed all appeals\\nListed all students\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String SUCCESSFUL_COMMAND_4 \u003d \"list -s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String SUCCESSFUL_COMMAND_OUTPUT_4 \u003d \"Listed all students\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final InputOutput SUCCESSFUL_IO_3 \u003d new InputOutput(SUCCESSFUL_COMMAND_3,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            SUCCESSFUL_COMMAND_OUTPUT_3,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            true,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            TIME_STAMP_5);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final InputOutput SUCCESSFUL_IO_4 \u003d new InputOutput(SUCCESSFUL_COMMAND_4,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            SUCCESSFUL_COMMAND_OUTPUT_4,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            true,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            TIME_STAMP_6);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private TypicalCommandHistory() {} // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static CommandHistory getTypicalCommandHistory() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return new CommandHistory(Arrays.asList(SUCCESSFUL_IO_1, SUCCESSFUL_IO_2,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                UNSUCCESSFUL_IO_1, UNSUCCESSFUL_IO_2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 67
    }
  },
  {
    "path": "src/test/java/mams/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // not-so-typical index. added for out-of-bounds checking in ViewCommand. can be used for other tests as well."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Index INDEX_MAX_INT \u003d Index.fromZeroBased(Integer.MAX_VALUE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 7,
      "-": 7
    }
  },
  {
    "path": "src/test/java/mams/testutil/TypicalMams.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalAppeals.getTypicalAppeals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalModules.getTypicalModules;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.TypicalStudents.getTypicalStudents;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.Mams;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.appeal.Appeal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Utility class for building a sample MAMS populated with some data from {@code TypicalAppeals},"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * {@code TypicalModules}, and {@code TypicalStudents}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class TypicalMams {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns an {@code Mams} with all the typical students."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static Mams getTypicalMams() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Mams ab \u003d new Mams();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (Appeal appeal : getTypicalAppeals()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            ab.addAppeal(appeal);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            ab.addModule(module);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 34
    }
  },
  {
    "path": "src/test/java/mams/testutil/TypicalModules.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "import mams.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final Module CS1010 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            .withModuleCode(\"CS1010\").withModuleName(\"Programming Methodology\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            .withModuleDescription(\"test1\").withLecturerName(\"Tung Kum Hoe Anthony\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            .withTimeSlot(\"1,2,45,46,47\").withQuota(\"100\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            .withTags(\"A6614133H\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final Module CS1231 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            .withModuleCode(\"CS1231\").withModuleName(\"Discrete Structures\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            .withModuleDescription(\"test2\").withLecturerName(\"Terence Sim\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            .withTimeSlot(\"1,2,45,46,47\").withQuota(\"150\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            .withTags(\"A6614133H\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    public static final Module CS1020 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            .withModuleCode(\"CS1020\").withModuleName(\"Data Structures and Algorithms Is\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            .withModuleDescription(\"test3\").withLecturerName(\"Tan Sun Teck\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            .withTimeSlot(\"21,20,57,58,59\").withQuota(\"200\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "            .withTags(\"A5802229\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    private TypicalModules() {} // prevents instantiation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS1010, CS1231, CS1020));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 3,
      "cheongliyuan": 31
    }
  },
  {
    "path": "src/test/java/mams/testutil/TypicalStudents.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withMatricId(\"A0156273R\").withPrevMods(\"CS2030, CS1231\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withCredits(\"20\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withMatricId(\"A01527367W\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withPrevMods(\"CS2030, CS1231\").withCredits(\"20\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\").withCredits(\"20\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withPrevMods(\"CS2030, CS1231\").withMatricId(\"A01527367W\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\").withCredits(\"20\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withPrevMods(\"CS2030, CS1231\").withMatricId(\"A01527367W\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\").withCredits(\"20\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withPrevMods(\"CS2030, CS1231\").withMatricId(\"A01527367W\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\").withCredits(\"20\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withPrevMods(\"CS2030, CS1231\").withMatricId(\"A01527367W\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\").withCredits(\"20\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withPrevMods(\"CS2030, CS1231\").withMatricId(\"A01884932E\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withCredits(\"20\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withPrevMods(\"CS2030, CS1231\").withMatricId(\"A01527367W\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withCredits(\"20\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withPrevMods(\"CS2030, CS1231\").withMatricId(\"A012362987E\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withName(CommandTestUtil.VALID_NAME_AMY).withCredits(CommandTestUtil.VALID_CREDITS_AMY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withPrevMods(CommandTestUtil.VALID_PREVMODS_AMY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            .withMatricId(CommandTestUtil.VALID_MATRICID_AMY).withTags(CommandTestUtil.VALID_TAG_APPEAL2).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withName(CommandTestUtil.VALID_NAME_BOB).withCredits(CommandTestUtil.VALID_CREDITS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withPrevMods(CommandTestUtil.VALID_PREVMODS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MistyRainforest"
        },
        "content": "            .withMatricId(CommandTestUtil.VALID_MATRICID_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            .withTags(CommandTestUtil.VALID_TAG_APPEAL1, CommandTestUtil.VALID_TAG_APPEAL2)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongliyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 14,
      "-": 22,
      "cheongliyuan": 2,
      "MistyRainforest": 23
    }
  },
  {
    "path": "src/test/java/mams/testutil/TypicalTimeStamps.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.commons.core.time.TimeStamp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Utility class for holding typical time-stamps used for MAMS testing."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class TypicalTimeStamps {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String VALID_TIME_STRING \u003d \"[2019-11-01|00:30:02]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String VALID_TIME_STRING_2 \u003d \"[2019-11-30|10:30:02]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String VALID_TIME_STRING_3 \u003d \"[2019-11-01|12:30:02]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String VALID_TIME_STRING_4 \u003d \"[2020-12-01|00:05:02]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String VALID_TIME_STRING_5 \u003d \"[2021-08-25|22:05:02]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String VALID_TIME_STRING_6 \u003d \"[2100-12-11|03:05:02]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String INVALID_TIME_STRING_7 \u003d \"wewlfkwmlgfkwmf\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String INVALID_TIME_STRING_8 \u003d \"\u0026\u0026@$%@$EF\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String INVALID_TIME_STRING_9 \u003d \"I love to suffer through all these tests\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // UNIX TIME in milliseconds. Used to construct the sample TimeStamps below."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final long UNIX_TIME_1 \u003d 1572540862;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final long UNIX_TIME_2 \u003d 1572559161;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final long UNIX_TIME_3 \u003d 1572650862;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final long UNIX_TIME_4 \u003d 1572780456;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final long UNIX_TIME_5 \u003d 1572599999;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final long UNIX_TIME_6 \u003d 1572600000;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // TimeStamp\u0027s 1-4 are the ones being used in TypicalCommandHistory"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final TimeStamp TIME_STAMP_1 \u003d new TimeStamp(new Date(UNIX_TIME_1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final TimeStamp TIME_STAMP_2 \u003d new TimeStamp(new Date(UNIX_TIME_2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final TimeStamp TIME_STAMP_3 \u003d new TimeStamp(new Date(UNIX_TIME_3));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final TimeStamp TIME_STAMP_4 \u003d new TimeStamp(new Date(UNIX_TIME_4));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // extra TimeStamp\u0027s that are not part of TypicalCommandHistory"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final TimeStamp TIME_STAMP_5 \u003d new TimeStamp(new Date(UNIX_TIME_5));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final TimeStamp TIME_STAMP_6 \u003d new TimeStamp(new Date(UNIX_TIME_6));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private TypicalTimeStamps() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 42
    }
  },
  {
    "path": "src/test/java/mams/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/mams/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package mams.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static mams.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import mams.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import mams.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import mams.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003cfx:root type\u003d\"TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 2,
      "-": 5
    }
  }
]
