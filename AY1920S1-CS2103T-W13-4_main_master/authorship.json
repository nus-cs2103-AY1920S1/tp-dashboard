[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d Budget Buddy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W13-4/main[image:https://travis-ci.org/AY1920S1-CS2103T-W13-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Budget Buddy is a desktop expense manager, capable of tracking your expenses, income and loans."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* It aims to be the number one application of choice for **computing students** at the **National University of Singapore**."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* User interaction occurs chiefly through a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* The original source of the code is the AddressBook-Level3 project created by https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "thwnus": 2,
      "kenneth-fung": 3,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "mainClassName \u003d \u0027budgetbuddy.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    archiveName \u003d \u0027budgetbuddy.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        \u0027site-name\u0027: \u0027Budget Buddy\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-W13-4/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 1,
      "thwnus": 3,
      "-": 150
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Budget Buddy was developed by the https://github.com/AY1920S1-CS2103T-W13-4[W13-4] team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Tee Hao Wei"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::thwnus.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "{empty}[https://github.com/thwnus[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Role: Code Quality, Integration +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Responsibilities: Scripting Engine, Transaction Reports"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Daryl Koh Yi Kai"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::cambrian-dk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "{empty}[http://github.com/cambrian-dk[github]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Role: Developer, Testing +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Responsibilities: Transactions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Chong Guang Jun"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::tcgj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "{empty}[http://github.com/tcgj[github]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "{empty}[\u003c\u003ctcgj#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Role: Developer, Tracking, UI +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Responsibilities: Rule Engine"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Chen Jiehan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::ChenJiehan318.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "{empty}[http://github.com/ChenJiehan318[github]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Role: Developer, Scheduling  +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Responsibilities: Accounts, Categories"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Kenneth Fung Chen Yu"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::kenneth-fung.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "{empty}[http://github.com/kenneth-fung[github]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Role: Team Lead, Documentation +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Responsibilities: Loans"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "tcgj": 9,
      "kenneth-fung": 19,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-W13-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* *Email us* : You can also reach us at `ay1920s1-cs2103t-w13-4@protonmail.com`"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 1,
      "thwnus": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d Budget Buddy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "By: `CS2103T W13-4`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/budgetbuddy/Main.java[`Main`] and link:{repoURL}/src/main/java/budgetbuddy/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*API* : link:{repoURL}/src/main/java/budgetbuddy/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/budgetbuddy/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tcgj"
        },
        "content": "link:{repoURL}/src/main/java/budgetbuddy/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tcgj"
        },
        "content": ".  `Logic` uses the `CommandLineParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tcgj"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a loan)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tcgj"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as switching the current panel on display."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tcgj"
        },
        "content": ".Interactions Inside the Logic Component for the `account delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tcgj"
        },
        "content": "NOTE: The lifeline for `AccountDeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*API* : link:{repoURL}/src/main/java/budgetbuddy/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* stores Budget Buddy\u0027s data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* exposes multiple unmodifiable `ObservableLists` that can be \u0027observed\u0027 e.g. the `ListPanels` in UI are bound to these lists so that the UI automatically updates when the data in the lists change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*API* : link:{repoURL}/src/main/java/budgetbuddy/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* can save Budget Buddy\u0027s data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Classes used by multiple components are in the `budgetbuddy.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "// tag::accounts[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d\u003d Accounts Feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "The Accounts Feature allows the users to manage their accounts."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "It is managed by `AccountsManager`, with `Account` objects stored internally in a `Accounts` and `filteredAccounts`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "The following class diagram demonstrates the association between the `AccountsManager` and `Account` objects"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "(miscellaneous methods such as getters and setters are omitted):"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "image::AccountClassDiagram.png[]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Each `Account` object has the following attributes:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `name:Name` -- The name of account created."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `description:Description` -- A description of the account to describe the use of the account."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `transactionList:TransactionList` -- The list of transactions associated with the account."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "To facilitate the manipulation of `Account` objects, `AccountsManager` implements the following operations:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `AccountsManager#updateFilteredAccountList(Predicate\u003cAccount\u003e predicate)` -- Updates the current predicate of `filteredAccounts` to `predicate`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `AccountsManager#getFilteredAccountList()` -- Gets `filteredAccounts`, representing the accounts in `accounts` after filtering."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `AccountsManage#resetFilteredAccountList()` -- Reset `filteredAccounts` so that all accounts present in `accounts` exist in `filteredAccounts`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `AccountsManage#getAccounts()` -- Gets `accounts`, representing the accounts in `accounts`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `AccountsManage#size()` -- Gets the length of the `accounts`, representing the number of accounts currently in `accounts`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `AccountsManage#addAccount(Account toAdd)` -- Adds the `Account toAdd` to `accounts`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `AccountsManage#deleteAccount(Account toDelete)` -- Deletes the account at `Index toDelete` from `accounts`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `AccountsManage#editAccount(Index toEdit, Account editedAccount)` -- Edits the account at `Index Edit` to match `Account editedAccount`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Each user-given command makes use of one or more of the above operations."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "For example, `account edit` will call `AccountsManager#resetFilteredAccountList` to update the `filteredAccounts`,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "so that all accounts present in `accounts` will be present in `filteredAccounts`, then `AccountsManager#editAccount` to edit the targeted account,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "finally `AccountsManager#getFilteredAccountList()` to display the remaining accounts."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "After each command, the state of `accounts` is saved in the file `accounts.json`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " `accounts.json` itself is stored on the local hard disk in a `data` folder, which is in the same directory as `budgetbuddy.jar`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Given below is an example usage scenario and how the `AccountsManager` behaves at each step."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "If `accounts.json` exists on the hard disk, its data is loaded into `accounts`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Otherwise, `accounts.json` is created and the `AccountsManager` initializes with an `accounts` containing a default account."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Step 2. The user executes the command `account add n/Japan trip d/expense spent in Japan` to add a new account."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "This creates a new account `toAdd` with the `name` as Japan trip and `description` as expense spent in Japan."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "`AccountsManager#addAccount(Account toAdd)` is then called and `toAdd` is added to `accounts`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "`filteredAccountList` will be automatically updated to match `accounts`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "The following sequence diagram illustrates how the process of adding an account works:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "image::AccountSequenceDiagram.png[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "In general, the rest of the operations work using a similar sequence of steps."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Some commands might create a new `Account` object (as shown above) while others might just use the `Index` of an account."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Step 3. The user executes the command `account find trip` to find account contains the keyword trip specified."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "First, `AccountsManager#resetFilteredAccountList` is called, updating `filteredAccounts` to match the `accounts`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "`AccountsManager#updateFilteredAccountList` is then called, setting the predicate of `filteredAccounts` according to the input parameters."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Finally, `AccountsManager#getFilteredAccounts` is called."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "An immutable version of `filteredAccounts` (filtered) is retrieved and displayed to the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "In this case, an account with the `name` as Japan trip and `description` as expense spent in Japan will be displayed."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Step 4. The user executes the command `loan delete 2` to delete the second account in the `accounts`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Firstly, `AccountsManager#resetFilteredAccountList` will be called to update the `filteredAccounts`,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "so that all accounts present in `accounts` will be present in `filteredAccounts`,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "then `AccountsManager#deleteAccount` will be called to delete `toDelete` account from `accounts`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Step 5. The user executes the command `loan edit 3 n/food` to edit the `name` of the first account in the list."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "This creates a new `editedAccount` identical to the third account in `accounts`, except that `editedAccount` has a `name` of food."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "`AccountsManager#editAccount(Index toEdit, Account editedAccount)` is then called,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "where `toEdit` is the index of the third account in `accounts`,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "and `toEdit` is replaced with `editedAccount`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "The following activity diagram summarizes the process when the user executes the command `account edit`:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "image::AccountActivityDiagram.png[]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "For the commands `account edit`, `account delete`,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "if the user targets an account outside of the list (e.g. index greater than list size)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "an error message will be displayed."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Interaction with ui - the list retrieved by `LogicManager`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "In the mainWindow of ui, `AccountTab` is associated with a list of accounts. However, two lists of accounts are required."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "One stores all the current accounts present in `accounts`, the other one stores the `filteredAccounts` with the filtered accounts after `account find` executes."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* **Alternative 1 (current choice)**: `AccountTab` is only associated with `filteredAccounts` as `filteredAccounts` stores all accounts."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "After each command, `AccountsManager#resetFilteredAccountList` is called to reset the predicate to be true, so that `filteredAccounts` matches `accounts`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "** Pros: Only one list of accounts is associated with `LogicManager`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "** Cons: It is counter-intuitive as `filteredAccounts` is supposed to stored the accounts that have been selected."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* **Alternative 2**: `AccountListPanel` is associated with both `filteredAccounts` and `accounts`, and the display of the list switches when necessary."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "** Pros: Easy to understand and align with the common sense."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "** Cons: Hard to implement."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "// end::accounts[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "// tag::loans[]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Loans Feature"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The Loans feature exists outside of the Account/Transaction mechanisms."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "It adds a separate `LoansManager` alongside the main `AccountsManager`, with `Loan` objects stored internally in an `internalList`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The following class diagram demonstrates the association between the `LoansManager` and `Loan` objects"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "(miscellaneous methods such as getters and setters are omitted):"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::LoanClassDiagram.png[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The `Debtor` class and `debtors` list belonging to `LoansManager` have been omitted to reduce complexity."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Both will be depicted later when discussing the `loan split` command."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Each `Loan` object has the following attributes:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `person:Person` -- The person to whom the loan belongs."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `amount:Amount` -- The amount of money loaned."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `direction:Direction` -- The direction of the loan (either *in* or *out*)."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `status:Status` -- The status of the loan (either *paid* or *unpaid*)."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `date:Date` -- The date of the loan."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `description:Description` -- A description of the loan."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "To facilitate the manipulation of `Loan` objects, `LoansManager` implements the following operations:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `LoansManager#updateFilteredList(Predicate\u003cLoan\u003e predicate)` -- Updates the current predicate of `filteredLoans` to `predicate`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `LoansManager#sortLoans(Comparator\u003cLoan\u003e sorter)` -- Sorts `internalList` using the given `sorter`."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `LoansManager#getFilteredLoans()` -- Gets `filteredLoans`, representing the loans in `internalList` after filtering."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `LoansManager#addLoan(Loan toAdd)` -- Adds the `Loan toAdd` to `internalList`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `LoansManager#editLoan(Index toEdit, Loan editedLoan)` -- Edits the loan at `Index toEdit` to match `Loan editedLoan`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `LoansManager#deleteLoan(Index toDelete)` -- Deletes the loan at `Index toDelete` from `internalList`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Each user-given command makes use of one or more of the above operations."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "For example, `loan delete` will call `LoansManager#deleteLoan` to delete the targeted loan(s), then `LoansManager#getFilteredLoans` to display the remaining loans."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "After each command, the state of `internalList` is saved in the file `loans.json`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`loans.json` itself is stored on the local hard disk in a `data` folder, which is in the same directory as `budgetbuddy.jar`."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Given below is an example usage scenario and how the `LoansManager` behaves at each step."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "If `loans.json` exists on the hard disk, its data is loaded into `internalList`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Otherwise, `loans.json` is created and the `LoansManager` initializes with an `internalList` containing a few sample loans."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 2. The user executes the command `loan out p/John x/4.20` to add a new loan."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "This creates a new loan `toAdd` of `amount` 4.20 `out` to the `person` John, with the current `date` being used as the user did not provide one."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`LoansManager#addLoan(Loan toAdd)` is then called and `toAdd` is added to `internalList`."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The following sequence diagram illustrates how the process of adding a loan works:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::LoanSequenceDiagram.png[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "In general, the rest of the operations work using a similar sequence of steps."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Some commands might create a new `Loan` object (as shown above) while others might just use the `Index` of a loan."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 3. The user executes the command `loan list out p/John w/1/11/19 s/x` to see all loans `out` to `John` dated `1/11/19`, sorted by amount."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "First, `LoansManager#sortLoans` is called, sorting `internalList` by the amount of each loan."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`LoansManager#updateFilteredList` is then called, setting the predicate of `filteredLoans` according to the input parameters."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Finally, `LoansManager#getFilteredLoans` is called."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "An immutable version of `filteredLoans` (filtered and sorted as per user input) is retrieved and displayed to the user."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 4. The user executes the command `loan edit 1 x/500` to edit the `amount` of the first loan in the list."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "This creates a new `editedLoan` identical to the first loan in `internalList`, except that `editedLoan` has an `amount` of 500."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`LoansManager#editLoan(Index toEdit, Loan editedLoan)` is then called,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "where `toEdit` is the index of the first loan in `internalList`,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "and `toEdit` is replaced with `editedLoan`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 5. The user executes the command `loan paid 1` to update the status of the first loan in the list to *paid*."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "While the command syntax is different, `LoansManager#editLoan(Index toEdit, Loan editedLoan)` is reused"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "with an `editedLoan` identical to the target loan at `Index toEdit` - except for its `Status`, which is set to `Status.PAID`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`LoansManager#editLoan` is reused here since changing the status of a loan is functionally identical to editing its other properties."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The command syntax differs only to make the app more user-friendly."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The command `loan unpaid` works identically to `loan paid`, except that the `Status` of `editedLoan` is set to `Status.UNPAID`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 6. The user executes the command `loan delete 1` to delete the first loan in the list."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`LoansManager#deleteLoan(Index toDelete)` is called,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "where `toDelete` is the index of the first loan in `internalList`,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "and the loan at index `toDelete` is removed from `internalList`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "For the commands `loan paid`, `loan unpaid` and `loan delete`,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "if the user targets a loan outside of the list (e.g. index greater than list size)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "an error message will be displayed."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Multi-Loan Targeting"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The user can target and act on multiple loans with a single command."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "For example, `loan paid 1 3 4` can be used to mark the first, third and fourth loans in `internalList` as *paid*."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Alternatively or additionally, `loan paid p/John p/Mary` can also be used"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "to mark all the loans of the persons John and Mary in `internalList`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The `LoansManager` handles this by executing the appropriate operation repeatedly."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "In the case of `loan paid 1 3 4`, `LoansManager#editLoan` is called once for each of the three loans."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "If any of the targeted loan indices cannot be found by the `LoansManager` in `internalList`, they are added to a `missingLoanIndices` list."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The `missingLoanIndices` list is then displayed to the user after all other loans have been acted upon,"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "notifying them that the loans with those indices could not be found."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Multi-loan targeting is implemented for the commands `loan paid`, `loan unpaid` and `loan delete`."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "In the case of `loan delete`, since the indices of loans in the list would change after each deletion, targeted indices are decremented after each deletion."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Loan Splitting"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Loan splitting exists as a command that the user can execute."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Its main purpose is to split a large, initially unbalanced group payment equally among the group\u0027s members."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The following example scenario should clarify the purpose of the command:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "John, Mary and Peter go out for dinner."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The meal costs $100, so Peter pays $90 and Mary covers the remaining $10."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "However, the three want to split the bill equally among themselves."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "John executes the command `loan split p/John p/Mary p/Peter x/0 x/10 x/90`."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Budget Buddy then outputs a list of the necessary payments between the three."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "From this list, John can now see that he owes Peter *$33.33* and that Mary owes Peter *$23.33*."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "To display the results of the calculations, `LoansManager` holds a list of `debtors` containing `Debtor` objects."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The following class diagram illustrates the relationship between the `LoansManager` and the `Debtor` class:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::LoanSplitClassDiagram.png[]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The `LoansManager` in the above diagram is the same `LoansManager` as the one in the class diagram containing the `Loan` class."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The `Debtor` class and its associations were not depicted earlier as they are used only for the `loan split` command."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Each `Debtor` object has the following attributes:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `debtor:Person` -- The person who owes money to one or more creditors."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `creditors:HashMap\u003cPerson, Amount\u003e` -- A list of persons that the `debtor` owes money to, mapped to the amount of money owed."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Each entry in the `HashMap` represents a creditor, with their name as the `Person` key and the amount owed as the corresponding `Amount` value."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`LoansManager` also implements the `getDebtors` and `setDebtors` operations to get/set the `debtors` list."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`setDebtors` is used in `LoanSplitCommand#execute` to hold the `Debtor` objects created for the latest execution of `loan split`."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "To display the results of the command, `getDebtors` is then called through the `Logic` component by the `Ui` component."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Given below is an example scenario to demonstrate how the calculations are performed in `LoanSplitCommand#execute`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 1. The user executes the command `loan split p/John p/Mary p/Peter p/Bruce p/Thomas x/0 x/20 x/90 x/110 x/50 me/Mary d/For dinner`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 2. `LoanSplitCommandParser` parses each `p/\u003cperson\u003e` into a `Person` object and each `x/\u003camount\u003e` into an `Amount` object."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "A `List\u003cPerson\u003e` and `List\u003cAmount\u003e` are created to hold the `Person` and `Amount` objects."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Next, `me/Mary` is parsed into an `Optional\u003cPerson\u003e` object and `d/For dinner` is parsed into an `Optional\u003cDescription\u003e` object."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "A new `LoanSplitCommand` object is then created, with the two lists and two `Optional` objects passed to its constructor."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 3. `LoanSplitCommand` constructs a `HashMap\u003cPerson, Amount\u003e personAmountMap` using `List\u003cPerson\u003e` and `List\u003cAmount\u003e`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "It then begins the calculation of results using the following algorithm."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ". Each `Person` in `personAmountMap` is assigned an individual `balance`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Each balance is calculated using the `Person` \u0027s `Amount` value in `personAmountMap` minus the ideal amount paid `perPerson`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "With the example command executed above, ideal amount `perPerson` would be *$54* (derived from `270 / 5`)."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ". Using `CollectionUtil#generateCombinations`, a list of all possible sub-groups (combinations) of persons is generated."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "With the example command executed above, the number of sub-groups for the 5 persons would be *32*."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ". For each sub-group of persons, if the sum of their balances is *zero*, then the following steps are performed:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ".. Take the persons with the smallest and biggest balances: the `debtor` and `creditor` respectively."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ".. Transfer money between the two such that one or both of their balances reaches zero."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The person(s) with a balance of zero are then removed, and a record of the `debtor`, `creditor` and `amountTransferred` is stored in a `List\u003cDebtorCreditorAmount\u003e`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ".. Repeat until the sub-group contains less than two persons."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ". After every sub-group has been processed, `List\u003cDebtorCreditorAmount\u003e` is used to create the final `List\u003cDebtor\u003e` stored in `LoansManager`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 4. As the example command executed above included the optional `me/Mary` and `d/For dinner`, all debts involving the person with the name `Mary` are used to create loans with the description `For dinner`."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "These loans are added to `internalList` in `LoansManager` using `LoansManager#addLoan`."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 5. The list of `debtors` in `LoansManager` is displayed to the user."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Using the example command executed above, the display will show that `John` owes `Bruce` *$54*, `You` (`Mary`, the user) owe `Peter` *$34*, and `Thomas` owes `Peter` and `Bruce` *$2* each."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The following activity diagram summarizes the process described above:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::LoanSplitActivityDiagram.png[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Structure of the loan - person interaction"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* **Alternative 1 (current choice)**: `LoansManager` stores `internalList`; each `Loan` references a `Person`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** Pros: Easy to implement and understand."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** Cons: Takes a longer time to get all the loans belonging to a person."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* **Alternative 2**: `LoansManager` stores `persons` list; each `Person` stores `LoanList`; each `Loan` references `Person`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** Pros: Easy to retrieve the person of each loan and retrieve all the loans belonging to a person."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** Cons: Circular dependency and high coupling, potentially leading to lower testability and a higher bug count."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "// end::loans[]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tcgj"
        },
        "content": "// tag::rules[]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Rules Feature"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tcgj"
        },
        "content": "The Rules feature exists as an integration onto the Transaction system. It makes use"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tcgj"
        },
        "content": "of syntax processing, together with scripts to provide an automation solution to"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tcgj"
        },
        "content": "repetitive tasks when adding transactions."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Rules are defined with a pair of predicate and action, where an action is performed"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tcgj"
        },
        "content": "given that the predicate returns true. This predicate-action split allows us to decouple"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tcgj"
        },
        "content": "testing from performing, which helps to increase reusability of individual predicates"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tcgj"
        },
        "content": "and actions."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Basic attributes and operators are exposed to provide users a way of writing simple"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tcgj"
        },
        "content": "tests on transactions without having to manually check and make changes. Storing rules"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tcgj"
        },
        "content": "works similarly to LoansManager, where individual rules are stored in a"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tcgj"
        },
        "content": "`RuleManager` which manages all CRUD operations."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tcgj"
        },
        "content": "All rules are stored in in a JSON file formatted to be retrieved and parsed by the"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tcgj"
        },
        "content": "application when relaunched."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tcgj"
        },
        "content": "The following class diagram illustrates the structure of the rule model and how it"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tcgj"
        },
        "content": "integrates with the logic."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "tcgj"
        },
        "content": "image::RuleClassDiagram.png[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "tcgj"
        },
        "content": "_TODO: class diagram_"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tcgj"
        },
        "content": "image::RuleSequenceDiagram.png[]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tcgj"
        },
        "content": "_TODO: sequence diagram_"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "tcgj"
        },
        "content": "image::RuleActivityDiagram.png[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tcgj"
        },
        "content": "_TODO: activity diagram_"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "tcgj"
        },
        "content": "_TODO: design considerations_"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "tcgj"
        },
        "content": "// end::rules[]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "thwnus"
        },
        "content": "// tag::importexport[]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d Import and export"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "thwnus"
        },
        "content": "The import functionality takes in a file and parses it into ``Transaction``s."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "thwnus"
        },
        "content": "All of the supported formats are comma-separated value (CSV) files. The bulk of"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "thwnus"
        },
        "content": "the work is parsing the different ways the different banks represent the same data,"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "thwnus"
        },
        "content": "and mapping each column from bank transaction export into the fields contained by"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Budget Buddy ``Transaction``s."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "thwnus"
        },
        "content": "The following class diagram illustrates the design of the import and export function."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "thwnus"
        },
        "content": "_TODO: Class diagram_"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "thwnus"
        },
        "content": "_TODO_"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "thwnus"
        },
        "content": "// end::importexport[]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "thwnus"
        },
        "content": "// tag::scripts[]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d Scripting"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "thwnus"
        },
        "content": "The scripting engine works independently of the rest of the application."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "thwnus"
        },
        "content": "At its core, it uses the Nashorn ECMAScript 5.1 engine bundled with Java 11 to"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "thwnus"
        },
        "content": "evaluate scripts."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "thwnus"
        },
        "content": "A set of convenience functions are provided to make basic tasks, such as manipulating"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "thwnus"
        },
        "content": "transactions and accounts, easier. The full model and UI are nevertheless exposed to"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "thwnus"
        },
        "content": "scripts, and scripts are able to access any classes provided in the Java 11 standard"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "thwnus"
        },
        "content": "library, as well as any dependencies included in the application."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "thwnus"
        },
        "content": "There is a simple mechanism to store scripts to be run in future. This works together"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "thwnus"
        },
        "content": "with rules to give the ability to have complex predicates and actions outside of"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "thwnus"
        },
        "content": "those supported inherently by the program. This also works with aliases to allow,"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "thwnus"
        },
        "content": "in effect, custom commands to be created."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "thwnus"
        },
        "content": "The following class diagram illustrates the design of the scripting engine and model."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "thwnus"
        },
        "content": "_TODO: Class diagram_"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "thwnus"
        },
        "content": "_TODO_"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "thwnus"
        },
        "content": "// end::scripts[]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "thwnus"
        },
        "content": "// tag::aliases[]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d Aliases"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "thwnus"
        },
        "content": "The alias is a simple hook into the command parsing engine. If there is no"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "thwnus"
        },
        "content": "built-in command corresponding to a command line, then the alias map is checked."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "thwnus"
        },
        "content": "If there is a matching alias, then the alias name in the command line is replaced,"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "thwnus"
        },
        "content": "and the command execution is re-tried."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "thwnus"
        },
        "content": "To prevent alias loops where the user creates an alias `x` mapping to `y`, and an"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "thwnus"
        },
        "content": "alias `y` mapping to `x`, we track the aliases that have been applied, and"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "thwnus"
        },
        "content": "stop evaluation if we see that the same alias has been applied more than once."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "thwnus"
        },
        "content": "_TODO_"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "thwnus"
        },
        "content": "// end::aliases[]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* has a need to manage expenses and income over a significant period of time"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* capable of basic programming to customize the app to their liking"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*Value proposition*: manage expenses/income faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |user |see an overview of all my spending from month to month |better judge my expense/income ratio"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |spendthrift |set a budget for my monthly spending |avoid breaking the bank again"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |lazy user |key in recurring expenses just once |do not have to enter them over and over again"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |careful spender |make month-to-month comparisons of spending in a particular category |see where additional expenses for certain months come from"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |cautious spender |carry over any budget deficits incurred each month to the following month |remember to repay it"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |user who borrows and loans money frequently |track who owes me money/who I owe money to |settle my debts"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "thwnus"
        },
        "content": "|`* * *` |SoC student who has to pay school fees regularly |track how much I’ll have to pay and when I have to pay it by |avoid making late payments"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "thwnus"
        },
        "content": "|`* * *` |SoC student experienced in writing programs |write my own scripts to manipulate entries in the app |automate and customize the app to my liking"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |ambitious user |set goals for my cumulative income |work towards my dream home/car/goal"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |careless user |undo a mistake |not worry even if I accidentally make an error"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |careful spender |dedicate different accounts to different holidays |control how much I spend while on the holidays"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |careful spender |set different currencies for different accounts |see my expenditure during a holiday in the local currency"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |lazy person |import expenses from csv exports from internet banking |transfer my records across software"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |supremely lazy user |have the program detect recurring transactions and suggest them to me |not waste time adding them manually"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |paranoid user |have the program show me all possible commands and how to use them |know exactly what I am doing"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |user who prefers visuals |see a chart of my budget spending across past months |see how much I have been overspending/underspending"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |busy user |move and delete multiple transactions at the same time |be more efficient"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |lazy user |have the program autofill my command as I am typing it |enter my transactions more quickly"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |user who cannot control spending |set a budget for different purposes |control my spending"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |lazy user |have the app to have predictive commands based on what transactions I commonly include |spend less time typing in my expenses"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |fast typer |type out multiple commands all at once |type the next command without having to pause"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |person who occasionally goes overseas |assign an exchange rate to each foreign currency transaction |get reports on my total expenditure in my home currency"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |busy user |see my overall budget surplus/deficit at a glance |know straight away when I’m below or above my budget for that month"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |meticulous user |see how much I need to budget every month to reach a savings goal based on what the goal is and its deadline |plan my budget well"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |busy user |keep track of my spending in different account books |segregate completely unrelated spending"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`*` |unmotivated person |be rewarded for entering my expenses/income daily |be motivated to do so and eventually turn it into a habit"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`*` |expense planner |record down possible future expenses |keep track of what I planned to spend on"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`*` |forgetful user |have the app set reminders |keep track of my spending everyday"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "(For all use cases below, the *System* is `Budget Buddy` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Use case: Delete transaction"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "1.  User requests to list transactions."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "2.  Budget Buddy shows a list of transactions for the current account."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "3.  User requests to delete a specific transaction in the list."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "4.  Budget Buddy deletes the transaction."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 3a1. Budget Buddy shows an error message."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Use case: Add loan"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "1.  User requests to add a \u003c\u003cloan-out, loan out\u003e\u003e for a person."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "2.  Budget Buddy adds the loan for the given person."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 1a. The given loan out value is negative."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 1a1. Budget Buddy shows an error message."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 2a. The given person does not exist in the loan list."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 2a1. Budget Buddy adds the given person to the loan list with a loan entry."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Use case: Edit loan"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "1.  User requests to list loans."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "2.  Budget Buddy shows a list of loans."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "3.  User requests to edit the description of a loan in the list."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "4.  Budget Buddy edits the description of the specified loan."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 2a. The given loan index is invalid."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 2a1. Budget Buddy shows an error message."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Use case: Add account"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "1. User requests to add a new account."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "2. Budget Buddy creates the new account."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 1a. No account name was provided."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 1a1. Budget Buddy shows an error message."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Use case: Rename categories"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "1. User requests to list all categories."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "2. Budget Buddy shows all created categories."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "3. User requests to rename a category."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "4. Budget Buddy renames the category and displays the list of categories."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 3a. The index of the category does not exist."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 3a1. Budget buddy shows an error message."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 3b. The new name of the category is invalid."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 3b1. Budget Buddy shows an error message."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ".  Should be able to hold up to 1000000 transactions without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[[loan-out]] Loan Out::"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "A loan where the user owes another person money."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[[loan-in]] Loan In::"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "A loan where another person owes the user money."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "tcgj": 57,
      "ChenJiehan318": 97,
      "kenneth-fung": 356,
      "thwnus": 67,
      "-": 384
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d Budget Buddy - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": ". Run the `budgetbuddy.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, Budget Buddy\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "tcgj": 4,
      "-": 70
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d Budget Buddy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ":jarName: budgetbuddy.jar"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "By: `CS2103T W13-4`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Budget Buddy is an all-in-one expense tracking application for computing students who prefer to use a desktop app"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "to manage their expenses. More importantly, Budget Buddy is *optimized for those who prefer to work with a Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "If you type fast, Budget Buddy can get your expense management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Furthermore, Budget Buddy allows computing students to add their own functions through customized JavaScript files,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "as well as a set of rules to simplify expense tracking through automation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "This user guide provides in-depth documentation of the current as well as upcoming features, including the setup"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "process, as well as some commonly asked questions. For the hands-on person, check out the _Quick Start_ section right"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "below."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "_Ensure that Java 11 is installed on your system._"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Download the latest version of Budget Buddy link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Place the _{jarName}_ file in your desired home folder. This folder will contain all data saved into Budget Buddy."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Double click the _{jarName}_ file to launch Budget Buddy."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*Launching for the first time*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* A default account will created."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Type `txn dn/out x/100 d/This is my first transaction!` to add a new spending."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* To view your accounts, type `account list`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* To view available commands, type `help`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "If the application does not run, follow the instructions below based on your operating system:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* Mac/Linux:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Launch _Terminal_"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Navigate to the home folder where _{jarName}_ is, using the `cd` command, e.g. `cd ~/Documents/BudgetBuddy`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Execute the jar file using `java -jar budgetbuddy.jar`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* Windows:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Launch _Cmd_, or Windows\u0027 Command Prompt"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Navigate to the home folder where _{jarName}_ is, using the `cd` command, e.g. `cd Documents\\BudgetBuddy`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Execute the jar file using `java -jar budgetbuddy.jar`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d Getting Started"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Welcome to the Budget Buddy User Guide! You can scroll down to start looking at the in-depth features of Budget Buddy,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "or select a topic from the _Table of Contents_ above."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Budget Buddy comes with many tools to help you manage your expenses better! You can create multiple accounts,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "add and remove transactions that you have made, and even track any outstanding loans that you may have."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "What\u0027s more? Automate processes by using rules. Typing repetitive descriptions? Set the description of a transaction"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "automatically by using a keyword! Set a Food category automatically each time you make a food"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "transaction! Automate everything!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "If you know how to code in JavaScript, great news for you too. Write and evaluate your own scripts within the application,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "do complicated things in a snap. And even use your script in rules!"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* Commands start with a category, and a command type usually follows, e.g. `rule add`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* Words written using `\u003c\u003e` brackets are parameters to be supplied by the user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Parameters within `[]` brackets are optional and can be omitted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `|` indicates that a choice must be made between two parameters."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `...` indicates a variable number (at least 1) of the specified parameter."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Provides a link to this user guide."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Managing transactions: `txn`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003d\u003d\u003d\u003d Add a transaction: `txn out|in`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Adds a new transaction of the specified amount and with the given description."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Format: `txn dn/out|in x/\u003camount\u003e d/\u003cdescription\u003e [a/\u003caccount\u003e] [c/\u003ccategory\u003e] [w/\u003cdate\u003e] [r/\u003cd|w|m|y\u003e]`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "* If the account is not given, the transaction is inserted into the active account."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* If the category is not given, the transaction is not categorized."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "* If the date is not given, the date is set to the current date."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "* If the argument ‘r’ is added, the transition is marked as recurring;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "identical entries will be added either daily, weekly, monthly, or yearly."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a transaction: `txn edit`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Edits the specified transaction, setting the specified fields."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "If the ‘recurring’ field is modified, the app will ask if all previous recurring entries should be deleted."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Format: `txn edit \u003cid\u003e dn/out|in [x/\u003camount\u003e] [d/\u003cdescription\u003e] [a/\u003caccount\u003e] [c/\u003ccategory\u003e] [w/\u003cdate\u003e] [r/\u003cd|w|m|y\u003e]`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003d\u003d\u003d\u003d Delete transaction(s): `txn delete`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Deletes the transaction with the specified ID."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Format: `txn delete \u003cid\u003e`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "// tag::accounts[]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Managing accounts: `account`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Add an account: `account add`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "You can create a new account. Each account has a unique ID and name. The user can choose to customise a description to describe the use of the account."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Format: `account add [n/\u003cname\u003e] [d/\u003cdescription\u003e]`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `account add n/Japan trip`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "You have created an account with name of \u0027Japan trip\u0027."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `account add n/Japan trip d/expense spent in Japan`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "You have created an account with name of \u0027Japan trip\u0027 and description of \u0027expense spent in Japan\u0027."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d List accounts: `account list`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "If you want to see the full list of accounts you currently own, you can enter command and a list of all accounts will be displayed."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Format: `account list`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Edit an account: `account edit`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "You can edit the account you think that needs modified. You can choose to edit either the name or the description of the account, or both."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Format: `account edit \u003cid\u003e [n/\u003cname\u003e] [d/\u003cdescription\u003e]`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* Edits the account with the specified index. The index refers to the index number shown in the displayed account list. The index must be a positive integer 1, 2, 3..."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*`account edit 1 n/food`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "The name of your first account will be changed to \u0027food\u0027."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*`account edit 1 d/money spent on food`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "The name of your first account will be changed to \u0027money spent on food\u0027."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*`account edit 1 n/food d/money spent on food`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "The name of your first account will be changed to \u0027food\u0027, at the same time the description of the same account will be changed to \u0027money spent on food\u0027."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d\u003d\u003d Delete account: `account delete`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "You can delete the account with the specified ID, as in `account list`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Note: you cannot delete an account if there are transactions associated with the account."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Format: `account delete \u003cid\u003e`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* Deletes the account with the specified index. The index refers to the index number shown in the displayed account list. The index must be a positive integer 1, 2, 3..."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* `account delete 2`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "You have deleted the second account in your account list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d\u003d\u003d Find account: `account find`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "If you want to see a specific type of accounts you have, or find a specific account, you can find the account(s) with a specified keyword."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "A list of account(s) contain the keyword in their names will be displayed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Format: `account find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*`account find trip`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "You can see a list of accounts with the word \u0027trip\u0027 contained in their names."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "// end::accounts[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "// tag::loans[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Tracking loans: `loan`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Add a new loan: `loan out|in`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Adds a new loan out/in entry."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Each loan has a unique ID."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "If a date is not given, it is set to the current date. The description is also optional."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan out|in p/\u003cperson\u003e x/\u003camount\u003e [w/\u003cdate\u003e] [d/\u003cdescription\u003e]`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `loan out p/John Doe x/50 w/23/04/2018`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `loan in p/Jane Doe x/100 d/Lent me some money for booze.`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d List loans: `loan list`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Displays a list of all loans, sorted alphabetically by person first, then by newest for each person\u0027s loans."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan list [out|in|unpaid|paid ...] [p/\u003cperson\u003e ...] [x/\u003camount\u003e ...] [w/\u003cdate\u003e ...] [d/\u003cdescription\u003e ...] [s/w|x|p]`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Filter loans using one or more of the `out`, `in`, `unpaid`, `paid` filters."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Filter loans persons, amounts, dates and descriptions by adding one or more of the `p/\u003cperson\u003e`, `x/\u003camount\u003e`, `w/\u003cdate\u003e`, `d/\u003cdescription\u003e` filters."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Sort loans by date, amount, or persons\u0027 names using `s/w`, `s/x`, or `s/p` respectively."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** Sorting the list using the same method when it is already sorted will reverse the order of sorting (e.g. descending to ascending)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `loan list out unpaid p/John Doe` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Lists all unpaid loans out to the person named \"John Doe\"."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `loan list s/p` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`loan list s/p`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Lists all loans sorted by persons in alphabetical order. Then lists all loans again, but sorted by persons in reverse alphabetical order."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Edit loan: `loan edit`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Edits the specified field of the loan entry with the specified index."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan edit \u003cindex\u003e [\u003cp/person\u003e] [x/\u003camount\u003e] [d/\u003cdescription\u003e] [w/\u003cdate\u003e]`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "****"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Edits the loan with the specified index. The index refers to the index number shown in the displayed loan list. The index must be a positive integer 1, 2, 3..."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "****"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `loan list` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`loan edit 1 x/500 d/Dude owes me so much money I can\u0027t even.` +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Lists all loans, then edits the amount and description of the first person in the list to the given values."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Mark loan(s) as paid: `loan paid`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Marks the specified loan(s) as paid."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "If a person\u0027s name is specified, all their loans are also marked as paid."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan paid \u003cindex ...\u003e [\u003cp/person ...\u003e]`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `loan list` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`loan paid 1 2 3` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Lists all loans, then marks the first three loans in the list as *paid*."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `loan paid p/John p/Adam` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Marks all loans in from and out to John and Adam as *paid*."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Mark loan(s) as unpaid: `loan unpaid`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Marks the specified loan(s) as unpaid."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "If a person\u0027s name is specified, all their loans are marked as unpaid."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "This feature works identically to `loan paid`, except the command word is `unpaid` instead of `paid`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan unpaid \u003cindex ...\u003e \u003cp/person ...\u003e`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Delete loan(s): `loan delete`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Deletes the loan(s) with the specified loan index/indices."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "If a person\u0027s name is specified, all of that person\u0027s loans are deleted."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan delete \u003cindex ...\u003e \u003cp/person ...\u003e`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `loan list` +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`loan delete 1` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Lists all loans, then deletes the first loan in the list."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `loan delete p/John` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Deletes all loans in from and out to John."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Calculate loans: `loan split`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Splits a joint payment equally among group members, then displays a list of who owes who how much."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan split p/\u003cperson\u003e x/\u003camount paid\u003e ... [me/\u003cyour name\u003e w/\u003cdate\u003e d/\u003cdescription\u003e]`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "****"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Each `\u003cperson\u003e` corresponds to an `\u003camount paid\u003e`, representing how much the `person` paid for the group initially. +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The order of all `person`s should match the order of `amount paid`."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Adding the optional `me/` will add all debts from the resulting list to your loan list."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`\u003cyour name\u003e` must match one of the persons among the other `p/\u003cperson\u003e` names."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Adding `w/` will set the `\u003cdate\u003e` of the loans added to your list."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Adding `d/` will set the `\u003cdescription\u003e` of the loans added to your list."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "****"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `loan split p/John p/Mary p/Peter x/0 x/40 x/60` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Calculates the money owed between `John`, `Mary` and `Peter` for a scenario where (initially) `Mary` paid `40` and `Peter` paid `60`. +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The resulting display should show that `John` owes `Mary` *$6.66* and also owes `Peter` *$26.67*."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `loan split p/John p/Mary p/Peter x/0 x/10 x/90 me/Mary d/Dinner.` +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "In this scenario, `Mary` paid `10` and `Peter` paid `90`."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Furthermore, `me/Mary` marks `Mary` as the user (you), so any debts `Mary` owes/is owed will be added to the normal loan list with the description `Dinner`. +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The resulting display should show that `John` owes `Peter` *$33.33* and `You` owe `Peter` *$23.33*."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The latter debt will also have been added to your loan list, which can be checked using the command `loan list`."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "// end::loans[]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tcgj"
        },
        "content": "// tag::rules[]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Automating with rules: `rule`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tcgj"
        },
        "content": "// TODO: Some information here to show users perspective"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*Introducing the _Rule Engine_.*"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tcgj"
        },
        "content": "A way for you to automate certain actions based on a certain predicate."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Spend less time typing repetitive commands, and spend more time keeping track of your expenses!"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Rules have the following structure: If \"predicate\" is true, then perform \"action\"."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tcgj"
        },
        "content": "All rules in the Rule Engine will be executed on a transaction, when:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* it is a new transaction and has been successfully added into an account."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tcgj"
        },
        "content": "OR"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* it is an existing transaction and has been successfully edited."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tcgj"
        },
        "content": "WARNING: All rules will be executed in the order they were added."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Rules with conflicting actions will therefore be allowed."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Add a new rule: `rule add`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Adds a new rule to the rule engine."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Both the predicate and action have to be specified."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tcgj"
        },
        "content": "A rule can be formed using either expressions or scripts, or both."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `rule add pred/\u003cexpression | script name\u003e act/\u003cexpression | script name\u003e`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Refer to \u003c\u003cScripting\u003e\u003e for script usage."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tcgj"
        },
        "content": "****"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*Expression Formatting Guide:*"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* **Predicate**: In the order of `\u003cattribute\u003e \u003cpredicate operator\u003e \u003cvalue\u003e`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** An attribute can be one of the following:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `inamt` : Transaction amount inwards"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `outamt` : Transaction amount outwards"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `desc` : Transaction description"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** A predicate operator can be one of the following:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `\u003d` : equality operator"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `\u003c` , `\\\u003c\u003d`  , `\u003e\u003d` , `\u003e` : inequality operators"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `contains` : string comparison operator"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "** A value can be a number or a string of length not more than 180 characters"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* **Action**: In the order of `\u003caction operator\u003e \u003cvalue\u003e`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** An action operator can be one of the following:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `set_cat` : Adds a category to the transaction"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `remove_cat` : Removes a category from the transaction"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `set_desc` : Sets the description of the transaction"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `app_desc` : Appends a value to the description"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `prep_desc` : Prepends a value to the description"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `set_in` : Sets the direction of the transaction to be inwards"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `set_out` : Sets the direction of the transaction to be outwards"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** `switch_direct` : Switches the current direction of the transaction"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** A value is as described in a predicate expression"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tcgj"
        },
        "content": "****"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d List rules: `rule list`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Displays the list of all existing rules, sorted by the order in which a rule was added."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `rule list`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a rule: `rule edit`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Edits the specified fields in the rule with the specified ID."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Both the predicate and action can be modified."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `rule edit \u003crule ID\u003e [pred/\u003cexpression | script\u003e] [act/\u003cexpression | script\u003e]`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a rule: `rule delete`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Deletes a rule with the specified rule ID."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `rule delete \u003crule ID\u003e`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tcgj"
        },
        "content": "// end::rules[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "thwnus"
        },
        "content": "// tag::scripting[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tcgj"
        },
        "content": "[[Scripting]]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d Scripting: `script`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "thwnus"
        },
        "content": "The scripting engine allows you to evaluate arbitrary scripts to perform complex operations on your transaction data,"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "thwnus"
        },
        "content": "as well as extend the application and add commands and features of your own."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "thwnus"
        },
        "content": "WARNING: Scripts have full access to the application\u0027s internals, as well as all Java standard library classes and APIs."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "thwnus"
        },
        "content": "It is possible to corrupt the application state by execution of a malicious or buggy script. There are no guarantees on"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "thwnus"
        },
        "content": "application behaviour if scripts are used."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Evaluate a script: `script eval`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Evaluates a script and displays the result."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `script eval \u003cscript\u003e`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* The scripting language is JavaScript (specifically, ECMAScript 5.1)."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Add a stored script: `script add`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Stores a script for future invocation."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `script add \u003cscript name\u003e [p/\u003cfile path\u003e | s/\u003cscript\u003e]`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* The script name may contain only alphanumeric characters, underscores, and dashes."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* If neither a file path nor the script code is given, a file browser is opened for you to"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "thwnus"
        },
        "content": "select the script file."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "thwnus"
        },
        "content": "WARNING: The script is not checked for correctness before it is stored. Any syntax errors"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "thwnus"
        },
        "content": "will be reported only when the script is run."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a stored script: `script delete`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Deletes a previously-stored script."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `script delete \u003cscript name\u003e`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Run a stored script: `script run`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Runs a previously-stored script."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `script run \u003cscript name\u003e [\u003cargument\u003e]`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* The argument is the rest of the command line after the script name, and is passed to the script as a single string."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d List stored scripts: `script list`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Lists stored scripts."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `script list`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Reset the scripting environment: `script reset`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Resets the scripting environment."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `script reset`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "thwnus"
        },
        "content": "// end::scripting[]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "thwnus"
        },
        "content": "// tag::importexport[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d Import and export *(Coming in v1.4)* : `import`, `export`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Import a file: `import`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Imports transactions from the file at the given path."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `import [f/\u003cformat\u003e] [p/\u003cfile path\u003e]`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* The file path can be relative to where you launched Budget Buddy from, or absolute."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "thwnus"
        },
        "content": "If the path is omitted, a file browser is opened for you to select the file."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* Format is one of dbs (DBS Bank/POSB), ocbc (OCBC Bank), sc (Standard Chartered), csv (generic comma-separated values file)."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "thwnus"
        },
        "content": "If the format is omitted, automatic detection is attempted."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Export transactions: `export`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Exports all transactions to the given path."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `export [p/\u003cfile path\u003e]`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* The file path can be relative to where you launched Budget Buddy from, or absolute."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "thwnus"
        },
        "content": "If the path is omitted, a file browser is opened for you to select where to save the file."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* The file is a comma-separated values file."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "thwnus"
        },
        "content": "// end::importexport[]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "thwnus"
        },
        "content": "// tag::aliases[]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d Aliases *(Coming in v1.4)* : `alias`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Add an alias: `alias add`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Adds an alias."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `alias add \u003calias name\u003e c/\u003calias replacement\u003e`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* When executed, the alias name will be replaced by the replacement, and the resulting command line executed."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** For example, suppose you add an alias named `abcd efgh 7890`, with replacement `script run x`."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** Executing `abcd efgh 7890 abcd` is equivalent to executing `script run x abcd`."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* The alias name must appear at the start of a command line, followed by a space, for it to be recognised."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* There is no restriction on the characters in the alias name. However, leading and trailing whitespace will be trimmed."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* Aliases can expand to other aliases."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "thwnus"
        },
        "content": "WARNING: Built-in commands take precedence. If you add an alias with the same name as a built-in command, it will have no effect."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Delete an alias: `alias delete`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Deletes an alias."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `alias delete \u003calias name\u003e`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "thwnus"
        },
        "content": "// end::aliases[]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d Coming In v2.0"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Look forward to these features coming up in version 2.0 of Budget Buddy!"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Managing defaults *(Coming in v2.0)* : `default`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Set default account: `default account`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Sets the default account."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `default account \u003cid\u003e`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Managing the main transaction view *(Coming in v2.0)* : `view`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Filter transactions: `view filter`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Filters the main transaction view. If no arguments are provided, all transactions are shown."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Otherwise, only transactions meeting all the criteria are shown."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `view filter [a/\u003caccount\u003e] [c/\u003ccategory\u003e] [f/\u003cfrom date\u003e] [t/\u003cto date\u003e]`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Sort transactions: `view sort`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Sorts transactions by (a)ccount, (c)ategory, (d)ate or (x)amount."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Specify `o/a` to sort in ascending order, or `o/d` to sort in descending order."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "tcgj"
        },
        "content": "If omitted, sort in ascending order."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `view sort s/\u003ca|c|d|x\u003e [o/\u003ca|d\u003e]`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "tcgj"
        },
        "content": "// tag::budget[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Managing budgets *(Coming in v2.0)* : `budget`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Displays or sets the budget for the specified period."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "tcgj"
        },
        "content": "// TODO: give purpose of this command for user"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d View budgets: `budget list`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Views the list of budgets currently stored."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Add budgets: `budget add`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "tcgj"
        },
        "content": "This command sets a budget. Note that budgets cannot overlap."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Remove budgets: `budget delete`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "tcgj"
        },
        "content": "This command removes a budget from the list."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "tcgj"
        },
        "content": "// end::budget[]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Goal setting *(Coming in v2.0)* : `goal`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Add a goal: `goal add`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Adds a goal on the specified account to reach the specified amount by the target date or at the end of the specified period."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d View goals: `goal list`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "tcgj"
        },
        "content": "List all goals."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Delete goal(s): `goal delete`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Deletes the goal with the specified goal ID."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Managing categories *(Coming in v2.0)* : `category`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Add a category"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Categories do not need to be added; you can simply use the category name and a new category will be created if no such one exists."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d List categories: `category list`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Lists all categories."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Rename a category: `category rename`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Renames the specified category."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Note that this is the same as setting the category of all transactions of category `old name` to `new name`."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `category rename o/\u003cold name\u003e n/\u003cnew name\u003e`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a category: `category delete`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Deletes the specified category."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Note that this is the same as un-categorising all transactions under the specified category."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `category delete n/\u003cname\u003e`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Viewing reports *(Coming in v2.0)*: `report`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Displays a report."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `report [[f/\u003cfrom date\u003e] [t/\u003cto date\u003e] | [p/\u003cthis month|last month|this week|last week|today|yesterday\u003e]] [total|category]`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "tcgj"
        },
        "content": "****"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* You can specify either the start and end date range, inclusive, or name a period."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "tcgj"
        },
        "content": "If no period is specified, it defaults to the current month-to-date."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* You can see a total report that shows your total income and expenditure and budget information,"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "tcgj"
        },
        "content": "if a budget has been set up,  or a report that breaks your income and expenditure down into categories."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "tcgj"
        },
        "content": "If the type is omitted, it defaults to a total report."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* Your goal progress will also be shown in both reports."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "tcgj"
        },
        "content": "****"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Getting help with specific commands *(Coming in v2.0)*: `help`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Displays detailed help for a specific command."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `help \u003ccommand word\u003e`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d Scripting API"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "thwnus"
        },
        "content": "The Nashorn scripting engine is used. All features and Java class access of the Nashorn engine are available. See the https://docs.oracle.com/en/java/javase/11/nashorn/nashorn-java-api.html[Nashorn documentation] for more details."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Currently, the only exposed interface to the Budget Buddy model is `bb`, which exposes the full application model to scripts."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Convenience functions as well as access to the UI will be added in v1.4."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*Q:* Which version of Java do I require to run this application?"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*A:* Java 11"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*Q:* How do I switch between the different tabs without clicking on them?"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*A:* Simply execute the `list` command for that category, e.g. `rule list`."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "tcgj"
        },
        "content": "On the other hand, executing any command from that category will switch you over as well."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*Q:* How do I reset the application data?"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*A:* All data is stored within the same folder as your execution path, under the \"data/\" folder."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Deleting that folder will reset the application data."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Rules"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* `rule add` - Add a new rule"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* `rule list` - List rules"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* `rule edit` - Edit a rule"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* `rule delete` - Delete a rule"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tcgj": 268,
      "ChenJiehan318": 40,
      "cambrian-dk": 25,
      "kenneth-fung": 118,
      "thwnus": 121,
      "-": 85
    }
  },
  {
    "path": "docs/UsingAppVeyor.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AppVeyor"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "For use with _Budget Buddy_, wherever `addressbook-level4` is used in the screenshots, you should use *`main`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.appveyor.com/[AppVeyor] is a _Continuous Integration_ platform for GitHub projects. It runs its builds on Windows virtual machines."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "AppVeyor can run the project\u0027s tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken on Windows by the changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "The current AppVeyor setup runs `gradlew.bat test` whenever someone pushes code to the repo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customize your AppVeyor build further, you can learn more about AppVeyor from the https://www.appveyor.com/docs/[AppVeyor Documentation]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up AppVeyor"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://ci.appveyor.com/, and under `Login`, click on `GitHub` to login with your GitHub account. Enter your GitHub account details if needed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/login.png[Click on GitHub in the login page]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  After logging in, you will be brought to your projects dashboard. Click on `NEW PROJECT`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-1.png[Click on \"NEW PROJECT\" in the projects dashboard]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  You will be brought to the `Select repository` page. Select `GitHub`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* On your first usage of AppVeyor, you will need to give AppVeyor authorization to your GitHub account. Click on `Authorize GitHub`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-2.png[Click on Authorize GitHub]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* This will bring you to a GitHub page that manages the access of third-party applications to your repositories."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Depending on whether you are the owner of the repository, you can either"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "grant access:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Or request access:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".  AppVeyor will then list the repositories you have access to in your GitHub account. Find the repository you want to set AppVeyor up on, and then click `ADD`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-3.png[Click \"Add\" on the repository you want to set AppVeyor up on]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  AppVeyor will then be activated on that repository. To see the CI in action, push a commit to any branch!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the AppVeyor build:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-pending.png[Commit build]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-log.png[AppVeyor build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \"build status\" badge at the top of `README.adoc` to point to the AppVeyor build status of your own repo."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* To find your build status badge URL, first go to your project settings by clicking on the \"Settings\" icon:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-1.png[Click on project settings]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Then go to the `Badges` section of your project settings by clicking on it:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-2.png[Click on \"Badges\"]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* As AppVeyor does not provide asciidoc code for the badge, we will have to create our own. Start by copying the markdown code provided:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-3.png[Copy the markdown code]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "The markdown code should be in this format:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[![Build status](\u003clink to image\u003e)](\u003clink to project\u003e)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Convert it to the asciidoc format as follows:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003clink to project\u003e[image:\u003clink to image\u003e[Build status]]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The asciidoc code should look similar to:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Copy and paste the asciidoc code to your `README.adoc` file."
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 93
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "For use with _Budget Buddy_, wherever `addressbook-level4` is used in the screenshots, you should use *`main`*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": ". Enter an arbitrary description e.g. budgetbuddy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 46
    }
  },
  {
    "path": "docs/UsingCoveralls.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Coveralls"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "For use with _Budget Buddy_, wherever `addressbook-level4` is used in the screenshots, you should use *`main`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/[Coveralls] is a web service that tracks code coverage over time for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Coveralls requires Travis CI to be set up beforehand as Travis sends the coverage report from the latest build to Coveralls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "If you have not set up Travis CI, see \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e. Currently, Coveralls supports Travis CI but not AppVeyor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Coveralls"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://coveralls.io/ and click `SIGN IN`. Then click `GITHUB SIGN IN` and enter your GitHub account details if needed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ".  After logging in, you will be brought to the `Your Repositories` page. On the site\u0027s navigation bar, click https://coveralls.io/repos/new[ADD REPOS]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Find the switch for the forked repository."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `GITHUB SETTINGS` as shown below:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/github_settings.png[GitHub settings]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "to Coveralls so that it can access your repository."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* If your repository cannot be found, click `SYNC REPOS`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/sync_repos.png[Sync repos]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link of the `Coverage Status` badge at the top of your \u003c\u003cREADME#, README.adoc\u003e\u003e to point to that of your own repo by replacing the outlined areas with `your-org-name/your-repo-name`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_asciidoc_code.png[Coverage Status Badge]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  You can now see the coverage report for your project after each Travis build by clicking on the `Coverage Status` badge."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_report.png[Coverage Report Summary]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Disabling Coveralls Automatic Comments on Pull Requests"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Coveralls automatically comments on the coverage status of the pull requests in GitHub. If it\u0027s a hindrance, you can disable it in the settings of your project in Coveralls:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click `Settings`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".  Uncheck the `LEAVE COMMENTS?` checkbox. Then click `SAVE CHANGES`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/disable_comments.png[Disable comments, width \u003d 942]"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 62
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean test`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean test`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `test` `coverage`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Creates the `budgetbuddy.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`** +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew test` -- Runs all tests"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean test` -- Cleans the project and runs tests"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 98
    }
  },
  {
    "path": "docs/UsingNetlify.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Netlify"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "For use with _Budget Buddy_, wherever `addressbook-level4` is used in the screenshots, you should use *`main`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.netlify.com/[Netlify] is an automated hosting platform for deploying static websites. With the aid of build tools such as Gradle, Netlify provides a smoother experience for previewing documentation. This can be done by using Netlify\u0027s https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/[Deploy Previews] feature, which shows a preview of the updated documentation whenever a pull request is made."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Netlify"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork the repository to your own organization."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to https://www.netlify.com/ and click `Sign Up`. Next, click `GITHUB SIGN IN`, enter your GitHub account details and authorize netlify."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". After logging in, click `New site from Git`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". You will then be brought to the setup page. Click `GitHub` to link your repository to Netlify."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* Depending on whether you are the owner of the repository, you can either grant or request access to Netlify so that it can access your repository and build your documentation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/grant_or_request_access.png[Grant or request access, width \u003d 630]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* After granting or requesting access to your repository, click `Authorize netlify`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Pick your repository from the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Fill out the details as follows and then click `Deploy site`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Branch to deploy: select `master` branch"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Build command: `./gradlew asciidoctor`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "The build command is the command that builds the documentation into HTML format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Publish directory: `build/docs/html5`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "The publish directory is the directory in which the built HTML documentation resides."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Once Netlify has completed building your project, you can now:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* View your main branch\u0027s deployed documentation on the site name given by Netlify (customizable as shown \u003c\u003cChanging the site name of your project, below\u003e\u003e)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/temp_site_name.png[Temporary site name, width \u003d 630]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Preview the updated documentation whenever a pull request is made by clicking the `Details` hyperlink next to the Netlify test status."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/netlify_details.png[Netlify details link, width \u003d 630]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Changing the site name of your project"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "If you don\u0027t like the site name given by Netlify, you can change it as follows:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on `Settings`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Then click `Change site name` and fill in your desired site name."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/change_site_name.png[Change site name, width \u003d 630]"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 58
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "For use with _Budget Buddy_, wherever `addressbook-level4` is used in the screenshots, you should use *`main`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `./gradlew clean test coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tcgj"
        },
        "content": ".  Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/main/`. You should see your `README` file displayed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 138
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"account delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"account delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteAccount(a)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAccounts(accountManager)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tcgj": 4,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "if () then ([command commits BudgetBuddy])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    :Save BudgetBuddy to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    budgetBuddyStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "participant \":CommandLineParser\" as CommandLineParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "participant \":AccountDeleteCommandParser\" as AccountDeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "participant \"d:AccountDeleteCommand\" as AccountDeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "[-\u003e LogicManager : execute(\"account delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager -\u003e CommandLineParser : parseCommand(\"account delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate CommandLineParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "create AccountDeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandLineParser -\u003e AccountDeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate AccountDeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommandParser --\u003e CommandLineParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate AccountDeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandLineParser -\u003e AccountDeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate AccountDeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "create AccountDeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommandParser -\u003e AccountDeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate AccountDeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommand --\u003e AccountDeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate AccountDeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommandParser --\u003e CommandLineParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate AccountDeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommandParser -[hidden]-\u003e CommandLineParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "destroy AccountDeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandLineParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate CommandLineParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager -\u003e AccountDeleteCommand : execute(model)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate AccountDeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommand -\u003e Model : deleteAccount(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Model --\u003e AccountDeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandResult --\u003e AccountDeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate AccountDeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tcgj": 32,
      "-": 37
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package Script {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class ScriptManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package CommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Interface CommandParser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class CommandLineParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class CommandParserUtil"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package Rule {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Interface Testable \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Interface Performable \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class \"{abstract}\\nTestableExpression\" as TestableExpression"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class \"{abstract}\\nPerformableExpression\" as PerformableExpression"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class TUVExpression"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class ABCExpression"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "HiddenOutside ...\u003e Logic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager ---\u003e\"1\" CommandLineParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandLineParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "XYZCommandParser ..|\u003e CommandParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "XYZCommandParser ..\u003e CommandParserUtil"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "TestableExpression .right.|\u003e Testable"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "PerformableExpression .right.|\u003e Performable"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "TUVExpression -right-|\u003e TestableExpression"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "ABCExpression -right-|\u003e PerformableExpression"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager .left.\u003e Testable : tests \u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager .left.\u003e Performable : performs \u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "PerformableExpression -[hidden]-\u003e TestableExpression"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager -up--\u003e ScriptManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Command .up.\u003e ScriptManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager -left-\u003e Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Command .left.\u003e Model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AccountAddCommand, etc"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandResult -[hidden]-\u003e CommandParser"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tcgj": 38,
      "-": 48
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package Card {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class DEFCard"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package Panel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class \"{abstract}\\nListPanel\" as ListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class DEFPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "MainWindow *-down-\u003e ListPanel"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "DEFPanel .up.|\u003e ListPanel"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "DEFPanel -down-\u003e DEFCard"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "ListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "DEFCard --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "DEFCard ..\u003e Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "ListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "note right of DEFPanel: DEFPanel \u003d RulePanel,\\n AccountPanel, etc"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "note right of DEFCard: DEFCard \u003d RuleCard,\\n AccountCard, etc"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tcgj": 20,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State1 as \"__ab0:BudgetBuddy__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State2 as \"__ab1:BudgetBuddy__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State3 as \"__ab2:BudgetBuddy__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State1 as \"__ab0:BudgetBuddy__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State2 as \"__ab1:BudgetBuddy__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State3 as \"__ab2:BudgetBuddy__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"add n/David\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State1 as \"__ab0:BudgetBuddy__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State2 as \"__ab1:BudgetBuddy__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State3 as \"__ab2:BudgetBuddy__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State1 as \"__ab0:BudgetBuddy__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State2 as \"__ab1:BudgetBuddy__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State3 as \"__ab2:BudgetBuddy__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State1 as \"__ab0:BudgetBuddy__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State2 as \"__ab1:BudgetBuddy__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State3 as \"__ab2:BudgetBuddy__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State1 as \"__ab0:BudgetBuddy__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State2 as \"__ab1:BudgetBuddy__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State3 as \"__ab3:BudgetBuddy__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "note right on link: State ab2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "participant \":CommandLineParser\" as CommandLineParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "participant \":VersionedBudgetBuddy\" as VersionedBudgetBuddy MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "[-\u003e LogicManager : execute(\"undo\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager -\u003e CommandLineParser : parseCommand(\"undo\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate CommandLineParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandLineParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "UndoCommand --\u003e CommandLineParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandLineParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate CommandLineParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "UndoCommand -\u003e Model : undoBudgetBuddy()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Model -\u003e VersionedBudgetBuddy : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate VersionedBudgetBuddy"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "VersionedBudgetBuddy -\u003e VersionedBudgetBuddy :resetData(BudgetBuddy)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "VersionedBudgetBuddy --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate VersionedBudgetBuddy"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tcgj": 15,
      "-": 38
    }
  },
  {
    "path": "docs/team/ChenJiehan318.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d Chen Jiehan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d PROJECT: Budget Buddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "BudgetBuddy is a desktop expense tracker application designed for computing students who wish to better manage their expenses."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "The user interacts with it using a Command-Line Interface (CLI), and it has a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "It is written in Java, and has about 15 kLoC. The purpose of this Project Portfolio Page is to present my contribution to BudgetBuddy."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d Overview of the Project"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Budget Buddy possesses a fair number of features to equip the user the ability to track and manage their expenses,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "as well as customize their user experience to according to their preference."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "As an expense tracker, Budget Buddy offers the ability for users to record their transactions occurred in life."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "The user can create different accounts to manage different types of transactions."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "For example, when a user wants to view his expenses spent overseas, he can create a separate account named \u0027trip\u0027 to record the transactions spent in the trip."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Moreover, a category or a few categories can be set to remind the users the use of the transaction made."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "To help the users track their loans that they own others or are owed to them, Budget Buddy offers a feature called loan so that"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "the users can remind themselves to pay back or reclaim borrowed money. Unbalanced group payments can also be split equally,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "and the resulting debts the user owes or is owed can be recorded as loans automatically."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Among other financial trackers, Budget Buddy outstands in terms of its functionality of customizing the user experience through rules."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "To ease the process of managing the expenses, users can create rules to automate a series of actions."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "For example, they could create a rule that adds a transaction to a specific category if said transaction exceeds a certain amount."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Taken the fact that our main target users is computing students into consideration, Budget Buddy provides the functionality"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "for users to utilize their computing knowledge to write custom scripts to manipulate the app."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "For example, users are able to write scripts to add huge number of transactions, or scripts to trigger alarms when their expenses"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "have exceeded a certain limit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "//TODO"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* *Major enhancement*: added *the feature of account and related commands*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "** What it does: allows the user to manage their accounts to facilitate the tracking of expenses, including *add/delete/edit/list/find* the accounts."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "** Justification: This feature lays the foundation for the product because a user needs accounts to carry out all other activities, e.g. manage the transactions in a particular account."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "** Highlights: This feature affects many other existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation was demanding as it required carefully design to fit the entire architecture."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* *Minor enhancement*: added the help window that allows the user to navigate to the website when they are in need of help."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dChenJiehan318[RepoSense Report]]_"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thwnus"
        },
        "content": "include::../UserGuide.adoc[tag\u003daccounts]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thwnus"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daccounts]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "---"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 92,
      "thwnus": 2
    }
  },
  {
    "path": "docs/team/kenneth-fung.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d Kenneth Fung - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d PROJECT: Budget Buddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Budget Buddy is a desktop application that allows users to track their expenses."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The user interacts with it using a Command-Line Interface (CLI), and it has a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "It is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d About the Project"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Budget Buddy has a number of features to help users track their expenses and deeply customize their experience while using the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "As an expense tracker, Budget Buddy provides the ability for users to record and categorize transactions they have made."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Transactions can also be divided into user-created accounts, helping users to isolate transactions for specific events or holidays."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Budget Buddy further allows the user to track loans that they owe others or are owed to them,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "helping them remember to pay back or reclaim borrowed money."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Unbalanced group payments can also be split equally by Budget Buddy,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "and the resulting debts the user owes or is owed can be recorded as loans automatically."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Budget Buddy also provides features to deeply customize the user experience."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Users can create rules to automate many actions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "for example, they could create a rule that adds a transaction to a specific category if said transaction exceeds a certain amount."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "As the target audience comprises of computing students,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Budget Buddy also allows users to utilize their computing know-how to write custom scripts to manipulate the app."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "For example, users can write scripts to add huge numbers of transactions,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "or scripts to trigger alarms when their expenses have exceeded a certain limit."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d My Role"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "My role in the project was to implement all facets regarding the *loans* feature."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Chiefly, I added the ability for the user to add, edit, view and delete loans."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Users can also mark loans as paid or unpaid, and when viewing their list of loans they can sort or filter the list by amount, date and more."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "I was also responsible for implementing the complex algorithm necessary to split and divide an initially unbalanced group payment;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "the main challenge in this scenario was to devise an algorithm that worked for any group size and every variation of initial unbalance."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Aside from the implementation of features, I also aided in the delegation of roles among the team,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "upholding the quality of project documentation, and ensuring the team remained on task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* *Major enhancement*: Added *the ability to track loans and split unbalanced group payments equally*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** *What they do*: Tracking loans allows the user to track all the money that they owe/are owed to other people."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Splitting group payments through the app allows the user in avoiding messy miscalculations and over/under-paying their friends."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** *Justification*: This feature improves the product significantly, as both lending/borrowing money and paying for large items as a group are common occurrences that affect one\u0027s expenses."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** *Highlights*: Implementing loan-tracking required an in-depth analysis of design alternatives, especially regarding the structure of the loan-person relationship."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Building it on top of and mutating the original brownfield project also proved challenging."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Splitting group payments proved difficult due to needing an accurate yet efficient algorithm."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Great care had to be taken to correctly implement each of the many steps in the complex final result."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dkenneth-fung[RepoSense Report]]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*** Updated the User Guide, About Us, Contact and Readme pages to reflect our team taking over the original AddressBook:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-4/main/pull/3[#3]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-4/main/pull/56[#56],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-4/main/pull/60[#60],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W13-4/main/pull/80[#80]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thwnus"
        },
        "content": "include::../UserGuide.adoc[tag\u003dloans]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thwnus"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dloans]"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 82,
      "thwnus": 2
    }
  },
  {
    "path": "docs/team/tcgj.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d Chong Guang Jun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d PROJECT: Budget Buddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d About Budget Buddy"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Budget Buddy is a desktop-based expense tracking application made for students, NUS School of Computing students in particular,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "to keep track of and manage their finances better. The user interacts with it using a Command Line Interface (CLI),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "and it has a Graphical User Interface (GUI) created with JavaFX. The application is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "This is a software engineering project in which groups are tasked to enhance or morph a simple CLI-based address book application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "The end result is a expense tracking application with focus on programmers, to make customisation that much easier."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Budget Buddy is able to maintain separate accounts, handle a multitude of transactions within an account, and even track any"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "loans that the user might have made. Rules can be added to make repetitive tasks automated, and scripts can even allow the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "to create mass changes to data in their own way by themselves."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "My task in this project is the rule engine feature, which allows for the automation in the application, executing certain tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "automatically upon the addition of a new transaction. The following sections will elaborate on the feature, which includes"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "the additions I have made to both the user and developer guides."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Take note of the following formatting used in the rest of this portfolio."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "[cols\u003d\"\u003c1a,\u003c5a\", frame\u003dnone, grid\u003dnone]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|`command word`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|Monospace text like this indicates that this is a command word that can be entered as part of a command to be executed by the application."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|_filename.txt_"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|Italicized text like this indicates that this is a filename that can be found within the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|`*component*`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|Bold monospace text like this indicates that this is a component that can be found within the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "(Clear description of purpose, enhancement added: what does it do + justification)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* *Major enhancement*: added *the ability to add/remove/edit rules*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** What it does: Allows the user to define a set of rules in the rule engine which will be executed by the rule engine upon"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "the addition of every new transaction. A rule may carry out an action depending on whether the transaction satisfies the rule\u0027s requirement."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Justification: This feature improves the application significantly because for day-to-day transactions, there may be many"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "repetitions in what the user types. The app can therefore help users save time by automating such repetitive processes, or even"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "more, depending on how the user uses it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "// TODO: Everything else below"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "include::../UserGuide.adoc[tag\u003drules]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": "include::../UserGuide.adoc[tag\u003dbudget]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tcgj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tcgj"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003drules]"
      }
    ],
    "authorContributionMap": {
      "tcgj": 96
    }
  },
  {
    "path": "docs/team/thwnus.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d Tee Hao Wei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d PROJECT: Budget Buddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Budget Buddy is a desktop expense tracker application that allows users to track their expenses. The main method of input by the user is using a command-line interface (CLI), but the application presents information using a graphical interface. It targets users from the School of Computing in the National University of Singapore, who are generally comfortable with command-line interfaces."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Budget Buddy has the usual requisite features of an expense tracker: transactions, accounts, categories, loan tracking and a loan splitter. Because we are targetting computing students, Budget Buddy also has a scripting engine, allowing users to write scripts that perform complex operations and extend the functionality of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Budget Buddy benefits users by allowing them to know what they are spending on, so they can make informed decisions to change their spending behaviour and achieve their financial goals."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Budget Buddy is based on the AddressBook-Level3 application by SE-EDU, and currently consists of about 15 thousand lines of code."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "My main contributions are the scripting engine, import and export feature and alias feature, as well as managing releases and integration of contributions from other team members."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "| This section summarises the contributions I made to Budget Buddy."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* *Major enhancement*: added a scripting engine and library"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** What: This feature provides the user the ability to evaluate arbitrary scripts which have full access to the data and user interface of the application, and save these scripts in a library for convenient reuse."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** Why: This feature allows the user to perform complex operations that may be inconvenient or impossible to do through the CLI, and extend the application with new commands and features on their own, without having to modify the application\u0027s source code directly."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** Highlights: This feature required thought to provide a ergonomic interface to allow scripts to do common operations easily, without restricting scripts from doing more complex operations."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** Credits: This feature is implemented using the Nashorn JavaScript engine, bundled with Java 11."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* *Major enhancement*: added the ability to import and export transactions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** What: This feature provides the user the ability to import and export transactions."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** Why: This feature allows the user to import transactions exported from their bank transaction history and export transactions for further manipulation in an external program, such as Google Sheets or Excel."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** Highlights: This feature required retrieving exports from various banks and writing parsers for each of their formats."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* *Minor enhancement*: added a command alias feature to allow users to create shorthands"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "*** Managed releases `v1.1` to `v1.3` (4 releases) on GitHub"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "*** Updated the GUI color scheme; see PRs https://github.com[#33], https://github.com[#34]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92%; see PRs https://github.com[#36], https://github.com[#38]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide; see PR https://github.com[#14]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "*** Reviewed PRs (with non-trivial comments) https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "*** Rebased PRs #nn, #nn, #nn"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "*** Integrated Netlify, Coveralls and Codacy to the team repository"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": "| This section includes the parts of the user guide that I wrote, to demonstrate my ability to write end-user facing documentation."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "include::../UserGuide.adoc[tag\u003dimportexport]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "include::../UserGuide.adoc[tag\u003dscripting]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": "include::../UserGuide.adoc[tag\u003daliases]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thwnus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "| This section includes the parts of the user guide that I wrote, to demonstrate my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thwnus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thwnus"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimportexport]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thwnus"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dscripts]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thwnus"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daliases]"
      }
    ],
    "authorContributionMap": {
      "thwnus": 77
    }
  },
  {
    "path": "src/main/java/budgetbuddy/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/budgetbuddy/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/budgetbuddy/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.AccountsManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.RuleManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.ScriptLibrary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.ScriptLibraryManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.storage.accounts.AccountsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.storage.accounts.JsonAccountsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.JsonLoansStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.LoansStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.rules.JsonRuleStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.rules.RuleStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.storage.scripts.FlatfileScriptsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.storage.scripts.ScriptsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.storage.scripts.exceptions.ScriptsStorageException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Budget Buddy ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountsStorage accountsStorage \u003d new JsonAccountsStorage(userPrefs.getAccountsFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansStorage loansStorage \u003d new JsonLoansStorage(userPrefs.getLoansFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleStorage ruleStorage \u003d new JsonRuleStorage(userPrefs.getRuleFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptsStorage scriptsStorage \u003d new FlatfileScriptsStorage(userPrefs.getScriptsPath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        storage \u003d new StorageManager(accountsStorage, loansStorage, ruleStorage, scriptsStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage} and {@code userPrefs}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountsManager accountsManager \u003d initAccountsManager(storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansManager loansManager \u003d initLoansManager(storage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleManager ruleManager \u003d initRuleManager(storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptLibrary scriptLibrary \u003d initScriptLibrary(storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ModelManager(loansManager, ruleManager, accountsManager, scriptLibrary, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Loads and returns a Loans Manager from storage."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns an empty Loans Manager if no file found or if exception occurs during loading."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private LoansManager initLoansManager(Storage storage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cLoansManager\u003e loansManagerOptional;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loansManagerOptional \u003d storage.readLoans();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (loansManagerOptional.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                logger.info(\"Loans file not found. Will be starting with a sample LoansManager.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return loansManagerOptional.orElseGet(SampleDataUtil::getSampleLoansManager);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            logger.warning(\"Loans file not in the correct format. Will be starting with an empty LoansManager.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return new LoansManager();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            logger.warning(\"Problem while reading from loans file. Will be starting with an empty LoansManager.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return new LoansManager();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Loads and returns a Rule Manager from storage."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns an empty Rule Manager if no file found or if exception occurs during loading."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private RuleManager initRuleManager(Storage storage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Optional\u003cRuleManager\u003e ruleManagerOptional;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ruleManagerOptional \u003d storage.readRules();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (ruleManagerOptional.isEmpty()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                logger.info(\"Rule file not found. Will be starting with an empty RuleManager.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return ruleManagerOptional.orElseGet(RuleManager::new);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            logger.warning(\"Rule file not in the correct format. Will be starting with an empty RuleManager.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return new RuleManager();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            logger.warning(\"Problem while reading from rule file. Will be starting with an empty RuleManager.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return new RuleManager();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Loads and returns a script library from storage."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Returns an empty script library if an error occurs."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the script library"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private ScriptLibrary initScriptLibrary(Storage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return storage.readScripts();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        } catch (IOException | ScriptsStorageException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            logger.warning(\"Problem while reading scripts. Starting with empty script library.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return new ScriptLibraryManager();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Loads and returns an Accounts Manager from storage."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns an empty Accounts Manager if no file found or if exception occurs during loading."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private AccountsManager initAccountsManager(Storage storage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Optional\u003cAccountsManager\u003e accountsManagerOptional;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            accountsManagerOptional \u003d storage.readAccounts();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            if (accountsManagerOptional.isEmpty()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                logger.info(\"Accounts file not found. Will be starting with an empty AccountsManager.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return accountsManagerOptional.orElseGet(AccountsManager::new);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            logger.warning(\"Accounts file not in the correct format. Will be starting with an empty AccountsManager.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return new AccountsManager();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            logger.warning(\"Problem while reading from accounts file. Will be starting with an empty AccountsManager.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return new AccountsManager();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Budget Buddy\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        logger.info(\"Starting Budget Buddy \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Budget Buddy ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 54,
      "ChenJiehan318": 28,
      "thwnus": 25,
      "kenneth-fung": 26,
      "-": 134
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_INVALID_DISPLAYED_INDEX \u003d \"The index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_TRANSACTIONS_LISTED_OVERVIEW \u003d \"%1$d transactions listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_TRANSACTION_ADDITION_FAILED \u003d \"The transaction could not be added\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_ACCOUNTS_LISTED_OVERVIEW \u003d \"%1$d account(s) listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_ACCOUNT_SEARCH_RESULTS_EMPTY \u003d \"There are no results matching your search,\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \" listing all %1$d account(s)   \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_ACTIVE_ACCOUNT_NOT_FOUND \u003d \"The active account could not be found\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_LAST_ACCOUNT_DELETION_ILLEGAL \u003d \"The last account cannot be deleted\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_SCRIPT \u003d \"Could not find a script named \\\"%1$s\\\".\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "cambrian-dk": 7,
      "thwnus": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return zeroBasedIndex + \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Integer.hashCode(zeroBasedIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "kenneth-fung": 10,
      "-": 53
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static final ThreadLocal\u003cSimpleDateFormat\u003e dateFormat \u003d ThreadLocal.withInitial(() -\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"d/M/yy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        format.setLenient(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return format;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns a {@code SimpleDateFormat} for use in displaying/parsing dates."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * The primary purpose of this method is to standardise date display across the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static SimpleDateFormat getDateFormat() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return dateFormat.get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 9,
      "thwnus": 6,
      "-": 37
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns true if {@code items} contain any duplicates."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author kenneth-fung-reused"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    //Reused from https://stackoverflow.com/a/600319 with minor modifications"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static \u003cT\u003e boolean hasDuplicates(Collection\u003cT\u003e items) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Set\u003cT\u003e hashSet \u003d new HashSet\u003cT\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (T item : items) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (!hashSet.add(item)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns a list of all combinations possible for a given list of items."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return A {@code List} of {@code List}s of the given items."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static \u003cT\u003e List\u003cList\u003cT\u003e\u003e generateCombinations(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cList\u003cT\u003e\u003e results \u003d new ArrayList\u003cList\u003cT\u003e\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            results.addAll(generateCombinations(items, i));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns a list of r-element combinations possible for a given list of items."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param r The number of elements for each combination."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return A {@code List} of size-{@code r} combinations of items from {@code items}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static \u003cT\u003e List\u003cList\u003cT\u003e\u003e generateCombinations(List\u003cT\u003e items, int r) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cList\u003cT\u003e\u003e results \u003d new ArrayList\u003cList\u003cT\u003e\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (r \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return results;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (r \u003d\u003d 1 || items.size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            results.add(new ArrayList\u003cT\u003e(items));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return results;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            final int currIndex \u003d i;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            List\u003cT\u003e itemsAfterCurrIndex \u003d new ArrayList\u003cT\u003e(items.subList(currIndex + 1, items.size()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            results.addAll(generateCombinations(itemsAfterCurrIndex, r - 1)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    .peek(list -\u003e list.add(0, items.get(currIndex)))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "kenneth-fung": 59,
      "-": 36
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        AppUtil.checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        AppUtil.checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns true if {@code s} represents a non-negative unsigned long"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * e.g. 1, 2.2, 3, ..., {@code Long.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static boolean isNonNegativeUnsignedLong(String s) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            long value \u003d Long.parseLong(s);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return value \u003e\u003d 0 \u0026\u0026 !s.startsWith(\"+\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "kenneth-fung": 17,
      "-": 64
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Debtor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.Script;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns an unmodifiable view of the list of accounts."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    ObservableList\u003cAccount\u003e getAccountList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns an unmodifiable view of the list of transactions."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    ObservableList\u003cTransaction\u003e getTransactionList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns an unmodifiable view of the list of loans."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    ObservableList\u003cLoan\u003e getFilteredLoanList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns an unmodifiable view of the list of debtors."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    SortedList\u003cDebtor\u003e getSortedDebtorList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /** Returns an unmodifiable view of the list of rules */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    ObservableList\u003cRule\u003e getRuleList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Returns an unmodifiable view of the list of scripts."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    ObservableList\u003cScript\u003e getScriptList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 9,
      "ChenJiehan318": 7,
      "cambrian-dk": 6,
      "kenneth-fung": 13,
      "thwnus": 7,
      "-": 25
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandLineParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.script.ScriptEngine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Debtor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.Script;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final CommandLineParser addressBookParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final ScriptEngine scriptEngine;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        addressBookParser \u003d new CommandLineParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        scriptEngine \u003d new ScriptEngine(engine -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            // TODO: This will be pulled out into a separate class in a future PR"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            // TODO: Currently, this just brings it to feature-parity"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            engine.setVariable(\"bb\", model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        commandResult \u003d command.execute(model, scriptEngine);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            storage.save(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public ObservableList\u003cAccount\u003e getAccountList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return model.getAccountsManager().getFilteredAccountList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return model.getFilteredTransactions();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public ObservableList\u003cLoan\u003e getFilteredLoanList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return model.getLoansManager().getFilteredLoans();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public SortedList\u003cDebtor\u003e getSortedDebtorList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return model.getLoansManager().getDebtors();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ObservableList\u003cRule\u003e getRuleList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return model.getRuleManager().getRules();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ObservableList\u003cScript\u003e getScriptList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return model.getScriptLibrary().getScriptList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 17,
      "ChenJiehan318": 6,
      "cambrian-dk": 5,
      "thwnus": 17,
      "kenneth-fung": 13,
      "-": 45
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.script.ScriptEngine;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param model {@link Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    protected abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param model {@link Model} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param scriptEngine {@link ScriptEngine} which the command should use to evaluate any scripts."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public CommandResult execute(Model model, ScriptEngine scriptEngine) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return execute(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "thwnus": 14,
      "-": 15
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/CommandCategory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents the category that a command belongs to."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public enum CommandCategory {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    RULE, ACCOUNT, TRANSACTION, LOAN, LOAN_SPLIT, SCRIPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 7,
      "kenneth-fung": 1
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final CommandCategory commandCategory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public CommandResult(String feedbackToUser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                         CommandCategory commandCategory, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // todo: add requireNonNull on commandCategory after every command has set their category"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.commandCategory \u003d commandCategory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and {@code commandCategory},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public CommandResult(String feedbackToUser, CommandCategory commandCategory) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this(feedbackToUser, commandCategory, false, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public CommandCategory getCommandCategory() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return commandCategory;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 14,
      "-": 66
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Budget Buddy as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, null, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, null, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/accountcommands/AccountAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.commands.accountcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.account.exceptions.DuplicateAccountException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Adds an account."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"account add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an account.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + PREFIX_NAME + \"Japan trip \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Expense spent in Japan.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New account added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final Account toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountAddCommand(Account account) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        toAdd \u003d account;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        model.getAccountsManager().resetFilteredAccountList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            model.getAccountsManager().addAccount(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), CommandCategory.ACCOUNT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        } catch (DuplicateAccountException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!(other instanceof AccountAddCommand)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountAddCommand otherCommand \u003d (AccountAddCommand) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return toAdd.equals(otherCommand.toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 58,
      "cambrian-dk": 1,
      "thwnus": 8
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/accountcommands/AccountDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.commands.accountcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.KEYWORD_SINGLE_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.AccountsManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Delete one or more loans."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountDeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"account delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes an account.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + KEYWORD_SINGLE_ID + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_DELETE_ACCOUNT_SUCCESS \u003d \"Deleted Account: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountsManager accountsManager \u003d model.getAccountsManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        List\u003cAccount\u003e lastShownList \u003d model.getAccountsManager().getFilteredAccountList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Account accountToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (model.getAccountsManager().getAccounts().size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            //there is only one active account left, which should not be deleted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_LAST_ACCOUNT_DELETION_ILLEGAL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        accountsManager.deleteAccount(accountToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ACCOUNT_SUCCESS, accountToDelete),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                CommandCategory.ACCOUNT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                || (other instanceof AccountDeleteCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "ChenJiehan318": 54,
      "cambrian-dk": 8,
      "thwnus": 3
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/accountcommands/AccountEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.commands.accountcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.AccountsManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.account.exceptions.AccountNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Edits an account"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountEditCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"account edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits an account.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"\u003caccount number\u003e \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + String.format(\"[%sNAME]\", PREFIX_NAME) + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + String.format(\"[%sDESCRIPTION]\", PREFIX_DESCRIPTION) + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + PREFIX_NAME + \"food\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Account edited: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_UNEDITED \u003d \"At least one field must be provided for editing.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"The account targeted for editing could not be found.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final Index targetAccountIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final AccountEditDescriptor accountEditDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountEditCommand(Index targetAccountIndex, AccountEditDescriptor accountEditDescriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(targetAccountIndex, accountEditDescriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.targetAccountIndex \u003d targetAccountIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.accountEditDescriptor \u003d new AccountEditDescriptor(accountEditDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountsManager accountsManager \u003d model.getAccountsManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        accountsManager.resetFilteredAccountList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Account editedAccount;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            Account targetAccount \u003d accountsManager.getAccount(targetAccountIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            editedAccount \u003d createEditedAccount(targetAccount, accountEditDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            accountsManager.editAccount(targetAccountIndex, editedAccount);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        } catch (AccountNotFoundException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedAccount), CommandCategory.ACCOUNT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Creates and returns a {@code Account} with the details of {@code accountToEdit},"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * edited with {@code accountEditDescriptor}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private static Account createEditedAccount(Account accountToEdit, AccountEditDescriptor accountEditDescriptor) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        assert accountToEdit !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Name updatedName \u003d accountEditDescriptor.getName().orElse(accountToEdit.getName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Description updatedDescription \u003d accountEditDescriptor.getDescription().orElse(accountToEdit.getDescription());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new Account(updatedName, updatedDescription, accountToEdit.getTransactionList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!(other instanceof AccountEditCommand)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountEditCommand otherCommand \u003d (AccountEditCommand) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return targetAccountIndex.equals(otherCommand.targetAccountIndex)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 accountEditDescriptor.equals(otherCommand.accountEditDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Stores the details to edit the loan with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static class AccountEditDescriptor {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        public AccountEditDescriptor() {}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        public AccountEditDescriptor(AccountEditDescriptor toCopy) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "         * Returns true if any field is edited."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            if (!(other instanceof AccountEditDescriptor)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            AccountEditDescriptor e \u003d (AccountEditDescriptor) other;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 147,
      "cambrian-dk": 1,
      "thwnus": 3
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/accountcommands/AccountFindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.commands.accountcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.AccountsManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.NameHasKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Finds and lists all accounts in accountsManager whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountFindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"account find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all accounts whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" trip\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final NameHasKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountFindCommand(NameHasKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountsManager accountsManager \u003d model.getAccountsManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        accountsManager.updateFilteredAccountList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (accountsManager.getFilteredAccountList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            accountsManager.resetFilteredAccountList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                    String.format(Messages.MESSAGE_ACCOUNT_SEARCH_RESULTS_EMPTY,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                            accountsManager.getFilteredAccountList().size()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                    CommandCategory.ACCOUNT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                String.format(Messages.MESSAGE_ACCOUNTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                        accountsManager.getFilteredAccountList().size()), CommandCategory.ACCOUNT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                || (other instanceof AccountFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 predicate.equals(((AccountFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 48,
      "cambrian-dk": 7,
      "thwnus": 2
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/accountcommands/AccountListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.commands.accountcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Lists accounts."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"account list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all accounts.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Accounts listed.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        model.getAccountsManager().resetFilteredAccountList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        String resultMessage \u003d MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new CommandResult(resultMessage, CommandCategory.ACCOUNT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 29,
      "thwnus": 1
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/LoanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Adds a loan."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a loan.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"out|in \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_PERSON + \"PERSON \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"out \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_PERSON + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_AMOUNT + \"4.20 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Weed money. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_DATE + \"4/12/2020\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New loan added:\\n%1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Loan toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanCommand(Loan loan) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(loan);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        toAdd \u003d loan;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(model, model.getLoansManager());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        model.getLoansManager().addLoan(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), CommandCategory.LOAN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanCommand)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoanCommand otherCommand \u003d (LoanCommand) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return toAdd.equals(otherCommand.toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 9,
      "kenneth-fung": 59
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/LoanDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.exceptions.LoanNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Delete one or more loans."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanDeleteCommand extends MultiLoanCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes one or more loans.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + MULTI_LOAN_SYNTAX"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + MULTI_LOAN_SYNTAX_EXAMPLE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Loan(s) %1$s deleted.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanDeleteCommand(List\u003cIndex\u003e loanIndices, List\u003cPerson\u003e persons) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(loanIndices, persons);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(model, model.getLoansManager());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansManager loansManager \u003d model.getLoansManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cIndex\u003e targetLoanIndices \u003d constructTargetLoanIndicesList(loansManager);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Consumer\u003cIndex\u003e deleteLoanOp \u003d loansManager::deleteLoan;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        actOnTargetLoans(targetLoanIndices, deleteLoanOp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String resultMessage \u003d constructMultiLoanResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new CommandResult(resultMessage, CommandCategory.LOAN);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * The indices of loans in the list will (potentially) change after each deletion."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * This version of multi-loan targeting takes this into account"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * when passing the target indices to the given operation."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void actOnTargetLoans(List\u003cIndex\u003e targetLoanIndices, Consumer\u003cIndex\u003e operation) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        int indicesProcessed \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // indices MUST be sorted before iteration"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        targetLoanIndices.sort(Comparator.comparingInt(Index::getZeroBased));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (Index index : targetLoanIndices) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                operation.accept(Index.fromZeroBased(index.getZeroBased() - indicesProcessed));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                indicesProcessed++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                hitLoanIndices.add(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } catch (LoanNotFoundException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                missingLoanIndices.add(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanDeleteCommand)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return super.equals(other);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 7,
      "kenneth-fung": 74
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/LoanEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.exceptions.LoanNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Edits a loan."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanEditCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a loan.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"\u003cloan number\u003e \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"[%sPERSON] \", PREFIX_PERSON)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"[%sAMOUNT] \", PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"[%sDESCRIPTION] \", PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"[%sDATE]\\n\", PREFIX_DATE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_AMOUNT + \"4.30\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Loan %1$d edited.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_UNEDITED \u003d \"At least one field must be provided for editing.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"The loan targeted for editing could not be found.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Index targetLoanIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final LoanEditDescriptor loanEditDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanEditCommand(Index targetLoanIndex, LoanEditDescriptor loanEditDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(targetLoanIndex, loanEditDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.targetLoanIndex \u003d targetLoanIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loanEditDescriptor \u003d new LoanEditDescriptor(loanEditDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(model, model.getLoansManager());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansManager loansManager \u003d model.getLoansManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Loan editedLoan;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Loan targetLoan \u003d loansManager.getLoan(targetLoanIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            editedLoan \u003d createEditedLoan(targetLoan, loanEditDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loansManager.editLoan(targetLoanIndex, editedLoan);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (LoanNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                String.format(MESSAGE_SUCCESS, targetLoanIndex.getOneBased()), CommandCategory.LOAN);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Creates and returns a {@code Loan} with the details of {@code loanToEdit},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * edited with {@code loanEditDescriptor}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static Loan createEditedLoan(Loan loanToEdit, LoanEditDescriptor loanEditDescriptor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assert loanToEdit !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Person updatedPerson \u003d loanEditDescriptor.getPerson().orElse(loanToEdit.getPerson());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Direction updatedDirection \u003d loanEditDescriptor.getDirection().orElse(loanToEdit.getDirection());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Amount updatedAmount \u003d loanEditDescriptor.getAmount().orElse(loanToEdit.getAmount());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Date updatedDate \u003d loanEditDescriptor.getDate().orElse(loanToEdit.getDate());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Description updatedDescription \u003d loanEditDescriptor.getDescription().orElse(loanToEdit.getDescription());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Status updatedStatus \u003d loanEditDescriptor.getStatus().orElse(loanToEdit.getStatus());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Loan(updatedPerson, updatedDirection, updatedAmount,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                updatedDate, updatedDescription, updatedStatus);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanEditCommand)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoanEditCommand otherCommand \u003d (LoanEditCommand) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return targetLoanIndex.equals(otherCommand.targetLoanIndex)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 loanEditDescriptor.equals(otherCommand.loanEditDescriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Stores the details to edit the loan with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * corresponding field value of the loan."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static class LoanEditDescriptor {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private Person person;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private Direction direction;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private Status status;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public LoanEditDescriptor() {}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public LoanEditDescriptor(LoanEditDescriptor toCopy) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            setPerson(toCopy.person);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            setDirection(toCopy.direction);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "         * Returns true if any field is edited."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return CollectionUtil.isAnyNonNull(person, direction, amount, date, description, status);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public void setPerson(Person person) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public Optional\u003cPerson\u003e getPerson() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.ofNullable(person);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public void setDirection(Direction direction) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.direction \u003d direction;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public Optional\u003cDirection\u003e getDirection() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.ofNullable(direction);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public void setStatus(Status status) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public Optional\u003cStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (!(other instanceof LoanEditDescriptor)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            LoanEditDescriptor e \u003d (LoanEditDescriptor) other;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return getPerson().equals(e.getPerson())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 getDirection().equals(e.getDirection())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 getStatus().equals(e.getStatus());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 13,
      "cambrian-dk": 1,
      "kenneth-fung": 191,
      "thwnus": 2
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/LoanListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.DATE_EXAMPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.KEYWORD_LOAN_IN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.KEYWORD_LOAN_OUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.KEYWORD_LOAN_PAID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.KEYWORD_LOAN_UNPAID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_SORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.SORT_ARG_AMOUNT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.SORT_ARG_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.SORT_ARG_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.model.loan.LoanFilters.FILTER_ALL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Lists loans."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanListCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan list\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all loans.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"[%s|%s|\", KEYWORD_LOAN_OUT, KEYWORD_LOAN_IN)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"%s|%s ...] \", KEYWORD_LOAN_UNPAID, KEYWORD_LOAN_PAID)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"[\" + PREFIX_PERSON + \"PERSON ...] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT ...] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE ...] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION ...] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"[%s\u003c%s|%s|%s\u003e]\\n\", PREFIX_SORT, SORT_ARG_DATE, SORT_ARG_AMOUNT, SORT_ARG_PERSON)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"%s %s %s \", COMMAND_WORD, KEYWORD_LOAN_OUT, KEYWORD_LOAN_UNPAID)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"%sJohn %sMary %s%s \", PREFIX_PERSON, PREFIX_PERSON, PREFIX_DATE, DATE_EXAMPLE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"%s%s\", PREFIX_SORT, SORT_ARG_AMOUNT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Loans listed.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SORTED \u003d \"Sorted.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_FILTERED \u003d \"Filtered.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_NO_LOANS \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"No loans found in your list. Nobody owes anybody money... for now.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Optional\u003cComparator\u003cLoan\u003e\u003e optionalSorter;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private List\u003cPredicate\u003cLoan\u003e\u003e filters;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanListCommand(Optional\u003cComparator\u003cLoan\u003e\u003e optionalSorter, List\u003cPredicate\u003cLoan\u003e\u003e filters) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.optionalSorter \u003d optionalSorter;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.filters \u003d new ArrayList\u003cPredicate\u003cLoan\u003e\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.filters.addAll(filters);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(model, model.getLoansManager());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (model.getLoansManager().getLoans().isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return new CommandResult(MESSAGE_NO_LOANS, CommandCategory.LOAN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String resultMessage \u003d MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (optionalSorter.isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            model.getLoansManager().sortLoans(optionalSorter.get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            resultMessage +\u003d \" \" + MESSAGE_SORTED;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        model.getLoansManager().updateFilteredList(filters.stream().reduce(Predicate::or).orElse(FILTER_ALL));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!filters.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            resultMessage +\u003d \" \" + MESSAGE_FILTERED;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new CommandResult(resultMessage, CommandCategory.LOAN);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "kenneth-fung": 84
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/LoanPaidCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Marks one or more loans as paid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanPaidCommand extends UpdateStatusCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan paid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks one or more loans as paid.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + MULTI_LOAN_SYNTAX"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + MULTI_LOAN_SYNTAX_EXAMPLE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Loan(s) %1$s marked as paid.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanPaidCommand(List\u003cIndex\u003e loanIndices, List\u003cPerson\u003e persons) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(loanIndices, persons);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(model, model.getLoansManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        updateStatuses(model.getLoansManager(), Status.PAID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String result \u003d constructMultiLoanResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new CommandResult(result, CommandCategory.LOAN);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanPaidCommand)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return super.equals(other);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "kenneth-fung": 47
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/LoanSplitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.generateCombinations;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.hasDuplicates;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_USER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Map.Entry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Debtor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Splits a group payment among a list of persons."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Optionally adds debts from the resulting list to the loans manager."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanSplitCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan split\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            COMMAND_WORD + \": Splits a group payment into a list of who owes who how much.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + \"Optionally adds loans from the resulting list to your existing loan list.\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + PREFIX_USER + \"YOUR_NAME \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + PREFIX_PERSON + \"PERSON \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + \"...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + PREFIX_PERSON + \"Mary \" + PREFIX_AMOUNT + \"10 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + PREFIX_PERSON + \"John \" + PREFIX_AMOUNT + \"90 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + PREFIX_PERSON + \"Satan \" + PREFIX_AMOUNT + \"0\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Loans split.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS_LOANS_ADDED \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"Loans split. Debts that you owe/are owed to you have been added to your loan list.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_PERSON_AMOUNT_NUMBERS_MISMATCH \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"The number of persons does not match the number of payments.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSONS \u003d \"Names of persons entered must be unique.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_INVALID_TOTAL \u003d \"Total amount must be more than zero.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_ALREADY_SPLIT_EQUALLY \u003d \"The amounts have already been split equally.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"Your name must match (case-sensitive) exactly one of those in the group.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private HashMap\u003cPerson, Amount\u003e personAmountMap;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private List\u003cDebtorCreditorAmount\u003e debtorCreditorAmountList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Optional\u003cPerson\u003e optionalUser;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Optional\u003cDescription\u003e optionalDescription;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Optional\u003cDate\u003e optionalDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Constructs a hash map with a person as the key and the amount they paid as the value."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * The hash map is used during execution to calculate the splitting of payment."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param persons The list of persons to use in constructing the hash map."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param amounts The list of amounts to be mapped to the list of persons."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param optionalUser The user as a {@code Person} for identifying the user in {@code persons}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param optionalDescription The description to apply to loans added to the user\u0027s loan list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param optionalDate The date to apply to loans added to the user\u0027s loan list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws CommandException If the number of persons is not equal to the number of amounts,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * or if the list of persons contains duplicates."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanSplitCommand(List\u003cPerson\u003e persons, List\u003cAmount\u003e amounts,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                            Optional\u003cPerson\u003e optionalUser,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                            Optional\u003cDescription\u003e optionalDescription,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                            Optional\u003cDate\u003e optionalDate) throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(persons, amounts);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (persons.size() !\u003d amounts.size()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new CommandException(MESSAGE_PERSON_AMOUNT_NUMBERS_MISMATCH);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } else if (hasDuplicates(persons)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSONS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Person user \u003d new Person(new Name(\"You\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.personAmountMap \u003d new HashMap\u003cPerson, Amount\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (optionalUser.isPresent() \u0026\u0026 optionalUser.get().equals(persons.get(i))) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                personAmountMap.put(user, amounts.get(i));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                personAmountMap.put(persons.get(i), amounts.get(i));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.debtorCreditorAmountList \u003d new ArrayList\u003cDebtorCreditorAmount\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.optionalUser \u003d optionalUser.isPresent() ? Optional.of(user) : optionalUser;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.optionalDescription \u003d optionalDescription;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.optionalDate \u003d optionalDate;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(model, model.getLoansManager());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        long totalAmount \u003d personAmountMap.values().stream()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .map(Amount::toLong)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .reduce(Long::sum)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .orElseThrow(() -\u003e new CommandException(MESSAGE_INVALID_TOTAL));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        long perPerson \u003d totalAmount / personAmountMap.size();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cParticipant\u003e participants \u003d new ArrayList\u003cParticipant\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (Entry\u003cPerson, Amount\u003e personAmountEntry : personAmountMap.entrySet()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            long amountPaid \u003d personAmountEntry.getValue().toLong();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            long balance \u003d amountPaid - perPerson;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            participants.add(new Participant(personAmountEntry.getKey(), balance));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (participants.stream().allMatch(p -\u003e p.getBalance() \u003e\u003d 0)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_SPLIT_EQUALLY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Comparator\u003cParticipant\u003e sortBalanceIncreasing \u003d Comparator.comparingLong(Participant::getBalance);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        debtorCreditorAmountList.addAll(findSubGroups(participants, sortBalanceIncreasing));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        debtorCreditorAmountList.addAll(calculateSplitList(participants, sortBalanceIncreasing));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (optionalUser.isPresent()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            constructUserLoansList(optionalUser.get()).forEach(loan -\u003e model.getLoansManager().addLoan(loan));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        model.getLoansManager().setDebtors(constructDebtorsList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                optionalUser.isPresent() ? MESSAGE_SUCCESS_LOANS_ADDED : MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                CommandCategory.LOAN_SPLIT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Finds all sub-groups among participants and checks the balance of each sub-group."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * If the balance is zero, {@code calculateSplitList} is called for the sub-group."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * This method, while expensive, will minimize the total number of debts."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private List\u003cDebtorCreditorAmount\u003e findSubGroups("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            List\u003cParticipant\u003e participants, Comparator\u003cParticipant\u003e balanceIncreasing) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(participants, balanceIncreasing);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cDebtorCreditorAmount\u003e debtorCreditorAmountList \u003d new ArrayList\u003cDebtorCreditorAmount\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (int i \u003d 2; i \u003c participants.size(); i++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            List\u003cList\u003cParticipant\u003e\u003e participantSubGroups \u003d generateCombinations(participants);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            for (List\u003cParticipant\u003e subGroup : participantSubGroups) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                long subGroupBalance \u003d subGroup.stream()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        .mapToLong(Participant::getBalance)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        .reduce(0, Long::sum);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                if (subGroupBalance \u003d\u003d 0) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    debtorCreditorAmountList.addAll(calculateSplitList(subGroup, balanceIncreasing));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return debtorCreditorAmountList;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Fills and returns a {@link DebtorCreditorAmount} list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param participants The list of particpants to calculate the debts from."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param balanceIncreasing A {@code Comparator} to sort participants in order of increasing balance."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private List\u003cDebtorCreditorAmount\u003e calculateSplitList("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            List\u003cParticipant\u003e participants, Comparator\u003cParticipant\u003e balanceIncreasing) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(participants, balanceIncreasing);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cDebtorCreditorAmount\u003e debtorCreditorAmountList \u003d new ArrayList\u003cDebtorCreditorAmount\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (participants.stream().noneMatch(p -\u003e p.getBalance() !\u003d 0)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            participants.clear();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return debtorCreditorAmountList;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        while (participants.size() \u003e 1) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Participant debtor \u003d participants.stream().min(balanceIncreasing).get();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Participant creditor \u003d participants.stream().max(balanceIncreasing).get();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            // transfer money between the biggest debtor and biggest creditor"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            long amountTransferred \u003d 0;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            long debtorBalancePositive \u003d debtor.getBalance() * -1;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (debtorBalancePositive \u003e\u003d creditor.getBalance()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                amountTransferred \u003d creditor.getBalance();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                debtor.setBalance(debtor.getBalance() + creditor.getBalance());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                creditor.setBalance(0);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } else if (debtorBalancePositive \u003c creditor.getBalance()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                amountTransferred \u003d debtorBalancePositive;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                creditor.setBalance(creditor.getBalance() - debtorBalancePositive);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                debtor.setBalance(0);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (debtor.getBalance() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                participants.remove(debtor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (creditor.getBalance() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                participants.remove(creditor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (amountTransferred !\u003d 0) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                debtorCreditorAmountList.add("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        new DebtorCreditorAmount("
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                                debtor.person, creditor.person, new Amount(amountTransferred)));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return debtorCreditorAmountList;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Uses the {@code debtorCreditorAmountList} to find all loans belonging to the given {@code user}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return A {@code List} of {@code Loan} objects to be added to the loans manager."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws CommandException If the user is not found in {@code personAmountMap}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private List\u003cLoan\u003e constructUserLoansList(Person user) throws CommandException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(personAmountMap, debtorCreditorAmountList, user, optionalDescription);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (personAmountMap.keySet().stream().noneMatch(person -\u003e person.equals(user))) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new CommandException(MESSAGE_USER_NOT_FOUND);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cLoan\u003e userLoans \u003d new ArrayList\u003cLoan\u003e();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        debtorCreditorAmountList.forEach(debtorCreditorAmount -\u003e {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (debtorCreditorAmount.debtor.equals(user)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                userLoans.add(new Loan("
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        debtorCreditorAmount.creditor, Direction.IN, debtorCreditorAmount.amount,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        optionalDate.orElse(new Date()), optionalDescription.orElse(new Description(\"\")),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        Status.UNPAID));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } else if (debtorCreditorAmount.creditor.equals(user)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                userLoans.add(new Loan("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        debtorCreditorAmount.debtor, Direction.OUT, debtorCreditorAmount.amount,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        optionalDate.orElse(new Date()), optionalDescription.orElse(new Description(\"\")),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        Status.UNPAID));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        });"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return userLoans;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Constructs and returns a list of {@code Debtor} objects using {@code debtorCreditorAmountList}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private List\u003cDebtor\u003e constructDebtorsList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(debtorCreditorAmountList);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        debtorCreditorAmountList.sort(Comparator.comparing(dca -\u003e dca.debtor.getName().toString()));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cDebtor\u003e debtors \u003d new ArrayList\u003cDebtor\u003e();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Person currDebtor \u003d debtorCreditorAmountList.get(0).debtor;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        HashMap\u003cPerson, Amount\u003e currCreditors \u003d new HashMap\u003cPerson, Amount\u003e();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (DebtorCreditorAmount dca : debtorCreditorAmountList) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (!dca.debtor.equals(currDebtor)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                // new debtor reached in sorted list; add current debtor to list of debtors"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                debtors.add(new Debtor(currDebtor, currCreditors));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                currDebtor \u003d dca.debtor;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                currCreditors.clear();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            currCreditors.put(dca.creditor, dca.amount);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        debtors.add(new Debtor(currDebtor, currCreditors));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return debtors;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanSplitCommand)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoanSplitCommand otherCommand \u003d (LoanSplitCommand) other;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return personAmountMap.equals(otherCommand.personAmountMap);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * A utility class that holds a {@code Person} and their {@code balance} relative to the total pool of money."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * This class is used only for the calculations involved in splitting a group payment."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private class Participant {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public final Person person;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private long balance;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public Participant(Person person, long balance) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.balance \u003d balance;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public long getBalance() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return balance;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public void setBalance(long balance) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.balance \u003d balance;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return String.format(\"\u003c%s, %d\u003e\", person, balance);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (!(other instanceof Participant)) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Participant otherParticipant \u003d (Participant) other;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return person.equals(otherParticipant.person)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 balance \u003d\u003d otherParticipant.balance;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * A utility class containing information about a debtor and the money they owe to a creditor."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static class DebtorCreditorAmount {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public final Person debtor;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public final Person creditor;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public final Amount amount;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public DebtorCreditorAmount(Person debtor, Person creditor, Amount amount) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.debtor \u003d debtor;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.creditor \u003d creditor;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return String.format(\"%s, %s, %s\", debtor, creditor, amount);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 363
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/LoanUnpaidCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Marks one or more loans as unpaid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanUnpaidCommand extends UpdateStatusCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan unpaid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks one or more loans as unpaid.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + MULTI_LOAN_SYNTAX"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + MULTI_LOAN_SYNTAX_EXAMPLE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Loan(s) %1$s marked as unpaid.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanUnpaidCommand(List\u003cIndex\u003e loanIndices, List\u003cPerson\u003e persons) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(loanIndices, persons);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(model, model.getLoansManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        updateStatuses(model.getLoansManager(), Status.UNPAID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String result \u003d constructMultiLoanResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new CommandResult(result, CommandCategory.LOAN);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanUnpaidCommand)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return super.equals(other);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "kenneth-fung": 47
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/MultiLoanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.hasDuplicates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.exceptions.LoanNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents a command that can handle multiple targeted loans."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public abstract class MultiLoanCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected static final String MULTI_LOAN_SYNTAX \u003d \"\u003cloan number... \u003e [p/\u003cperson\u003e ...]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected static final String MULTI_LOAN_SYNTAX_EXAMPLE \u003d \"1 3 4 p/Peter p/Mary\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final String MESSAGE_NO_TARGETS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"No loan indices or persons given as targets.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_TARGETS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"Duplicate loan targets detected.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final String MESSAGE_NO_TARGETS_HIT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"None of the targeted loans could be found.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected List\u003cIndex\u003e hitLoanIndices;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected List\u003cIndex\u003e missingLoanIndices;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private List\u003cIndex\u003e loanIndices;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private List\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Constructs a command capable of targeting multiple loans to act upon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param loanIndices A list of loan indices to target."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param persons A list of persons; loans belonging to any of these persons will be targeted."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws CommandException If {@link #checkTargetLists} throws a {@code CommandException}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public MultiLoanCommand(List\u003cIndex\u003e loanIndices, List\u003cPerson\u003e persons) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(loanIndices, persons);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loanIndices \u003d new ArrayList\u003cIndex\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.persons \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.hitLoanIndices \u003d new ArrayList\u003cIndex\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.missingLoanIndices \u003d new ArrayList\u003cIndex\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        checkTargetLists(loanIndices, persons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loanIndices.addAll(loanIndices);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Checks for errors in the given lists during construction."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws CommandException If both lists are empty, if either list has repeated entries."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static void checkTargetLists(List\u003cIndex\u003e loanIndices, List\u003cPerson\u003e persons) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(loanIndices, persons);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (loanIndices.isEmpty() \u0026\u0026 persons.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new CommandException(MESSAGE_NO_TARGETS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (hasDuplicates(loanIndices) || hasDuplicates(persons)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TARGETS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Constructs and a sorted list of target loan indices to be acted upon by this command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Both the loan indices and persons list are used in the construction."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Duplicates detected in the final list are removed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected List\u003cIndex\u003e constructTargetLoanIndicesList(LoansManager loansManager) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cIndex\u003e targetLoanIndices \u003d new ArrayList\u003cIndex\u003e(loanIndices);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            for (int i \u003d 0; i \u003c loansManager.getLoansCount(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                Index index \u003d Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                if (loansManager.getLoan(index).getPerson().isSamePerson(person)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    targetLoanIndices.add(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return targetLoanIndices.stream().distinct().collect(Collectors.toList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Executes a given operation on loans targeted using the given list of indices."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param operation A `Consumer` that takes an index, gets the loan with that index, and acts on the loan."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected void actOnTargetLoans(List\u003cIndex\u003e targetLoanIndices, Consumer\u003cIndex\u003e operation) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (Index index : targetLoanIndices) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                operation.accept(index);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                hitLoanIndices.add(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } catch (LoanNotFoundException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                missingLoanIndices.add(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Assembles a result message that takes into account targeted loans not found in the loans manager."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param successMessage Message for when at least one target was found and acted upon."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The result message."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected String constructMultiLoanResult(String successMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        successMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                successMessage,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                hitLoanIndices.stream()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        .map(index -\u003e String.format(\"%d\", index.getOneBased()))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        .collect(Collectors.joining(\", \")));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (missingLoanIndices.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return successMessage;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (hitLoanIndices.isEmpty()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return MESSAGE_NO_TARGETS_HIT;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        StringBuilder resultMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        resultMessage.append(successMessage).append(\"\\n\").append(\"However, the following loans were not found: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (Index missingIndex : missingLoanIndices) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            resultMessage"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    .append(String.format(\"%d\", missingIndex.getOneBased()))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    .append(\", \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        resultMessage.delete(resultMessage.length() - 2, resultMessage.length() - 1); // remove \", \" at end"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return resultMessage.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof MultiLoanCommand)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        MultiLoanCommand otherCommand \u003d (MultiLoanCommand) other;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loanIndices.equals(otherCommand.loanIndices)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 persons.equals(otherCommand.persons);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "kenneth-fung": 153
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/UpdateStatusCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Updates the status of a loan."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public abstract class UpdateStatusCommand extends MultiLoanCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public UpdateStatusCommand(List\u003cIndex\u003e loanIndices, List\u003cPerson\u003e persons) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(loanIndices, persons);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Updates the statuses of one or more existing loans to the given status."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected void updateStatuses(LoansManager loansManager, Status updatedStatus) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(loansManager, updatedStatus);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cIndex\u003e targetLoanIndices \u003d constructTargetLoanIndicesList(loansManager);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Consumer\u003cIndex\u003e updateStatusOp \u003d targetIndex -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Loan updatedLoan \u003d createUpdatedLoan(loansManager.getLoan(targetIndex), updatedStatus);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loansManager.editLoan(targetIndex, updatedLoan);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        actOnTargetLoans(targetLoanIndices, updateStatusOp);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Creates a new {@code Loan} with the updated {@code Status}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param oldLoan The {@code Loan} targeted for a status update."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param updatedStatus The new {@code Status}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The new, updated {@code Loan}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Loan createUpdatedLoan(Loan oldLoan, Status updatedStatus) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Loan(oldLoan.getPerson(), oldLoan.getDirection(), oldLoan.getAmount(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                oldLoan.getDate(), oldLoan.getDescription(), updatedStatus);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "kenneth-fung": 44
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/rulecommands/RuleAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.rulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_NO_SUCH_SCRIPT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PREDICATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.RuleManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ScriptLibrary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.ActionScript;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.PredicateScript;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Adds a rule."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleAddCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rule add\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new rule.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + PREFIX_PREDICATE + \"PREDICATE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + PREFIX_ACTION + \"ACTION\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + PREFIX_PREDICATE + \"desc contains food \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + PREFIX_ACTION + \"set_cat Food\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New rule added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RULE \u003d \"This rule already exists in the Rule Engine.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Rule rule;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Creates a RuleAddCommand to add the specified {@code Rule}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleAddCommand(Rule rule) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(rule);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.rule \u003d rule;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, model.getRuleManager(), model.getScriptLibrary());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleManager ruleManager \u003d model.getRuleManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ScriptLibrary scriptLibrary \u003d model.getScriptLibrary();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (ruleManager.hasRule(rule)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RULE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RulePredicate pred \u003d rule.getPredicate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (pred.getType().equals(Rule.TYPE_SCRIPT)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ScriptName scriptName \u003d ((PredicateScript) pred).getScriptName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (scriptLibrary.getScript(scriptName) \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NO_SUCH_SCRIPT, scriptName));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleAction act \u003d rule.getAction();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (act.getType().equals(Rule.TYPE_SCRIPT)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ScriptName scriptName \u003d ((ActionScript) act).getScriptName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (scriptLibrary.getScript(scriptName) \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NO_SUCH_SCRIPT, scriptName));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ruleManager.addRule(rule);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, rule), CommandCategory.RULE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 80
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/rulecommands/RuleDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.rulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.RuleManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.exceptions.RuleNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Delete a rule from budget buddy."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleDeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rule delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a rule.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"\u003crule index\u003e \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Rule #%1$d Deleted.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, model.getRuleManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleManager ruleManager \u003d model.getRuleManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ruleManager.deleteRule(targetIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()), CommandCategory.RULE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } catch (RuleNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                || (other instanceof RuleDeleteCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 53
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/rulecommands/RuleEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.rulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_NO_SUCH_SCRIPT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PREDICATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.RuleManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ScriptLibrary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.exceptions.RuleNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.ActionScript;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.PredicateScript;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Edits a rule."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleEditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rule edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a rule.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"\u003crule index\u003e \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"[\" + PREFIX_PREDICATE + \"PREDICATE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"[\" + PREFIX_ACTION + \"ACTION]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + PREFIX_PREDICATE + \"desc contains daily\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Rule #%1$d edited.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_UNEDITED \u003d \"At least one field must be provided for editing.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"The rule targeted for editing could not be found.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final RuleEditDescriptor ruleEditDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleEditCommand(Index targetIndex, RuleEditDescriptor ruleEditDescriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(targetIndex, ruleEditDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.ruleEditDescriptor \u003d new RuleEditDescriptor(ruleEditDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, model.getRuleManager(), model.getScriptLibrary());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleManager ruleManager \u003d model.getRuleManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ScriptLibrary scriptLibrary \u003d model.getScriptLibrary();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Rule targetRule \u003d ruleManager.getRule(targetIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Rule editedRule \u003d createEditedRule(targetRule, ruleEditDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RulePredicate editedPred \u003d editedRule.getPredicate();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (editedPred.getType().equals(Rule.TYPE_SCRIPT)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ScriptName scriptName \u003d ((PredicateScript) editedPred).getScriptName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (scriptLibrary.getScript(scriptName) \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NO_SUCH_SCRIPT, scriptName));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleAction editedAct \u003d editedRule.getAction();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (editedAct.getType().equals(Rule.TYPE_SCRIPT)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ScriptName scriptName \u003d ((ActionScript) editedAct).getScriptName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (scriptLibrary.getScript(scriptName) \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NO_SUCH_SCRIPT, scriptName));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ruleManager.editRule(targetIndex, editedRule);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } catch (RuleNotFoundException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()), CommandCategory.RULE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Creates and returns a {@code Rule} with the details of {@code ruleToEdit},"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * edited with {@code ruleEditDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static Rule createEditedRule(Rule ruleToEdit, RuleEditDescriptor ruleEditDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assert ruleToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RulePredicate updatedPredicate \u003d ruleEditDescriptor.getPredicate().orElse(ruleToEdit.getPredicate());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleAction updatedAction \u003d ruleEditDescriptor.getAction().orElse(ruleToEdit.getAction());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new Rule(updatedPredicate, updatedAction);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!(other instanceof RuleEditCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleEditCommand otherCommand \u003d (RuleEditCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return targetIndex.equals(otherCommand.targetIndex)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 ruleEditDescriptor.equals(otherCommand.ruleEditDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Stores the details to edit the rule with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * corresponding field value of the rule."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static class RuleEditDescriptor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        private RulePredicate predicate;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        private RuleAction action;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        public RuleEditDescriptor() {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        public RuleEditDescriptor(RuleEditDescriptor toCopy) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            setPredicate(toCopy.predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            setAction(toCopy.action);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         * Returns true if any field is edited."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return CollectionUtil.isAnyNonNull(predicate, action);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        public void setPredicate(RulePredicate predicate) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        public Optional\u003cRulePredicate\u003e getPredicate() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return Optional.ofNullable(predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        public void setAction(RuleAction action) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            this.action \u003d action;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        public Optional\u003cRuleAction\u003e getAction() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return Optional.ofNullable(action);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (!(other instanceof RuleEditDescriptor)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            RuleEditDescriptor e \u003d (RuleEditDescriptor) other;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return getPredicate().equals(e.getPredicate())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    \u0026\u0026 getAction().equals(e.getAction());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 172
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/rulecommands/RuleListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.rulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Lists all rules."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rule list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all rules.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"rule list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Rules listed in order of addition.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_NO_RULES \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"No rules found in the Rule Engine. Make a new rule with `rule add`.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, model.getRuleManager());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                model.getRuleManager().getRules().isEmpty()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                        ? MESSAGE_NO_RULES"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                        : MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                CommandCategory.RULE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 34
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/scriptcommands/ScriptAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.scriptcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.ScriptLibrary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.Script;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Adds a script to, or updates a script in, the script library."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptAddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"script add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a script to the script library.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            + \"Usage: \" + COMMAND_WORD + \" \u003cscript name\u003e [d/\u003cdescription\u003e] [p/\u003cfile path\u003e | s/\u003csource\u003e]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" delete-everything d/Deletes everything. s/\\\"Just kidding!\\\";\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_SCRIPT_UPDATED \u003d \"Script %1$s updated.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_SCRIPT_ADDED \u003d \"New script %1$s added.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_INVALID_PATH \u003d \"Invalid path.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final ScriptName scriptName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final Path scriptPath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final String scriptSource;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptAddCommand(ScriptName name, Description description, Path scriptPath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireAllNonNull(name, description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.scriptName \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.scriptPath \u003d scriptPath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.scriptSource \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptAddCommand(ScriptName name, Description description, String scriptSource) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireAllNonNull(name, description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.scriptName \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.scriptSource \u003d scriptSource;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.scriptPath \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    protected CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptLibrary library \u003d model.getScriptLibrary();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (scriptSource !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            Script newScript \u003d new Script(scriptName, description, scriptSource);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            boolean updated \u003d library.addScript(newScript);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                    String.format(updated ? MESSAGE_SCRIPT_UPDATED : MESSAGE_SCRIPT_ADDED, scriptName),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                    CommandCategory.SCRIPT"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            // TODO"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new CommandException(\"TODO: Adding scripts from a file is to-be-implemented.\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                    + \"Please specify the source on the command line using s/.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptAddCommand that \u003d (ScriptAddCommand) o;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return scriptName.equals(that.scriptName)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                \u0026\u0026 description.equals(that.description)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                \u0026\u0026 Objects.equals(scriptPath, that.scriptPath)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                \u0026\u0026 Objects.equals(scriptSource, that.scriptSource);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return Objects.hash(scriptName, description, scriptPath, scriptSource);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 91
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/scriptcommands/ScriptCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.scriptcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.script.ScriptEngine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.script.exceptions.ScriptException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Acts as a base class for commands that run scripts."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public abstract class ScriptCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_NO_RESULT \u003d \"Script succeeded with no result.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_SCRIPT_EXCEPTION \u003d \"Exception thrown during script evaluation\\n%1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public abstract CommandResult execute(Model model, ScriptEngine scriptEngine) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    protected CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return execute(model, null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Helper method to run a script and return a {@link CommandResult} with the result of the script."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param scriptEngine the script engine"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param script the script"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param argv the arguments to pass to the script"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the command result"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws CommandException if an error occurs while running the script"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    protected static CommandResult runScript(ScriptEngine scriptEngine, String script, Object... argv)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            Object result \u003d scriptEngine.evaluateScript(script, argv);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                return new CommandResult(MESSAGE_NO_RESULT, CommandCategory.SCRIPT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                return new CommandResult(result.toString(), CommandCategory.SCRIPT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        } catch (ScriptException se) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_SCRIPT_EXCEPTION, se.getMessage()), se);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 48
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/scriptcommands/ScriptDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.scriptcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_NO_SUCH_SCRIPT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.ScriptLibrary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Deletes a script from the script library."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptDeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"script delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a script from the library.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            + \"Usage: \" + COMMAND_WORD + \" \u003cscript name\u003e\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" delete-everything\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_SCRIPT_DELETED \u003d \"Script %1$s deleted.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final ScriptName scriptName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptDeleteCommand(ScriptName scriptName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireNonNull(scriptName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.scriptName \u003d scriptName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    protected CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptLibrary scriptLibrary \u003d model.getScriptLibrary();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        boolean removed \u003d scriptLibrary.removeScript(scriptName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (removed) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SCRIPT_DELETED, scriptName),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                    CommandCategory.SCRIPT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_SUCH_SCRIPT, scriptName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptDeleteCommand that \u003d (ScriptDeleteCommand) o;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return scriptName.equals(that.scriptName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return Objects.hash(scriptName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 63
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/scriptcommands/ScriptEvalCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.scriptcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.script.ScriptEngine;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Evaluates a script. The script has access to the full model."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptEvalCommand extends ScriptCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"script eval\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final String script;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptEvalCommand(String script) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireNonNull(script);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.script \u003d script;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public CommandResult execute(Model model, ScriptEngine scriptEngine) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireNonNull(scriptEngine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return runScript(scriptEngine, script);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptEvalCommand that \u003d (ScriptEvalCommand) o;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return script.equals(that.script);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return Objects.hash(script);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "thwnus": 45
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/scriptcommands/ScriptListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.scriptcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Lists scripts."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"script list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Scripts listed.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandCategory.SCRIPT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 20
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/scriptcommands/ScriptResetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.scriptcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.script.ScriptEngine;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Resets the script environment."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptResetCommand extends ScriptCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"script reset\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_SCRIPT_RESET \u003d \"Script environment reset.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public CommandResult execute(Model model, ScriptEngine scriptEngine) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        scriptEngine.resetEnvironment();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new CommandResult(MESSAGE_SCRIPT_RESET, CommandCategory.SCRIPT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 21
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/scriptcommands/ScriptRunCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.scriptcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_NO_SUCH_SCRIPT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.script.ScriptEngine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.ScriptLibrary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.Script;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Runs a script from the script library."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptRunCommand extends ScriptCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"script run\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Run a stored script.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            + \"Usage: \" + COMMAND_WORD + \" \u003cscript name\u003e [\u003cargument\u003e]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" delete-everything This entire string is passed to the script.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final ScriptName scriptName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final String arguments;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptRunCommand(ScriptName scriptName, String arguments) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireAllNonNull(scriptName, arguments);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.scriptName \u003d scriptName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public CommandResult execute(Model model, ScriptEngine scriptEngine) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptLibrary scriptLibrary \u003d model.getScriptLibrary();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        Script s \u003d scriptLibrary.getScript(scriptName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (s \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_SUCH_SCRIPT, scriptName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return runScript(scriptEngine, s.getCode(), arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptRunCommand that \u003d (ScriptRunCommand) o;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return scriptName.equals(that.scriptName) \u0026\u0026 arguments.equals(that.arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return Objects.hash(scriptName, arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 62
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/transactioncommands/TransactionAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "package budgetbuddy.logic.commands.transactioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_ACTIVE_ACCOUNT_NOT_FOUND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.DATE_EXAMPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACCOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DIRECTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_RECURRENCE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.scriptcommands.ScriptCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleEngine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.script.ScriptEngine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Adds a transaction."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class TransactionAddCommand extends ScriptCommand {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"txn\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a transaction.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_DIRECTION + \"out|in \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_AMOUNT + \"\u003camount\u003e \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_DESCRIPTION + \"\u003cdescription\u003e \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_ACCOUNT + \"\u003caccount\u003e] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"\u003ccategory\u003e] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"\u003cdate\u003e] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_RECURRENCE + \"\u003cd|w|m|y\u003e]\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_DIRECTION + \"out \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_AMOUNT + \"10 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_DESCRIPTION + \"apple  \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_ACCOUNT + \"food  \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_CATEGORY + \"fruits \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_DATE + DATE_EXAMPLE + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_RECURRENCE + \"d\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Transaction added: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Error adding transaction.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Transaction toAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final Account toAccount;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Creates an AddTransactionCommand to add the specified {@code Transaction}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public TransactionAddCommand(Transaction toAdd, Account toAccount) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.toAccount \u003d toAccount;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public CommandResult execute(Model model, ScriptEngine scriptEngine) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager(), scriptEngine);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        Account realToAccount;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (toAccount !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            realToAccount \u003d model.getAccountsManager().getAccount(toAccount.getName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            realToAccount \u003d model.getAccountsManager().getActiveAccount();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (realToAccount \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            throw new CommandException(MESSAGE_ACTIVE_ACCOUNT_NOT_FOUND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            realToAccount.addTransaction(toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE, CommandCategory.TRANSACTION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Index txnIndex \u003d Index.fromOneBased(realToAccount.getTransactionList().getTransactionsCount());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleEngine.executeRules(model, scriptEngine, txnIndex, realToAccount);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        model.getAccountsManager().transactionListSwitchSource(realToAccount);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        System.out.println(\"current account is \" + realToAccount.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), CommandCategory.TRANSACTION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 9,
      "cambrian-dk": 54,
      "thwnus": 31
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/transactioncommands/TransactionDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "package budgetbuddy.logic.commands.transactioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.KEYWORD_SINGLE_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Represents the command to delete a transaction."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionDeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"txn delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes transactions with the specified ID\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + KEYWORD_SINGLE_ID + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"5\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_DELETE_TRANSACTION_SUCCESS \u003d \"Deleted Transaction: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactions();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Transaction transactionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        model.getAccountsManager().getActiveAccount().deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        model.getAccountsManager().transactionListUpdateSource();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                CommandCategory.TRANSACTION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "cambrian-dk": 42,
      "thwnus": 12
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/transactioncommands/TransactionEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "package budgetbuddy.logic.commands.transactioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.DATE_EXAMPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.KEYWORD_SINGLE_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACCOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DIRECTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_RECURRENCE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.scriptcommands.ScriptCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleEngine;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.script.ScriptEngine;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.AccountsManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Represents a command to edit transactions."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class TransactionEditCommand extends ScriptCommand {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"txn edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a transaction.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + KEYWORD_SINGLE_ID + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_DIRECTION + \"out|in] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"\u003camount\u003e] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"\u003cdescription\u003e] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_ACCOUNT + \"\u003caccount\u003e] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"\u003ccategory\u003e] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"\u003cdate\u003e] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_RECURRENCE + \"\u003cd|w|m|y\u003e]\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"3 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_DIRECTION + \"out \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_AMOUNT + \"10 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_DESCRIPTION + \"apple  \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_ACCOUNT + \"food  \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_CATEGORY + \"fruits \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_DATE + DATE_EXAMPLE + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_RECURRENCE + \"d\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Transaction %1$d edited.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_UNEDITED \u003d \"The edited transaction cannot be the same as the target\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"The transaction targeted for editing could not be found.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Index targetTransactionIndex;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final TransactionEditDescriptor updatedTransactionDescriptor;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private Account targetAccount;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionEditCommand(Index targetTransactionIndex,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                                  TransactionEditDescriptor updatedTransactionDescriptor,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                                  Account targetAccount) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireAllNonNull(targetTransactionIndex, updatedTransactionDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.targetTransactionIndex \u003d targetTransactionIndex;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.updatedTransactionDescriptor \u003d new TransactionEditDescriptor(updatedTransactionDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.targetAccount \u003d targetAccount;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public CommandResult execute(Model model, ScriptEngine scriptEngine) throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager(), scriptEngine);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        AccountsManager accountsManager \u003d model.getAccountsManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            ObservableList\u003cTransaction\u003e targetTransactionList \u003d model.getFilteredTransactions();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            Transaction targetTransaction \u003d targetTransactionList.get(targetTransactionIndex.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            //the transaction will be deleted and re-added to allow for changing of accounts."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            //this is because transactions do not have references to their respective accounts."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            accountsManager.getActiveAccount().deleteTransaction(targetTransaction);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            //target account is set to the active account if not provided."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            if (targetAccount \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                targetAccount \u003d model.getAccountsManager().getActiveAccount();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            Transaction updatedTransaction \u003d updateTransaction(targetTransaction, updatedTransactionDescriptor,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                    targetAccount, model.getAccountsManager().getActiveAccount());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            targetAccount.addTransaction(updatedTransaction);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Index updatedTxnIndex \u003d Index.fromOneBased(targetAccount.getTransactionList().getTransactionsCount());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            RuleEngine.executeRules(model, scriptEngine, updatedTxnIndex, targetAccount);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            model.getAccountsManager().transactionListSwitchSource(targetAccount);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        } catch (TransactionNotFoundException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                String.format(MESSAGE_SUCCESS, targetTransactionIndex.getOneBased()), CommandCategory.TRANSACTION);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (!(other instanceof TransactionEditCommand)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        TransactionEditCommand otherCommand \u003d (TransactionEditCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return targetTransactionIndex.equals(otherCommand.targetTransactionIndex)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 updatedTransactionDescriptor.equals(otherCommand.updatedTransactionDescriptor)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 targetAccount.equals(otherCommand.targetAccount);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Creates and returns a new {@code Transaction} with the details of {@code targetTransaction},"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * edited with {@code transactionEditDescriptor}. Also validates that changes were made to the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * transaction."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private Transaction updateTransaction(Transaction targetTransaction,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                                          TransactionEditDescriptor transactionEditDescriptor,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                                          Account targetAccount,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                                          Account updatedAccount) throws CommandException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Date updatedDate \u003d transactionEditDescriptor.getDate().isPresent()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? transactionEditDescriptor.getDate().get()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                : targetTransaction.getDate();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Amount updatedAmount \u003d transactionEditDescriptor.getAmount().isPresent()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? transactionEditDescriptor.getAmount().get()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                : targetTransaction.getAmount();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Direction updatedDirection \u003d transactionEditDescriptor.getDirection().isPresent()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? transactionEditDescriptor.getDirection().get()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                : targetTransaction.getDirection();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Description updatedDescription \u003d transactionEditDescriptor.getDescription().isPresent()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? transactionEditDescriptor.getDescription().get()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                : targetTransaction.getDescription();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Set\u003cCategory\u003e updatedCategories \u003d !transactionEditDescriptor.getCategories().isEmpty()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? transactionEditDescriptor.getCategories()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                : targetTransaction.getCategories();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Transaction updatedTransaction \u003d new Transaction(updatedDate, updatedAmount, updatedDirection,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                updatedDescription, updatedCategories);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (targetTransaction.equals(updatedTransaction) \u0026\u0026 targetAccount.equals(updatedAccount)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            //no updates were made"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            throw new CommandException(MESSAGE_UNEDITED);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return updatedTransaction;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Stores the details of the new Transaction."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static class TransactionEditDescriptor {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        private Direction direction;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        private Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        public TransactionEditDescriptor() {}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        public TransactionEditDescriptor (TransactionEditDescriptor toCopy) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            this.date \u003d toCopy.date;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            this.amount \u003d toCopy.amount;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            this.direction \u003d toCopy.direction;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            this.description \u003d toCopy.description;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            this.categories \u003d toCopy.categories;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        public Optional\u003cDirection\u003e getDirection() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return Optional.ofNullable(direction);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        public void setDirection(Direction direction) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            this.direction \u003d direction;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        public Set\u003cCategory\u003e getCategories() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return categories;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        public void setCategories (Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            this.categories \u003d categories;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 10,
      "cambrian-dk": 227
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/transactioncommands/TransactionListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "package budgetbuddy.logic.commands.transactioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Lists the transactions of the current active account."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"txn list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all transactions of the current\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"active account.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Transactions listed from account %1$s.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Account activeAccount \u003d model.getAccountsManager().getActiveAccount();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        model.getAccountsManager().transactionListSwitchSource(activeAccount);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        String resultMessage \u003d MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return new CommandResult(String.format(resultMessage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                model.getAccountsManager().getActiveAccount().getName()),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                CommandCategory.TRANSACTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 34
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/view/ViewFilterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACCOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_UNTIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.TransactionMatchesConditionsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Finds and lists all transactions in AccountsManager whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class ViewFilterCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view filter\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters the main transaction view. If no \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"arguments are provided, all transactions are shown. Otherwise, only transactions meeting all \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"the criteria are shown.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Parameters: [\" + PREFIX_ACCOUNT + \"\u003caccount\u003e] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"\u003ccategory\u003e] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_FROM + \"\u003cfrom date\u003e] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_UNTIL + \"/\u003cto date\u003e]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_ACCOUNT + \"School \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_FROM + \"4/2/2420 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_UNTIL + \"5/2/2420\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final TransactionMatchesConditionsPredicate predicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public ViewFilterCommand(TransactionMatchesConditionsPredicate predicate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        model.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                        model.getFilteredTransactions().size()), CommandCategory.TRANSACTION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || (other instanceof ViewFilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 predicate.equals(((ViewFilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "cambrian-dk": 46,
      "thwnus": 12
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        List\u003cString\u003e argValues \u003d argMultimap.get(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (argValues \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            argValues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        List\u003cString\u003e values \u003d argMultimap.get(prefix);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return values \u003d\u003d null || values.isEmpty()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "               ? Optional.empty()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "               : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Returns the number of values for {@code prefix}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param prefix the prefix to check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the number of values for the prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public int getValueCount(Prefix prefix) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return argMultimap.get(prefix).size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "thwnus": 23,
      "-": 55
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_ACCOUNT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final Prefix PREFIX_ACTION \u003d new Prefix(\"act/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"x/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_DIRECTION \u003d new Prefix(\"dn/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_FROM \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_PREDICATE \u003d new Prefix(\"pred/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_UNTIL \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    // Sorting"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Prefix PREFIX_SORT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String SORT_ARG_DATE \u003d \"w\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String SORT_ARG_PERSON \u003d \"p\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String SORT_ARG_AMOUNT \u003d \"x\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    // Loans"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Prefix PREFIX_PERSON \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Prefix PREFIX_USER \u003d new Prefix(\"me/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String KEYWORD_LOAN_OUT \u003d \"out\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String KEYWORD_LOAN_IN \u003d \"in\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String KEYWORD_LOAN_PAID \u003d \"paid\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String KEYWORD_LOAN_UNPAID \u003d \"unpaid\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    // Transactions"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_RECURRENCE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    // Scripts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final Prefix PREFIX_SCRIPT_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final Prefix PREFIX_SCRIPT_PATH \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final Prefix PREFIX_SCRIPT_SOURCE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    // ID selection"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String KEYWORD_SINGLE_ID \u003d \"\u003cid\u003e\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String KEYWORD_MULTIPLE_ID_VARARGS \u003d \"\u003cid... \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    // Date examples"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String DATE_EXAMPLE \u003d \"4/20/2420\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "cambrian-dk": 18,
      "kenneth-fung": 16,
      "thwnus": 5,
      "-": 8
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/CommandLineParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.ServiceLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class CommandLineParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static final Pattern ONEWORD_REGEX \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Used for two-word commands like \u003ccode\u003eaccount edit\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static final Pattern TWOWORD_REGEX \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+\\\\s\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Contains a map of command names to parsers."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final HashMap\u003cString, CommandParser\u003e commandParsers;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Creates a command line parser. Commands are found by searching for"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * all classes implementing the interface {@link CommandParser}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public CommandLineParser() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        commandParsers \u003d loadParsers();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param rawUserInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Command parseCommand(String rawUserInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        final String userInput \u003d rawUserInput.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        CommandParser parser \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        Matcher matcher \u003d TWOWORD_REGEX.matcher(userInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            parser \u003d commandParsers.get(matcher.group(\"commandWord\").toLowerCase());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (parser \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            matcher \u003d ONEWORD_REGEX.matcher(userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            parser \u003d commandParsers.get(matcher.group(\"commandWord\").toLowerCase());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (parser \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return parser.parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Loads all command parsers reachable from the system class loader."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return A map of command names to parsers"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static HashMap\u003cString, CommandParser\u003e loadParsers() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        HashMap\u003cString, CommandParser\u003e ret \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        for (CommandParser parser : ServiceLoader.load(CommandParser.class, null)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            String name \u003d parser.name().toLowerCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (ret.containsKey(name)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                throw new IllegalArgumentException(\"Duplicate command name.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            ret.put(name, parser);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 8,
      "thwnus": 57,
      "-": 24
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents a CommandParser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * All CommandParsers must have a no-argument constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public interface CommandParser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Gets the command name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return The command name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    String name();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "thwnus": 10,
      "-": 11
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/CommandParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.AppUtil.getDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.ActionExpression;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Operator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.PredicateExpression;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.ActionScript;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.PredicateScript;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Contains utility methods used for parsing strings in the various *CommandParser classes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class CommandParserUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index should be a positive integer.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Parses a {@code String account} into an {@code Amount}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @throws ParseException if the given {@code account} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static Account parseAccount(String account) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        String trimmedAccount \u003d account.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new Account(new Name(trimmedAccount), new Description(\"null\"), new TransactionList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Parses a {@code String amount} into an {@code Amount}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String[] dollarCentArray \u003d trimmedAmount.split(\"\\\\.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (dollarCentArray.length \u003c\u003d 0 || dollarCentArray.length \u003e\u003d 3) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (dollarCentArray[0].length() \u003e Amount.MAX_AMOUNT.length()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Long parsedDollars;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (StringUtil.isNonNegativeUnsignedLong(dollarCentArray[0])) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            parsedDollars \u003d Long.parseLong(dollarCentArray[0]) * 100L;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Long parsedCents \u003d 0L;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (dollarCentArray.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (dollarCentArray[1].length() \u003c\u003d 2"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 StringUtil.isNonNegativeUnsignedLong(dollarCentArray[1])) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                parsedCents \u003d dollarCentArray[1].length() \u003d\u003d 1"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        ? Long.parseLong(dollarCentArray[1] + \"0\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        : Long.parseLong(dollarCentArray[1]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                throw new ParseException(Amount.MESSAGE_CENTS_PARSE_ERROR);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Amount(parsedDollars + parsedCents);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return getDateFormat().parse(trimmedDate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String attribute} into a {@code Attribute}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code attribute} is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Attribute parseAttribute(String attribute) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(attribute);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedAttr \u003d attribute.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!Attribute.isValidAttribute(trimmedAttr)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(Attribute.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Attribute.of(trimmedAttr);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String operator} into an {@code Operator}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code operator} is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Operator parseOperator(String operator) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(operator);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedOp \u003d operator.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!Operator.isValidOperator(trimmedOp)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(Operator.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Operator.of(trimmedOp);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String value} into a {@code Value}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code value} is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Value parseValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedValue \u003d value.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!Value.isValidValue(trimmedValue)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(Value.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new Value(trimmedValue);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String expr} into an {@code PredicateExpression}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code expr} is invalid."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static PredicateExpression parsePredicateExpr(String expr) throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(expr);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedExpr \u003d expr.trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Matcher matcher \u003d PredicateExpression.FORMAT_REGEX.matcher(trimmedExpr);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(PredicateExpression.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Attribute attribute \u003d parseAttribute(matcher.group(\"exprAttribute\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Operator operator \u003d parseOperator(matcher.group(\"exprOperator\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Value value \u003d parseValue(matcher.group(\"exprValue\"));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!PredicateExpression.isValidPredicateExpr(attribute, operator, value)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(PredicateExpression.MESSAGE_TYPE_REQUIREMENTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new PredicateExpression(attribute, operator, value);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String expr} into an {@code ActionExpression}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code expr} is invalid."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static ActionExpression parseActionExpr(String expr) throws ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(expr);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedExpr \u003d expr.trim();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Matcher matcher \u003d ActionExpression.FORMAT_REGEX.matcher(trimmedExpr);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(ActionExpression.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Operator operator \u003d parseOperator(matcher.group(\"exprOperator\"));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Value value \u003d parseValue(matcher.group(\"exprValue\"));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!ActionExpression.isValidActionExpr(operator, value)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(ActionExpression.MESSAGE_TYPE_REQUIREMENTS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new ActionExpression(operator, value);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String script} into a {@code PredicateScript}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code script} is invalid."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static PredicateScript parsePredicateScript(String script) throws ParseException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(script);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedScript \u003d script.trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ScriptName scriptName \u003d parseScriptName(trimmedScript);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new PredicateScript(scriptName);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String script} into a {@code ActionScript}."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code script} is invalid."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static ActionScript parseActionScript(String script) throws ParseException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(script);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedScript \u003d script.trim();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ScriptName scriptName \u003d parseScriptName(trimmedScript);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new ActionScript(scriptName);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String predicate} into a {@code RulePredicate}."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code predicate} is invalid."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static RulePredicate parsePredicate(String predicate) throws ParseException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedPred \u003d predicate.trim();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (trimmedPred.isEmpty()) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(RulePredicate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (trimmedPred.contains(\" \")) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return parsePredicateExpr(trimmedPred);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return parsePredicateScript(trimmedPred);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String action} into a {@code RuleAction}."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code action} is invalid."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static RuleAction parseAction(String action) throws ParseException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(action);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedAct \u003d action.trim();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (trimmedAct.isEmpty()) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(RuleAction.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (action.contains(\" \") || Operator.isValidOperator(trimmedAct)) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return parseActionExpr(trimmedAct);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return parseActionScript(trimmedAct);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Parses a {@code String name} into a {@link ScriptName}."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Leading and trailing whitespace is trimmed."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param name the string to parse"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the parsed script name"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws ParseException if the given string is not a valid script name"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static ScriptName parseScriptName(String name) throws ParseException {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        String trimmed \u003d name.trim();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return new ScriptName(trimmed);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     *"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param category the string to parse"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @return the parsed category"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Parses a {@code String direction} into a {@link Direction}."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Leading and trailing whitespace is trimmed."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @param direction the string to parse"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @return the parsed direction"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @throws ParseException if the given string is not a valid script name"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static Direction parseDirection(String direction) throws ParseException {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (direction.equalsIgnoreCase(Direction.OUT.toString())) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return Direction.OUT;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        } else if (direction.equalsIgnoreCase(Direction.IN.toString())) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return Direction.IN;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            throw new ParseException(Direction.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 183,
      "cambrian-dk": 35,
      "ChenJiehan318": 15,
      "kenneth-fung": 72,
      "thwnus": 24,
      "-": 35
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/ExitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Parses the \u003ccode\u003eexit\u003c/code\u003e command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ExitCommandParser implements CommandParser\u003cExitCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return ExitCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ExitCommand parse(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "thwnus": 16
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/HelpCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Parses the \u003ccode\u003ehelp\u003c/code\u003e command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class HelpCommandParser implements CommandParser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return HelpCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public HelpCommand parse(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "thwnus": 16
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/accountcommandparsers/AccountAddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.accountcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.accountcommands.AccountAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Parses input arguments and creates a new AccountAddCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountAddCommandParser implements CommandParser\u003cAccountAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return AccountAddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccountAddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * and returns an AccountAddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccountAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Name name \u003d CommandParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Optional\u003cString\u003e optionalDescription \u003d argMultimap.getValue(PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Description description \u003d optionalDescription.isPresent()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                ? CommandParserUtil.parseDescription(optionalDescription.get())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                : new Description(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Account account \u003d new Account(name, description, transactionList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new AccountAddCommand(account);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 62
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/accountcommandparsers/AccountDeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.accountcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.accountcommands.AccountDeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Parses input arguments and creates a new LoanDeleteCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountDeleteCommandParser implements CommandParser\u003cAccountDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return AccountDeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Index index \u003d CommandParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new AccountDeleteCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 27
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/accountcommandparsers/AccountEditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.accountcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.accountcommands.AccountEditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.accountcommands.AccountEditCommand.AccountEditDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Parses input arguments and creates a new AccountEditCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountEditCommandParser implements CommandParser\u003cAccountEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return AccountEditCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (argMultiMap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccountEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Index accountIndex \u003d CommandParserUtil.parseIndex(argMultiMap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountEditDescriptor accountEditDescriptor \u003d new AccountEditDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            accountEditDescriptor.setName("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                    CommandParserUtil.parseName(argMultiMap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            accountEditDescriptor.setDescription("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                    CommandParserUtil.parseDescription(argMultiMap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!accountEditDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new ParseException(AccountEditCommand.MESSAGE_UNEDITED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new AccountEditCommand(accountIndex, accountEditDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "ChenJiehan318": 49
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/accountcommandparsers/AccountFindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.accountcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.accountcommands.AccountFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.NameHasKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountFindCommandParser implements CommandParser\u003cAccountFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return AccountFindCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccountFindCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * and returns a AccountFindCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccountFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new AccountFindCommand(new NameHasKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 39
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/accountcommandparsers/AccountListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.accountcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.accountcommands.AccountListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Parses the \u003ccode\u003elist\u003c/code\u003e command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountListCommandParser implements CommandParser\u003cAccountListCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return AccountListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountListCommand parse(String args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new AccountListCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 19
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/LoanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Parses input arguments and creates a new LoanCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanCommandParser implements CommandParser\u003cLoanCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return LoanCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoanCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * and returns an LoanCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PERSON, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_DATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String directionString \u003d argMultimap.getPreamble().toUpperCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || !(directionString.equals(Direction.IN.toString())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || directionString.equals(Direction.OUT.toString()))) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (argMultimap.getValueCount(PREFIX_PERSON) \u003e 1"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || argMultimap.getValueCount(PREFIX_AMOUNT) \u003e 1"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || argMultimap.getValueCount(PREFIX_DESCRIPTION) \u003e 1"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || argMultimap.getValueCount(PREFIX_DATE) \u003e 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Name name \u003d CommandParserUtil.parseName(argMultimap.getValue(PREFIX_PERSON).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Person person \u003d new Person(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Direction direction \u003d Direction.valueOf(directionString.toUpperCase());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Amount amount \u003d CommandParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cString\u003e optionalDescription \u003d argMultimap.getValue(PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Description description \u003d optionalDescription.isPresent()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                ? CommandParserUtil.parseDescription(optionalDescription.get())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                : new Description(\"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cString\u003e optionalDate \u003d argMultimap.getValue(PREFIX_DATE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (optionalDate.isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                date \u003d CommandParserUtil.parseDate(optionalDate.get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Status status \u003d Status.UNPAID;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Loan loan \u003d new Loan(person, direction, amount, date, description, status);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new LoanCommand(loan);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 17,
      "cambrian-dk": 1,
      "kenneth-fung": 73,
      "thwnus": 2
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/LoanDeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Parses input arguments and creates a new LoanDeleteCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanDeleteCommandParser extends MultiLoanCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return LoanDeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            parseMultiLoanArgs(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return new LoanDeleteCommand(loanIndices, persons);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanDeleteCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "kenneth-fung": 27
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/LoanEditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanEditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanEditCommand.LoanEditDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Parses input arguments and creates a new LoanEditCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanEditCommandParser implements CommandParser\u003cLoanEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return LoanEditCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PERSON, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (argMultiMap.getValueCount(PREFIX_PERSON) \u003e 1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || argMultiMap.getValueCount(PREFIX_AMOUNT) \u003e 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || argMultiMap.getValueCount(PREFIX_DESCRIPTION) \u003e 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || argMultiMap.getValueCount(PREFIX_DATE) \u003e 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (argMultiMap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Index loanIndex \u003d CommandParserUtil.parseIndex(argMultiMap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoanEditDescriptor loanEditDescriptor \u003d new LoanEditDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_PERSON).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loanEditDescriptor.setPerson("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    new Person(CommandParserUtil.parseName(argMultiMap.getValue(PREFIX_PERSON).get())));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loanEditDescriptor.setAmount("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    CommandParserUtil.parseAmount(argMultiMap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loanEditDescriptor.setDescription("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    CommandParserUtil.parseDescription(argMultiMap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loanEditDescriptor.setDate("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    CommandParserUtil.parseDate(argMultiMap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!loanEditDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(LoanEditCommand.MESSAGE_UNEDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new LoanEditCommand(loanIndex, loanEditDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 4,
      "kenneth-fung": 67
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/LoanListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.KEYWORD_LOAN_IN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.KEYWORD_LOAN_OUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.KEYWORD_LOAN_PAID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.KEYWORD_LOAN_UNPAID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_SORT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.SORT_ARG_AMOUNT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.SORT_ARG_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.SORT_ARG_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.model.loan.LoanFilters.getDirectionPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.model.loan.LoanFilters.getStatusPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.LoanSorters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.predicates.AmountMatchPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.predicates.DateMatchPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.predicates.DescriptionMatchPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.predicates.PersonMatchPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Parses the \u003ccode\u003elist\u003c/code\u003e command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanListCommandParser implements CommandParser\u003cLoanListCommand\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final Pattern DIRECTION_STATUS_PATTERN \u003d Pattern.compile(\"(out|in|paid|unpaid)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return LoanListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                args, PREFIX_SORT, PREFIX_PERSON, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_SORT).size() \u003e 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // parse sort arguments"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cComparator\u003cLoan\u003e\u003e optionalSorter \u003d argMultimap.getValue(PREFIX_SORT).isPresent()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                ? parseSortArg(argMultimap.getValue(PREFIX_SORT))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cPredicate\u003cLoan\u003e\u003e filters \u003d new ArrayList\u003cPredicate\u003cLoan\u003e\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // parse direction and status filters"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!argMultimap.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            String[] preambleArr \u003d argMultimap.getPreamble().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (preambleArr.length \u003c\u003d 2) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                filters.addAll(parseDirectionStatusFilters(preambleArr));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // parse person, amount, date and description filters"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (String personStr : argMultimap.getAllValues(PREFIX_PERSON)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            filters.add(new PersonMatchPredicate(new Person(CommandParserUtil.parseName(personStr))));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (String amountStr : argMultimap.getAllValues(PREFIX_AMOUNT)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            filters.add(new AmountMatchPredicate(CommandParserUtil.parseAmount(amountStr)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (String dateStr : argMultimap.getAllValues(PREFIX_DATE)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            filters.add(new DateMatchPredicate(CommandParserUtil.parseDate(dateStr)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (String descriptionStr : argMultimap.getAllValues(PREFIX_DESCRIPTION)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            filters.add(new DescriptionMatchPredicate(CommandParserUtil.parseDescription(descriptionStr)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new LoanListCommand(optionalSorter, filters);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Parses an optional sort argument into a comparator for loans."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The parsed comparator."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws ParseException If the given argument does not correspond to a comparator in {@code LoanSorters}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Optional\u003cComparator\u003cLoan\u003e\u003e parseSortArg(Optional\u003cString\u003e optionalSortArg) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (optionalSortArg.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        switch (optionalSortArg.get()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        case SORT_ARG_AMOUNT:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.of(LoanSorters.AMOUNT_ASC);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        case SORT_ARG_PERSON:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.of(LoanSorters.PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        case SORT_ARG_DATE:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.of(LoanSorters.DATE_NEWEST);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Parses the preamble into predicates for filtering loans by direction and/or status."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param preambleArr The preamble as a string array. Each element is one word."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The list of parsed predicates."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws ParseException If the argument does not match any available direction or status filters."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private List\u003cPredicate\u003cLoan\u003e\u003e parseDirectionStatusFilters(String[] preambleArr) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cPredicate\u003cLoan\u003e\u003e filters \u003d new ArrayList\u003cPredicate\u003cLoan\u003e\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Matcher directionStatusMatcher;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (String filterStr : preambleArr) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            directionStatusMatcher \u003d DIRECTION_STATUS_PATTERN.matcher(filterStr);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (!directionStatusMatcher.matches()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            switch (directionStatusMatcher.group()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            case KEYWORD_LOAN_IN:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                filters.add(getDirectionPredicate(Direction.IN));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            case KEYWORD_LOAN_OUT:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                filters.add(getDirectionPredicate(Direction.OUT));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            case KEYWORD_LOAN_PAID:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                filters.add(getStatusPredicate(Status.PAID));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            case KEYWORD_LOAN_UNPAID:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                filters.add(getStatusPredicate(Status.UNPAID));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return filters;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 156
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/LoanPaidCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanPaidCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Parses input arguments and creates a new LoanPaidCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanPaidCommandParser extends MultiLoanCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return LoanPaidCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanPaidCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            parseMultiLoanArgs(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return new LoanPaidCommand(loanIndices, persons);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanPaidCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "kenneth-fung": 27
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/LoanSplitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_USER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanSplitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Parses input arguments and creates a new LoanSplitCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanSplitCommandParser implements CommandParser\u003cLoanSplitCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return LoanSplitCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanSplitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                args, PREFIX_USER, PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_PERSON, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (argMultiMap.getValueCount(PREFIX_USER) \u003e 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || argMultiMap.getValueCount(PREFIX_DESCRIPTION) \u003e 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || argMultiMap.getValueCount(PREFIX_DATE) \u003e 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || argMultiMap.getValueCount(PREFIX_PERSON) \u003c 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || argMultiMap.getValueCount(PREFIX_AMOUNT) \u003c 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanSplitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // parse optional user input for auto-adding calculated results to loan list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cString\u003e optionalUserArg \u003d argMultiMap.getValue(PREFIX_USER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cPerson\u003e optionalUser \u003d optionalUserArg.isPresent()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                ? Optional.of(new Person(CommandParserUtil.parseName(optionalUserArg.get())))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cString\u003e optionalDescriptionArg \u003d argMultiMap.getValue(PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cDescription\u003e optionalDescription \u003d optionalDescriptionArg.isPresent()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                ? Optional.of(CommandParserUtil.parseDescription(optionalDescriptionArg.get()))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cString\u003e optionalDateArg \u003d argMultiMap.getValue(PREFIX_DATE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cDate\u003e optionalDate \u003d optionalDateArg.isPresent()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                ? Optional.of(CommandParserUtil.parseDate(optionalDateArg.get()))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if ((optionalUser.isEmpty() \u0026\u0026 optionalDescription.isPresent())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            || (optionalUser.isEmpty() \u0026\u0026 optionalDate.isPresent())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanSplitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // parse lists of persons and amounts"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cPerson\u003e persons \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cAmount\u003e amounts \u003d new ArrayList\u003cAmount\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (String personName : argMultiMap.getAllValues(PREFIX_PERSON)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            persons.add(new Person(CommandParserUtil.parseName(personName)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (String amountStr : argMultiMap.getAllValues(PREFIX_AMOUNT)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            amounts.add(CommandParserUtil.parseAmount(amountStr));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return new LoanSplitCommand(persons, amounts, optionalUser, optionalDescription, optionalDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 89
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/LoanUnpaidCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanUnpaidCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Parses input arguments and creates a new LoanUnpaidCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanUnpaidCommandParser extends MultiLoanCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return LoanUnpaidCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanUnpaidCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            parseMultiLoanArgs(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return new LoanUnpaidCommand(loanIndices, persons);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanUnpaidCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "kenneth-fung": 27
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/MultiLoanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.MultiLoanCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents a command parser that can handle multiple loan targets."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public abstract class MultiLoanCommandParser implements CommandParser\u003cMultiLoanCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected List\u003cIndex\u003e loanIndices;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected List\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public MultiLoanCommandParser() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loanIndices \u003d new ArrayList\u003cIndex\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        persons \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Parses multiple loan targets into two lists to be passed on to Command classes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * {@code loanIndices} is used for targeting individual loans."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * {@code persons} is used for targeting all the loans of specific persons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param args The loan targets (as a String) to be parsed (e.g. 1 3 4 Mary)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws ParseException If parsing fails at any point."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected void parseMultiLoanArgs(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loanIndices.clear();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        persons.clear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!argMultimap.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            String[] indicesArr \u003d argMultimap.getPreamble().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            for (String indexStr : indicesArr) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                loanIndices.add(CommandParserUtil.parseIndex(indexStr));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (String personName : argMultimap.getAllValues(PREFIX_PERSON)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            persons.add(new Person(CommandParserUtil.parseName(personName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 54
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/rulecommandparsers/RuleAddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.rulecommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PREDICATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.rulecommands.RuleAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Parses input arguments and creates a new RuleAddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleAddCommandParser implements CommandParser\u003cRuleAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return RuleAddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RuleAddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * and returns an RuleAddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PREDICATE, PREFIX_ACTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PREDICATE, PREFIX_ACTION)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RuleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RulePredicate predicate \u003d CommandParserUtil.parsePredicate(argMultimap.getValue(PREFIX_PREDICATE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleAction action \u003d CommandParserUtil.parseAction(argMultimap.getValue(PREFIX_ACTION).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Rule rule \u003d new Rule(predicate, action);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new RuleAddCommand(rule);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 60
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/rulecommandparsers/RuleDeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.rulecommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.rulecommands.RuleDeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Parses input arguments and creates a new RuleDeleteCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleDeleteCommandParser implements CommandParser\u003cRuleDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return RuleDeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RuleDeleteCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * and returns an RuleDeleteCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Index index \u003d CommandParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new RuleDeleteCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 28
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/rulecommandparsers/RuleEditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.rulecommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PREDICATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.rulecommands.RuleEditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.rulecommands.RuleEditCommand.RuleEditDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Parses input arguments and creates a new RuleEditCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleEditCommandParser implements CommandParser\u003cRuleEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return RuleEditCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RuleEditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * and returns a RuleEditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PREDICATE, PREFIX_ACTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RuleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Index ruleIndex \u003d CommandParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleEditDescriptor ruleEditDescriptor \u003d new RuleEditDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PREDICATE).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ruleEditDescriptor.setPredicate("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    CommandParserUtil.parsePredicate(argMultimap.getValue(PREFIX_PREDICATE).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACTION).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ruleEditDescriptor.setAction("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    CommandParserUtil.parseAction(argMultimap.getValue(PREFIX_ACTION).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!ruleEditDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(RuleEditCommand.MESSAGE_UNEDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new RuleEditCommand(ruleIndex, ruleEditDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 57
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/rulecommandparsers/RuleListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.rulecommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.rulecommands.RuleListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Creates a new RuleListCommand object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleListCommandParser implements CommandParser\u003cRuleListCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return RuleListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RuleListCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * and returns a RuleListCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleListCommand parse(String args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new RuleListCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 23
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/scriptcommandparsers/ScriptAddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.scriptcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.scriptcommands.ScriptAddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Parses input arguments and creates a new {@link ScriptAddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptAddCommandParser implements CommandParser\u003cScriptAddCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return ScriptAddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptAddCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (userInput \u003d\u003d null || userInput.isBlank()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new ParseException(ScriptAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ArgumentMultimap args \u003d ArgumentTokenizer.tokenize(userInput,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                CliSyntax.PREFIX_SCRIPT_DESCRIPTION, CliSyntax.PREFIX_SCRIPT_PATH,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                CliSyntax.PREFIX_SCRIPT_SOURCE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (args.getValueCount(CliSyntax.PREFIX_SCRIPT_DESCRIPTION) \u003e 1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                || args.getValueCount(CliSyntax.PREFIX_SCRIPT_PATH) \u003e 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                || args.getValueCount(CliSyntax.PREFIX_SCRIPT_SOURCE) \u003e 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                || args.getValueCount(CliSyntax.PREFIX_SCRIPT_PATH) \u003e 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                \u0026\u0026 args.getValueCount(CliSyntax.PREFIX_SCRIPT_SOURCE) \u003e 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new ParseException(ScriptAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptName scriptName \u003d CommandParserUtil.parseScriptName(args.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        Description desc \u003d new Description(args.getValue(CliSyntax.PREFIX_SCRIPT_DESCRIPTION)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                .orElse(\"\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        String scriptSource \u003d args.getValue(CliSyntax.PREFIX_SCRIPT_SOURCE).orElse(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (scriptSource !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return new ScriptAddCommand(scriptName, desc, scriptSource);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        Path scriptPath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            scriptPath \u003d args.getValue(CliSyntax.PREFIX_SCRIPT_PATH).map(str -\u003e Path.of(str)).orElse(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new ParseException(ScriptAddCommand.MESSAGE_INVALID_PATH, ipe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ScriptAddCommand(scriptName, desc, scriptPath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 59
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/scriptcommandparsers/ScriptDeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.scriptcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.scriptcommands.ScriptDeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Parses input arguments and creates a new {@link ScriptDeleteCommand}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptDeleteCommandParser implements CommandParser\u003cScriptDeleteCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return ScriptDeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptDeleteCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (userInput \u003d\u003d null || userInput.isBlank()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new ParseException(ScriptDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ScriptDeleteCommand(CommandParserUtil.parseScriptName(userInput));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 25
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/scriptcommandparsers/ScriptEvalCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.scriptcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.scriptcommands.ScriptEvalCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Parses input arguments and creates a new {@link ScriptEvalCommand}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptEvalCommandParser implements CommandParser\u003cScriptEvalCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return ScriptEvalCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptEvalCommand parse(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ScriptEvalCommand(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 19
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/scriptcommandparsers/ScriptListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.scriptcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.scriptcommands.ScriptListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Parses input arguments and creates a new {@link ScriptListCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptListCommandParser implements CommandParser\u003cScriptListCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return ScriptListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptListCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ScriptListCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 20
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/scriptcommandparsers/ScriptResetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.scriptcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.scriptcommands.ScriptResetCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Parses input arguments and creates a new {@link ScriptResetCommand}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptResetCommandParser implements CommandParser\u003cScriptResetCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return ScriptResetCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptResetCommand parse(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ScriptResetCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 19
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/scriptcommandparsers/ScriptRunCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.scriptcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.scriptcommands.ScriptRunCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Parses input arguments and creates a new {@link ScriptRunCommand}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptRunCommandParser implements CommandParser\u003cScriptRunCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return ScriptRunCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptRunCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (userInput \u003d\u003d null || userInput.isBlank()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new ParseException(ScriptRunCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        String[] nameArgs \u003d userInput.stripLeading().split(\" \", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptName name \u003d CommandParserUtil.parseScriptName(nameArgs[0]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        String arguments \u003d nameArgs.length \u003e\u003d 2 ? nameArgs[1] : \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ScriptRunCommand(name, arguments);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 30
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/transactioncommandparsers/TransactionAddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.transactioncommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACCOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DIRECTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.commands.transactioncommands.TransactionAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Parses input and creates a new TransactionAddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionAddCommandParser implements CommandParser\u003cTransactionAddCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return TransactionAddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TransactionAddCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * and returns an TransactionAddCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DIRECTION, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_ACCOUNT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        PREFIX_CATEGORY, PREFIX_DATE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (!arePrefixesPresent(argMultiMap, PREFIX_DIRECTION, PREFIX_AMOUNT)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                    TransactionAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Direction direction \u003d CommandParserUtil.parseDirection(argMultiMap.getValue(PREFIX_DIRECTION).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Amount amount \u003d CommandParserUtil.parseAmount(argMultiMap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalDescription \u003d argMultiMap.getValue(PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Description description \u003d optionalDescription.isPresent()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? CommandParserUtil.parseDescription(optionalDescription.get())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalAccount \u003d argMultiMap.getValue(PREFIX_ACCOUNT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Account account \u003d optionalAccount.isPresent()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? CommandParserUtil.parseAccount(optionalAccount.get())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalCategory \u003d argMultiMap.getValue(PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Category category \u003d optionalCategory.isPresent()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? CommandParserUtil.parseCategory(optionalCategory.get())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "         * Return current date when optionalDate is not present"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalDate \u003d argMultiMap.getValue(PREFIX_DATE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Date date \u003d optionalDate.isPresent()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? CommandParserUtil.parseDate(optionalDate.get())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                : new Date();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        Transaction transaction \u003d new Transaction(date, amount, direction, description, category);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new TransactionAddCommand(transaction, account);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 72,
      "thwnus": 22
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/transactioncommandparsers/TransactionDeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.transactioncommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.commands.transactioncommands.TransactionDeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Parses input and creates a new TransactionDeleteCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionDeleteCommandParser implements CommandParser\u003cTransactionDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return TransactionDeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TransactionDeleteCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * and returns a TransactionDeleteCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Index index \u003d CommandParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return new TransactionDeleteCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 28
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/transactioncommandparsers/TransactionEditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.transactioncommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACCOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DIRECTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.commands.transactioncommands.TransactionEditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.commands.transactioncommands.TransactionEditCommand.TransactionEditDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Parses input and creates a new TransactionAddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionEditCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return TransactionEditCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DIRECTION, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_ACCOUNT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        PREFIX_CATEGORY, PREFIX_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (argMultiMap.getValueCount(PREFIX_DIRECTION) \u003e 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || argMultiMap.getValueCount(PREFIX_AMOUNT) \u003e 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || argMultiMap.getValueCount(PREFIX_DESCRIPTION) \u003e 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || argMultiMap.getValueCount(PREFIX_ACCOUNT) \u003e 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || argMultiMap.getValueCount(PREFIX_DATE) \u003e 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                    TransactionEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (argMultiMap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    TransactionEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Index transactionIndex \u003d CommandParserUtil.parseIndex(argMultiMap.getPreamble());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        TransactionEditDescriptor transactionEditDescriptor \u003d new TransactionEditDescriptor();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DIRECTION).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            transactionEditDescriptor.setDirection("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                    CommandParserUtil.parseDirection(argMultiMap.getValue(PREFIX_DIRECTION).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            transactionEditDescriptor.setAmount("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                    CommandParserUtil.parseAmount(argMultiMap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            transactionEditDescriptor.setDescription("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                    CommandParserUtil.parseDescription(argMultiMap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            transactionEditDescriptor.setDate("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                    CommandParserUtil.parseDate(argMultiMap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            Set\u003cCategory\u003e newCategories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            newCategories.add(CommandParserUtil.parseCategory(argMultiMap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            transactionEditDescriptor.setCategories(newCategories);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Account updatedAccount \u003d argMultiMap.getValue(PREFIX_ACCOUNT).isPresent()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? CommandParserUtil.parseAccount(argMultiMap.getValue(PREFIX_ACCOUNT).get())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return new TransactionEditCommand(transactionIndex, transactionEditDescriptor, updatedAccount);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "cambrian-dk": 85
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/transactioncommandparsers/TransactionListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.transactioncommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.commands.transactioncommands.TransactionListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * parses the \u003ccode\u003etransaction list\u003c/code\u003e command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionListCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return TransactionListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns a TransactionListCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return new TransactionListCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 23
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/viewcommandparsers/ViewFilterCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.viewcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACCOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_UNTIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.view.ViewFilterCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.TransactionMatchesConditionsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Parses input arguments and creates a new \u003ccode\u003eViewFilterCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class ViewFilterCommandParser implements CommandParser\u003cViewFilterCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return ViewFilterCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewFilterCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * and returns a ViewFilterCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public ViewFilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ACCOUNT, PREFIX_CATEGORY, PREFIX_FROM, PREFIX_UNTIL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        //if arguments are not present, return empty Optionals"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        // TODO handle accounts"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalCategoryString \u003d argMultimap.getValue(PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cCategory\u003e optionalCategory \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                argMultimap.getValue(PREFIX_CATEGORY).isPresent()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        ? Optional.of(CommandParserUtil.parseCategory(optionalCategoryString.get()))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        : Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalFromString \u003d argMultimap.getValue(PREFIX_FROM);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cDate\u003e optionalFrom \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                argMultimap.getValue(PREFIX_FROM).isPresent()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        ? Optional.of(CommandParserUtil.parseDate(optionalFromString.get()))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        : Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalUntilString \u003d argMultimap.getValue(PREFIX_UNTIL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cDate\u003e optionalUntil \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                argMultimap.getValue(PREFIX_UNTIL).isPresent()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        ? Optional.of(CommandParserUtil.parseDate(optionalUntilString.get()))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        : Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ViewFilterCommand(new TransactionMatchesConditionsPredicate(optionalCategory,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                optionalFrom, optionalUntil));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 48,
      "thwnus": 16
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/RuleEngine.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.performable.AppendDescriptionExpression;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.performable.Performable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.performable.PerformableExpression;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.performable.PerformableScript;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.performable.PrependDescriptionExpression;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.performable.RemoveCategoryExpression;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.performable.SetCategoryExpression;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.performable.SetDescriptionExpression;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.performable.SetInwardExpression;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.performable.SetOutwardExpression;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.performable.SwitchDirectionExpression;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.testable.ContainsExpression;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.testable.EqualToExpression;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.testable.LessEqualExpression;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.testable.LessThanExpression;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.testable.MoreEqualExpression;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.testable.MoreThanExpression;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.testable.Testable;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.testable.TestableExpression;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.testable.TestableScript;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.script.ScriptEngine;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.script.exceptions.ScriptException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ScriptLibrary;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.ActionExpression;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Operator;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.PredicateExpression;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.ActionScript;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.PredicateScript;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Handles the creation and processing of rules."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleEngine {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String TYPE_CATEGORY \u003d \"CATEGORY\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String TYPE_DESC \u003d \"DESC\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String TYPE_AMOUNT \u003d \"AMOUNT\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String TYPE_DATE \u003d \"DATE\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String TYPE_BLANK \u003d \"BLANK\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final HashMap\u003cOperator, BiFunction\u003cAttribute, Value, TestableExpression\u003e\u003e testableMap;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final HashMap\u003cOperator, Function\u003cValue, PerformableExpression\u003e\u003e performableMap;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        testableMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        performableMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        testableMap.put(Operator.CONTAINS, ContainsExpression::new);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        testableMap.put(Operator.EQUAL_TO, EqualToExpression::new);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        testableMap.put(Operator.LESS_EQUAL, LessEqualExpression::new);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        testableMap.put(Operator.LESS_THAN, LessThanExpression::new);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        testableMap.put(Operator.MORE_EQUAL, MoreEqualExpression::new);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        testableMap.put(Operator.MORE_THAN, MoreThanExpression::new);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        performableMap.put(Operator.SET_CATEGORY, SetCategoryExpression::new);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        performableMap.put(Operator.REMOVE_CATEGORY, RemoveCategoryExpression::new);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        performableMap.put(Operator.SET_DESC, SetDescriptionExpression::new);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        performableMap.put(Operator.APPEND_DESC, AppendDescriptionExpression::new);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        performableMap.put(Operator.PREPEND_DESC, PrependDescriptionExpression::new);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        performableMap.put(Operator.SET_IN, SetInwardExpression::new);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        performableMap.put(Operator.SET_OUT, SetOutwardExpression::new);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        performableMap.put(Operator.SWITCH_DIRECTION, SwitchDirectionExpression::new);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Is a private constructor for a static-only class."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private RuleEngine() {}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the value of a transaction\u0027s attribute given the transaction."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Object extractAttribute(Attribute attribute, Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Transaction txn \u003d account.getTransaction(txnIndex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        switch (attribute) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case DESCRIPTION:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return txn.getDescription();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case IN_AMOUNT:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return (txn.getDirection().equals(Direction.IN) ? 1 : -1)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    * (txn.getAmount().toLong() / 100.0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case OUT_AMOUNT:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return (txn.getDirection().equals(Direction.OUT) ? 1 : -1)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    * (txn.getAmount().toLong() / 100.0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case DATE:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return txn.getDate();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // impossible"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            assert false : \"Unhandled attribute\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code RulePredicate predicate} into a {@code Testable}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Testable parseTestable(RulePredicate predicate, ScriptLibrary scriptLibrary,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                                         ScriptEngine scriptEngine) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(predicate, scriptEngine);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (predicate.getType().equals(Rule.TYPE_EXPRESSION)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            PredicateExpression predExpr \u003d (PredicateExpression) predicate;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return testableMap.get(predExpr.getOperator()).apply(predExpr.getAttribute(), predExpr.getValue());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ScriptName scriptName \u003d ((PredicateScript) predicate).getScriptName();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return new TestableScript((txnIndex, account) -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    Transaction txn \u003d account.getTransaction(txnIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    Object retVal \u003d scriptEngine.evaluateScript(scriptLibrary.getScript(scriptName), txn, account);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    if (!(retVal instanceof Boolean)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    return (Boolean) retVal;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                } catch (ScriptException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            });"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code RuleAction action} into a {@code Performable}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Performable parsePerformable(RuleAction action, ScriptLibrary scriptLibrary,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                                               ScriptEngine scriptEngine) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(action, scriptEngine);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (action.getType().equals(Rule.TYPE_EXPRESSION)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ActionExpression actExpr \u003d (ActionExpression) action;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return performableMap.get(actExpr.getOperator()).apply(actExpr.getValue());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ScriptName scriptName \u003d ((ActionScript) action).getScriptName();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return new PerformableScript((txnIndex, account) -\u003e {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    Transaction txn \u003d account.getTransaction(txnIndex);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    scriptEngine.evaluateScript(scriptLibrary.getScript(scriptName), txn, account);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                } catch (ScriptException ignored) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    // If an error occurs, no need to do anything."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Runs all rules against transaction"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static void executeRules(Model model, ScriptEngine scriptEngine, Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, model.getRuleManager(), model.getScriptLibrary(), scriptEngine, txnIndex, account);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        List\u003cRule\u003e ruleList \u003d new ArrayList\u003c\u003e(model.getRuleManager().getRules());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Collections.reverse(ruleList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        for (Rule rule : ruleList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Testable testable \u003d parseTestable(rule.getPredicate(), model.getScriptLibrary(), scriptEngine);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (testable.test(txnIndex, account)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                Performable performable \u003d parsePerformable(rule.getAction(), model.getScriptLibrary(), scriptEngine);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                performable.perform(model, txnIndex, account);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns if a value can be parsed into the specified type."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static boolean isValueParsable(String typeName, Value value) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        switch (typeName) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case TYPE_CATEGORY:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                CommandParserUtil.parseCategory(value.toString());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case TYPE_DESC:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                CommandParserUtil.parseDescription(value.toString());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case TYPE_AMOUNT:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                CommandParserUtil.parseAmount(value.toString());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case TYPE_DATE:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // todo: need to try parsing date"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case TYPE_BLANK:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (value.toString().isEmpty()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 218,
      "thwnus": 1
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/performable/AppendDescriptionExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.performable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a append description expression."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class AppendDescriptionExpression extends PerformableExpression {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a AppendDescriptionExpression with the given value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to perform the action with."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public AppendDescriptionExpression(Value value) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void perform(Model model, Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, txnIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Transaction toEdit \u003d account.getTransaction(txnIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Description updatedDesc \u003d CommandParserUtil.parseDescription(toEdit.getDescription().toString()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    + value.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Transaction updatedTransaction \u003d new Transaction(toEdit.getDate(), toEdit.getAmount(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    toEdit.getDirection(), updatedDesc, toEdit.getCategories());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            account.updateTransaction(txnIndex, updatedTransaction);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            logger.info(\"Rule Execution———Description updated in:\\n\" + updatedTransaction);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // Should not happen as value should be parsable by the time this method is called"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // but will exit without completing if it does happen."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 48
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/performable/Performable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.performable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents an action with hidden internal logic and the ability to be performed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public interface Performable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Executes the action."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    void perform(Model model, Index txnIndex, Account account);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 15
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/performable/PerformableExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.performable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents an action written as an expression."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public abstract class PerformableExpression implements Performable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    protected final Value value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    protected final Logger logger \u003d LogsCenter.getLogger(PerformableExpression.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs an PerformableExpression given a value."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to perform the action with."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public PerformableExpression(Value value) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 26
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/performable/PerformableScript.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.performable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents an action written as a script."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class PerformableScript implements Performable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final ScriptEvaluator evaluator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a PerformableScript given a script evaluator."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public PerformableScript(ScriptEvaluator evaluator) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(evaluator);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.evaluator \u003d evaluator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void perform(Model model, Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        evaluator.run(txnIndex, account);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Represents a function that can execute scripts."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public interface ScriptEvaluator {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         * Executes the script and returns the result."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        void run(Index txnIndex, Account account);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 39
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/performable/PrependDescriptionExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.performable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a prepend description expression."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class PrependDescriptionExpression extends PerformableExpression {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a PrependDescriptionExpression with the given value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to perform the action with."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public PrependDescriptionExpression(Value value) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void perform(Model model, Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, txnIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Transaction toEdit \u003d account.getTransaction(txnIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Description updatedDesc \u003d CommandParserUtil.parseDescription(value.toString()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    + toEdit.getDescription().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Transaction updatedTransaction \u003d new Transaction(toEdit.getDate(), toEdit.getAmount(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    toEdit.getDirection(), updatedDesc, toEdit.getCategories());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            account.updateTransaction(txnIndex, updatedTransaction);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            logger.info(\"Rule Execution———Description updated in:\\n\" + updatedTransaction);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // Should not happen as value should be parsable by the time this method is called"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // but will exit without completing if it does happen."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 48
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/performable/RemoveCategoryExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.performable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a remove category expression."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RemoveCategoryExpression extends PerformableExpression {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a RemoveCategoryExpression with the given value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to perform the action with."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RemoveCategoryExpression(Value value) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void perform(Model model, Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, txnIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Transaction toEdit \u003d account.getTransaction(txnIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e(toEdit.getCategories());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Category categoryToRemove \u003d CommandParserUtil.parseCategory(value.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (!categories.contains(categoryToRemove)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            categories.remove(categoryToRemove);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Transaction updatedTransaction \u003d new Transaction(toEdit.getDate(), toEdit.getAmount(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    toEdit.getDirection(), toEdit.getDescription(), categories);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            account.updateTransaction(txnIndex, updatedTransaction);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            logger.info(\"Rule Execution———Category removed in:\\n\" + updatedTransaction);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // Should not happen as value should be parsable by the time this method is called"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // but will exit without completing if it does happen."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 56
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/performable/SetCategoryExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.performable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a set category expression."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class SetCategoryExpression extends PerformableExpression {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a SetCategoryExpression with the given value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to perform the action with."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public SetCategoryExpression(Value value) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void perform(Model model, Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, txnIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Transaction toEdit \u003d account.getTransaction(txnIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e(toEdit.getCategories());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Category categoryToAdd \u003d CommandParserUtil.parseCategory(value.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (categories.contains(categoryToAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            categories.add(categoryToAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Transaction updatedTransaction \u003d new Transaction(toEdit.getDate(), toEdit.getAmount(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    toEdit.getDirection(), toEdit.getDescription(), categories);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            account.updateTransaction(txnIndex, updatedTransaction);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            logger.info(\"Rule Execution———Category added in:\\n\" + updatedTransaction);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // Should not happen as value should be parsable by the time this method is called"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // but will exit without completing if it does happen."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 56
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/performable/SetDescriptionExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.performable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a set description expression."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class SetDescriptionExpression extends PerformableExpression {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a SetDescriptionExpression with the given value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to perform the action with."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public SetDescriptionExpression(Value value) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void perform(Model model, Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, txnIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Transaction toEdit \u003d account.getTransaction(txnIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Description updatedDesc \u003d CommandParserUtil.parseDescription(value.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Transaction updatedTransaction \u003d new Transaction(toEdit.getDate(), toEdit.getAmount(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    toEdit.getDirection(), updatedDesc, toEdit.getCategories());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            account.updateTransaction(txnIndex, updatedTransaction);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            logger.info(\"Rule Execution———Description updated in:\\n\" + updatedTransaction);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // Should not happen as value should be parsable by the time this method is called"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // but will exit without completing if it does happen."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 47
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/performable/SetInwardExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.performable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a set inward expression."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class SetInwardExpression extends PerformableExpression {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a SetInwardExpression with the given value."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to perform the action with."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public SetInwardExpression(Value value) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void perform(Model model, Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, txnIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Transaction toEdit \u003d account.getTransaction(txnIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Direction updatedDirection \u003d Direction.IN;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Transaction updatedTransaction \u003d new Transaction(toEdit.getDate(), toEdit.getAmount(), updatedDirection,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                toEdit.getDescription(), toEdit.getCategories());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        account.updateTransaction(txnIndex, updatedTransaction);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        logger.info(\"Rule Execution———Direction updated in:\\n\" + updatedTransaction);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 40
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/performable/SetOutwardExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.performable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a set outward expression."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class SetOutwardExpression extends PerformableExpression {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a SetOutwardExpression with the given value."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to perform the action with."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public SetOutwardExpression(Value value) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void perform(Model model, Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, txnIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Transaction toEdit \u003d account.getTransaction(txnIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Direction updatedDirection \u003d Direction.OUT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Transaction updatedTransaction \u003d new Transaction(toEdit.getDate(), toEdit.getAmount(), updatedDirection,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                toEdit.getDescription(), toEdit.getCategories());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        account.updateTransaction(txnIndex, updatedTransaction);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        logger.info(\"Rule Execution———Direction updated in:\\n\" + updatedTransaction);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 40
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/performable/SwitchDirectionExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.performable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a switch direction expression."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class SwitchDirectionExpression extends PerformableExpression {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a SwitchDirectionExpression with the given value."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to perform the action with."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public SwitchDirectionExpression(Value value) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void perform(Model model, Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, txnIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Transaction toEdit \u003d account.getTransaction(txnIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Direction updatedDirection \u003d toEdit.getDirection().equals(Direction.IN) ? Direction.OUT : Direction.IN;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Transaction updatedTransaction \u003d new Transaction(toEdit.getDate(), toEdit.getAmount(), updatedDirection,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                toEdit.getDescription(), toEdit.getCategories());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        account.updateTransaction(txnIndex, updatedTransaction);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        logger.info(\"Rule Execution———Direction updated in:\\n\" + updatedTransaction);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 40
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/ContainsExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleEngine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a contains expression."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class ContainsExpression extends TestableExpression {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a ContainsExpression with the given attribute and value."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ContainsExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(attribute, value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean test(Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(txnIndex, account);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String left \u003d RuleEngine.extractAttribute(attribute, txnIndex, account).toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String right \u003d value.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return left.contains(right);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 32
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/EqualToExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleEngine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a equal-to expression."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class EqualToExpression extends TestableExpression {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a EqualToExpression with the given attribute and value."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public EqualToExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(attribute, value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean test(Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(txnIndex, account);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        double left \u003d (double) RuleEngine.extractAttribute(attribute, txnIndex, account);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        double right \u003d Double.parseDouble(value.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return left \u003d\u003d right;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 32
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/LessEqualExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleEngine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a less-than-or-equal-to expression."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class LessEqualExpression extends TestableExpression {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a LessEqualExpression with the given attribute and value."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public LessEqualExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(attribute, value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean test(Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(txnIndex, account);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        double left \u003d (double) RuleEngine.extractAttribute(attribute, txnIndex, account);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        double right \u003d Double.parseDouble(value.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return left \u003e\u003d 0 \u0026\u0026 left \u003c\u003d right;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 32
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/LessThanExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleEngine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a less-than expression."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class LessThanExpression extends TestableExpression {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a LessThanExpression with the given attribute and value."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public LessThanExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(attribute, value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean test(Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(txnIndex, account);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        double left \u003d (double) RuleEngine.extractAttribute(attribute, txnIndex, account);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        double right \u003d Double.parseDouble(value.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return left \u003e\u003d 0 \u0026\u0026 left \u003c right;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 32
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/MoreEqualExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleEngine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a more-than-or-equal-to expression."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class MoreEqualExpression extends TestableExpression {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a MoreEqualExpression with the given attribute and value."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public MoreEqualExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(attribute, value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean test(Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(txnIndex, account);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        double left \u003d (double) RuleEngine.extractAttribute(attribute, txnIndex, account);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        double right \u003d Double.parseDouble(value.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return left \u003e\u003d 0 \u0026\u0026 left \u003e\u003d right;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 32
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/MoreThanExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleEngine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a more-than expression."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class MoreThanExpression extends TestableExpression {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a MoreThanExpression with the given attribute and value."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public MoreThanExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(attribute, value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean test(Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(txnIndex, account);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        double left \u003d (double) RuleEngine.extractAttribute(attribute, txnIndex, account);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        double right \u003d Double.parseDouble(value.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return left \u003e\u003d 0 \u0026\u0026 left \u003e right;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 32
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/Testable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a predicate with hidden internal logic and the ability to be tested."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public interface Testable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Tests if the transaction in this account satisfy the predicate."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    boolean test(Index txnIndex, Account account);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 15
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/TestableExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a predicate written as an expression."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public abstract class TestableExpression implements Testable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    protected final Attribute attribute;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    protected final Value value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    protected final Logger logger \u003d LogsCenter.getLogger(TestableExpression.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a TestableExpression given an attribute and a value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public TestableExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(attribute, value);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 30
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/TestableScript.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a predicate written as a script."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class TestableScript implements Testable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final ScriptEvaluator evaluator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a TestableScript given a script evaluator."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public TestableScript(ScriptEvaluator evaluator) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(evaluator);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.evaluator \u003d evaluator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean test(Index txnIndex, Account account) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return evaluator.run(txnIndex, account);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Represents a function that can execute scripts."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public interface ScriptEvaluator {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         * Executes the script and returns the result."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        boolean run(Index txnIndex, Account account);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 38
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/script/ScriptEngine.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.script;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javax.script.Bindings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javax.script.ScriptContext;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javax.script.ScriptEngineManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.script.exceptions.ScriptException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.Script;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Evaluates scripts."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptEngine {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final Object scriptEngineLock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final ScriptEnvironmentInitialiser initialiser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final javax.script.ScriptEngine scriptEngine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Creates a new ScriptManager with the specified environment initialiser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param initialiser The environment initialiser."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptEngine(ScriptEnvironmentInitialiser initialiser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.initialiser \u003d initialiser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        scriptEngineLock \u003d new Object();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        scriptEngine \u003d new ScriptEngineManager().getEngineByName(\"nashorn\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (scriptEngine \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new IllegalStateException(\"Could not instantiate JavaScript engine\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        initialiser.initialise(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Evaluates a script."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * The context between evaluations is persisted."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param script the script"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param argv the arguments to pass to the script"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the result of the script, which may be \u003ccode\u003enull\u003c/code\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws ScriptException if an exception occurs during script evaluation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Object evaluateScript(String script, Object... argv) throws ScriptException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        synchronized (scriptEngineLock) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                setVariable(\"argv\", argv);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                return scriptEngine.eval(script);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                throw new ScriptException(String.format(\"Exception while evaluating script: %1$s\", ex.toString()), ex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Evaluates a script."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param script the script"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param argv the arguments to pass to the script"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the result of the script, which may be \u003ccode\u003enull\u003c/code\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws ScriptException if an exception occurs during script evaluation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Object evaluateScript(Script script, Object... argv) throws ScriptException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return evaluateScript(script.getCode(), argv);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Resets the script evaluation context."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * This removes any variables declared by previously evaluated scripts, and re-initialises the context"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * using the initialiser provided when this ScriptManager was created."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public void resetEnvironment() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        synchronized (scriptEngineLock) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            Bindings newBindings \u003d scriptEngine.createBindings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            scriptEngine.setBindings(newBindings, ScriptContext.ENGINE_SCOPE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            initialiser.initialise(this);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Sets a variable in the script evaluation context."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param name The name of the variable to be set"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param value The value the variable should be set to"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public void setVariable(String name, Object value) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        synchronized (scriptEngineLock) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            scriptEngine.put(name, value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "thwnus": 89
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/script/ScriptEnvironmentInitialiser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.script;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents a function that initialises a {@link ScriptEngine}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public interface ScriptEnvironmentInitialiser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Initialises the {@link ScriptEngine}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param engine the {@link ScriptEngine} to initialise"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    void initialise(ScriptEngine engine);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 14
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/script/exceptions/ScriptException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.script.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents an \u003ccode\u003eException\u003c/code\u003e that occurs during script evaluation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Constructs a \u003ccode\u003eScriptException\u003c/code\u003e with the specified detail message and cause."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param message the detail message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param cause the cause"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "thwnus": 14
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/AccountsManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.UniqueAccountList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.account.exceptions.AccountNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Manages the accounts in a list of accounts."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountsManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final UniqueAccountList accounts;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final FilteredList\u003cAccount\u003e filteredAccounts;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private Index activeAccountIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final TransactionList activeTransactionList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Creates a new list of accounts."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountsManager() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.accounts \u003d new UniqueAccountList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        filteredAccounts \u003d new FilteredList\u003c\u003e(this.getAccounts());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        activeAccountIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        // TODO add proper default data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        addAccount(new Account(new Name(\"Default\"), new Description(\"Default\"), new TransactionList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        activeTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        activeTransactionList.setAll(getActiveAccount().getTransactionList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Creates and fills a new list of accounts."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * The default account is always set to the first account in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param accounts A list of accounts with which to fill the new list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public AccountsManager(List\u003cAccount\u003e accounts, Index activeAccountIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(accounts);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.accounts \u003d new UniqueAccountList(accounts);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.activeAccountIndex \u003d activeAccountIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        filteredAccounts \u003d new FilteredList\u003c\u003e(this.getAccounts());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        activeTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        activeTransactionList.setAll(getActiveAccount().getTransactionList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns an unmodifiable view of the list of Account"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public ObservableList\u003cAccount\u003e getFilteredAccountList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return filteredAccounts;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns an unmodifiable view of the current active account\u0027s transactionlist."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getActiveTransactionList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return activeTransactionList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Checks if a given account is currently the active account."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @param testAccount The account to be checked"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean isActiveAccount(Account testAccount) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return UniqueAccountList.accountsAreEquivalent(testAccount, getActiveAccount());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Retrieves the list of accounts."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public ObservableList\u003cAccount\u003e getAccounts() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return accounts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Reset the filteredAccountList so that it contains all the accounts."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void resetFilteredAccountList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        filteredAccounts.setPredicate(s -\u003e true);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        //activeAccountIndex is reset to the first account"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        activeAccountIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Adds a given account to its specified account in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param toAdd The account to add."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void addAccount(Account toAdd) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        accounts.add(toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        activeAccountIndex \u003d accounts.indexOfEquivalent(toAdd);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Replaces a target account with the given account."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param toEdit The index of the target account to replace."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param editedAccount The edited account to replace the target account with."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void editAccount(Index toEdit, Account editedAccount) throws AccountNotFoundException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        accounts.replace(accounts.get(toEdit), editedAccount);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        activeAccountIndex \u003d accounts.indexOfEquivalent(editedAccount);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Deletes an account."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * If the account to be deleted is the default account, an error is thrown to change the default account"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * before it can be deleted."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param toDelete The target account for deletion."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void deleteAccount(Account toDelete) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (accounts.contains(toDelete)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            accounts.remove(toDelete);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            //activeAccountIndex is reset to the first account."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            activeAccountIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns the current number of accounts in the list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @return The current number of accounts in the list as an {@code int}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return getAccounts().size();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Updates the filter of the filtered account list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void updateFilteredAccountList(Predicate\u003cAccount\u003e predicate) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        filteredAccounts.setPredicate(predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        activeAccountIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!(other instanceof AccountsManager)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountsManager otherAccountsManager \u003d (AccountsManager) other;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return accounts.equals(otherAccountsManager.accounts);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns the account at the specified index in the list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param toGet The index of the target account."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is out of bounds"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Account getAccount(Index toGet) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return accounts.get(toGet);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Returns the account with the given name."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the account, or null if no such account exists"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Account getAccount(Name toGet) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return accounts.get(toGet);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Index getActiveAccountIndex() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return activeAccountIndex;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public void setActiveAccountIndex(Index activeAccountIndex) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireNonNull(activeAccountIndex);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (activeAccountIndex.getZeroBased() \u003e\u003d accounts.size()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new IndexOutOfBoundsException(\"Active account index out of bounds\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.activeAccountIndex \u003d activeAccountIndex;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Gets the active account."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Account getActiveAccount() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return accounts.get(activeAccountIndex);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Sets the active account. The account must already be contained in the manager."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws AccountNotFoundException if the account could not be found"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public void setActiveAccount(Account account) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        Index newActiveIndex \u003d accounts.indexOfEquivalent(account);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (newActiveIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        activeAccountIndex \u003d newActiveIndex;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Switches the account source for the TransactionList"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void transactionListSwitchSource(Account account) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        setActiveAccount(account);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        activeTransactionList.setAll(account.getTransactionList());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Updates the transactionList linked to the currentActiveAccount"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void transactionListUpdateSource() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        activeTransactionList.setAll(getActiveAccount().getTransactionList());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 109,
      "cambrian-dk": 53,
      "thwnus": 65
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/LoansManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.model.loan.LoanFilters.FILTER_ALL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.model.loan.LoanSorters.DATE_NEWEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Debtor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.exceptions.LoanNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Maintains a list of loans."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoansManager {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final ObservableList\u003cLoan\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final ObservableList\u003cLoan\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * A list to store the results of the {@code loan split} command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final ObservableList\u003cDebtor\u003e debtors \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final ObservableList\u003cDebtor\u003e unmodifiableDebtors \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            FXCollections.unmodifiableObservableList(debtors);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * The filtered list wraps the observable {@code internalList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * It changes with the filters used with {@code LoanListCommand}, leaving {@code internalList} unchanged."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final FilteredList\u003cLoan\u003e filteredLoans \u003d new FilteredList\u003cLoan\u003e(internalUnmodifiableList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Comparator\u003cLoan\u003e sorter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoansManager() {}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Creates and fills a new list of loans."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param loans A list of loans with which to fill the new list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoansManager(List\u003cLoan\u003e loans) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(loans);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.internalList.setAll(loans);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.sorter \u003d DATE_NEWEST;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Updates the predicate of {@code filteredLoans} with the given predicate."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void updateFilteredList(Predicate\u003cLoan\u003e predicate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        filteredLoans.setPredicate(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Loan Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Sorts the {@code internalList} using the given {@code sorter}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Also sets the loan manager to use the given {@code sorter} for sorting."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void sortLoans(Comparator\u003cLoan\u003e sorter) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(sorter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.sorter \u003d this.sorter.equals(sorter) ? sorter.reversed() : sorter;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        internalList.sort(this.sorter);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Retrieves the list of loans."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public ObservableList\u003cLoan\u003e getLoans() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns the filtered list of loans."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public ObservableList\u003cLoan\u003e getFilteredLoans() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return filteredLoans;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns the loan at the specified index in the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toGet The index of the target loan."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws LoanNotFoundException If the loan is not in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Loan getLoan(Index toGet) throws LoanNotFoundException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        checkIndexValidity(toGet);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getLoans().get(toGet.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns the current number of loans in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The current number of loans in the list as an {@code int}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public int getLoansCount() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getLoans().size();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Adds a given loan to the list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toAdd The loan to add."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void addLoan(Loan toAdd) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        internalList.add(0, toAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        internalList.sort(sorter);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        updateFilteredList(FILTER_ALL);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Replaces a target loan with the given loan."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toEdit The index of the target loan to replace."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param editedLoan The edited loan to replace the target loan with."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void editLoan(Index toEdit, Loan editedLoan) throws LoanNotFoundException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        checkIndexValidity(toEdit);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        internalList.set(toEdit.getZeroBased(), editedLoan);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Deletes a target loan from the list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toDelete The index of the target loan to delete."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void deleteLoan(Index toDelete) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        checkIndexValidity(toDelete);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        internalList.remove(toDelete.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Checks if a given index exceeds the number of loans currently in the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toCheck The index to check."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws LoanNotFoundException If the index exceeds the current number of loans."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private void checkIndexValidity(Index toCheck) throws LoanNotFoundException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (toCheck.getOneBased() \u003e getLoansCount()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new LoanNotFoundException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Split/Debtor Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Sets the elements of the list of debtors to the given list of debtors."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void setDebtors(List\u003cDebtor\u003e debtors) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(debtors);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.debtors.setAll(debtors);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns an unmodifiable {@code SortedList} of debtors."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * The list is sorted by the debtors\u0027 names in alphabetical order."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public SortedList\u003cDebtor\u003e getDebtors() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return unmodifiableDebtors.sorted(Comparator.comparing(debtor -\u003e debtor.getDebtor().getName().toString()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoansManager)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansManager otherLoansManager \u003d (LoansManager) other;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getLoans().equals(otherLoansManager.getLoans())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 getDebtors().equals(otherLoansManager.getDebtors());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "kenneth-fung": 181
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns the loans manager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    LoansManager getLoansManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the rule manager."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    RuleManager getRuleManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Returns the script library."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the script library"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    ScriptLibrary getScriptLibrary();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Updates the filter of the filtered transaction list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns an unmodifiable view of the filtered transaction list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactions();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Resets the list of filtered transactions"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    void resetFilteredTransactionList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns the accounts manager."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    AccountsManager getAccountsManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "cambrian-dk": 18,
      "ChenJiehan318": 4,
      "thwnus": 9,
      "kenneth-fung": 5,
      "-": 30
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents the in-memory model of the budget buddy data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final LoansManager loansManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final AccountsManager accountsManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final RuleManager ruleManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final FilteredList\u003cTransaction\u003e filteredTransactions;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final ScriptLibrary scriptLibrary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ModelManager(LoansManager loansManager, RuleManager ruleManager, AccountsManager accountsManager,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                        ScriptLibrary scriptLibrary, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireAllNonNull(loansManager, ruleManager, accountsManager, userPrefs, scriptLibrary);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        logger.fine(\"Initializing with accounts manager: \" + accountsManager + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loansManager \u003d new LoansManager(loansManager.getLoans());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.ruleManager \u003d new RuleManager(ruleManager.getRules());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.accountsManager \u003d accountsManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.scriptLibrary \u003d scriptLibrary;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.filteredTransactions \u003d new FilteredList\u003cTransaction\u003e(accountsManager.getActiveTransactionList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this(new LoansManager(), new RuleManager(), new AccountsManager(), new ScriptLibraryManager(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Loan Manager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoansManager getLoansManager() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loansManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Account Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void resetFilteredTransactionList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        filteredTransactions.setPredicate(s -\u003e true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        filteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public FilteredList\u003cTransaction\u003e getFilteredTransactions() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return filteredTransactions;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleManager getRuleManager() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return ruleManager;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountsManager getAccountsManager() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return accountsManager;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ScriptLibrary \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptLibrary getScriptLibrary() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return scriptLibrary;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return ruleManager.equals(other.ruleManager)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 accountsManager.equals(other.accountsManager)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 loansManager.equals(other.loansManager)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                \u0026\u0026 scriptLibrary.equals(other.scriptLibrary)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                \u0026\u0026 filteredTransactions.equals(other.filteredTransactions);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 16,
      "ChenJiehan318": 6,
      "cambrian-dk": 20,
      "thwnus": 17,
      "kenneth-fung": 11,
      "-": 68
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    Path getLoansFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    Path getRuleFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    Path getScriptsPath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    Path getAccountsFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "ChenJiehan318": 3,
      "kenneth-fung": 2,
      "thwnus": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/RuleManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.exceptions.RuleNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Maintains a list of unique rules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final ObservableList\u003cRule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final ObservableList\u003cRule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Creates a new (empty) list of rules."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleManager() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Creates and fills a new list of rules."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param rules A list of rules with which to fill the new list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleManager(List\u003cRule\u003e rules) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(rules);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.internalList.setAll(rules);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Retrieves the list of rules"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ObservableList\u003cRule\u003e getRules() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the rule at the specified index in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param toGet The index of the target rule."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws RuleNotFoundException If the rule is not in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Rule getRule(Index toGet) throws RuleNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        checkIndexValidity(toGet);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return getRules().get(toGet.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the current number of rules in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @return The current number of rules in the list as an {@code int}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int getRuleCount() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return getRules().size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if the list contains an equivalent rule as the given argument."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean hasRule(Rule toCheck) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Adds a rule to the rule manager."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * The rule must not already exist in the rule manager."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void addRule(Rule toAdd) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        internalList.add(0, toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Replaces a target rule with the given rule."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param toEdit The index of the target rule to replace."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param editedRule The edited rule to replace the target rule with."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void editRule(Index toEdit, Rule editedRule) throws RuleNotFoundException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        checkIndexValidity(toEdit);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        internalList.set(toEdit.getZeroBased(), editedRule);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Deletes a target rule from the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param toDelete The index of the target rule to delete."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void deleteRule(Index toDelete) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        checkIndexValidity(toDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        internalList.remove(toDelete.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Check that the index given is valid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param toCheck The index to check."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws RuleNotFoundException If the index exceeds the current number of rules."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private void checkIndexValidity(Index toCheck) throws RuleNotFoundException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (toCheck.getOneBased() \u003e getRuleCount()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new RuleNotFoundException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                || (other instanceof RuleManager // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 getRules().equals(((RuleManager) other).getRules()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return getRules().hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 117
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/ScriptLibrary.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.Script;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Stores scripts."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public interface ScriptLibrary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Stores a script. If a script with the same name is already stored, the new script replaces that script."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param s the script to store"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if a script was replaced; \u003ccode\u003efalse\u003c/code\u003e if there was no script with the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * same name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    boolean addScript(Script s);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Gets a script by its name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param name the name of the script to get"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the script, or \u003ccode\u003enull\u003c/code\u003e if no script by that name exists"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    Script getScript(ScriptName name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Removes a script by its name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param name the name of the script to remove"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if a script was removed; \u003ccode\u003efalse\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    boolean removeScript(ScriptName name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Returns an unmodifiable view of the stored scripts."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return an unmodifiable view of the stored scripts"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    ObservableList\u003cScript\u003e getScriptList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 42
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/ScriptLibraryManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.Script;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents the script library loaded in the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptLibraryManager implements ScriptLibrary {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final Object listLock \u003d new Object();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final ObservableList\u003cScript\u003e scriptList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final ObservableList\u003cScript\u003e unmodifiableScriptList \u003d FXCollections.unmodifiableObservableList(scriptList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final HashMap\u003cScriptName, Integer\u003e nameToIndexCache \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Constructs a script manager with no scripts."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptLibraryManager() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Constructs a script manager and populates it with the given scripts."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param scripts the scripts to populate the manager with"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptLibraryManager(Collection\u003cScript\u003e scripts) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireAllNonNull(scripts);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        synchronized (listLock) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            scriptList.setAll(scripts);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            reconstructCache();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public boolean addScript(Script s) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        synchronized (listLock) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            Integer oldIndex \u003d nameToIndexCache.get(s.getName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (oldIndex !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                scriptList.set(oldIndex, s);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                scriptList.add(s);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                nameToIndexCache.put(s.getName(), scriptList.size() - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Script getScript(ScriptName name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        synchronized (listLock) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            Integer index \u003d nameToIndexCache.get(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (index \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return scriptList.get(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public boolean removeScript(ScriptName name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        synchronized (listLock) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            Integer index \u003d nameToIndexCache.get(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (index \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            scriptList.remove(index.intValue());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            // The thinking is that removing a script doesn\u0027t happen too often."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            reconstructCache();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Reconstructs the name to index cache."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private void reconstructCache() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        synchronized (listLock) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            nameToIndexCache.clear();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            // Java\u0027s Streams library just stops short of being useful"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            // there is no way to enumerate a stream, nor zip"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            // back to the 90s we go:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            for (int i \u003d 0; i \u003c scriptList.size(); ++i) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                Script script \u003d scriptList.get(i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                nameToIndexCache.put(script.getName(), i);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ObservableList\u003cScript\u003e getScriptList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return unmodifiableScriptList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptLibraryManager that \u003d (ScriptLibraryManager) o;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return scriptList.equals(that.scriptList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return Objects.hash(scriptList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 121
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Path loansFilePath \u003d Paths.get(\"data\", \"loans.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Path ruleFilePath \u003d Paths.get(\"data\", \"rules.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private Path scriptsPath \u003d Paths.get(\"data\", \"scripts\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private Path accountsFilePath \u003d Paths.get(\"data\", \"accounts.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        setLoansFilePath(newUserPrefs.getLoansFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        setRuleFilePath(newUserPrefs.getRuleFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        setScriptsPath(newUserPrefs.getScriptsPath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        setAccountsFilePath(newUserPrefs.getAccountsFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Path getLoansFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loansFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void setLoansFilePath(Path loansFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(loansFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loansFilePath \u003d loansFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Path getRuleFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return ruleFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void setRuleFilePath(Path ruleFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(ruleFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.ruleFilePath \u003d ruleFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Path getScriptsPath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return scriptsPath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public void setScriptsPath(Path scriptsPath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireNonNull(scriptsPath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.scriptsPath \u003d scriptsPath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Path getAccountsFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return accountsFilePath;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void setAccountsFilePath(Path accountsFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(accountsFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.accountsFilePath \u003d accountsFilePath;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 loansFilePath.equals(o.loansFilePath)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                \u0026\u0026 ruleFilePath.equals(o.ruleFilePath)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 scriptsPath.equals(o.scriptsPath)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 accountsFilePath.equals(o.accountsFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return Objects.hash(guiSettings, loansFilePath, ruleFilePath, scriptsPath, accountsFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        sb.append(\"\\nLoans data file location : \" + loansFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        sb.append(\"\\nRule data file location : \" + ruleFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        sb.append(\"\\nScripts location : \" + scriptsPath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        sb.append(\"\\nAccounts data file location : \" + accountsFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 15,
      "ChenJiehan318": 15,
      "kenneth-fung": 12,
      "thwnus": 14,
      "-": 71
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/account/Account.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Represents an account in the account manager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class Account {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final TransactionList transactionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Account(Name name, Description description, TransactionList transactionList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(name, transactionList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.transactionList \u003d transactionList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public TransactionList getTransactionList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return transactionList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Transaction getTransaction(Index toGet) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return this.transactionList.getTransaction(toGet);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void addTransaction(Transaction toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.transactionList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void updateTransaction(Index txnIndex, Transaction editedTxn) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.transactionList.setTransaction(txnIndex, editedTxn);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void deleteTransaction(Transaction toDelete) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.transactionList.remove(toDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!(other instanceof Account)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Account otherAccount \u003d (Account) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return otherAccount.getName().equals(getName())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                \u0026\u0026 otherAccount.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 otherAccount.getTransactionList().equals(getTransactionList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return Objects.hash(name, description, transactionList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return getName().toString() + \" (\" + getDescription().toString() + \")\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tcgj": 11,
      "ChenJiehan318": 64,
      "cambrian-dk": 9,
      "kenneth-fung": 1,
      "thwnus": 4
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/account/NameHasKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Tests that a {@code Account}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class NameHasKeywordsPredicate implements Predicate\u003cAccount\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public NameHasKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean test(Account account) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(account.getName().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                || (other instanceof NameHasKeywordsPredicate// instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameHasKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 31
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/account/UniqueAccountList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.account.exceptions.AccountNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.account.exceptions.DuplicateAccountException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * A list of accounts that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class UniqueAccountList implements Iterable\u003cAccount\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final ObservableList\u003cAccount\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final ObservableList\u003cAccount\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public UniqueAccountList() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public UniqueAccountList(List\u003cAccount\u003e toBeCopied) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        setAll(toBeCopied);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns true if the list contains an equivalent account as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean contains(Account toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return internalList.stream().anyMatch(acc -\u003e accountsAreEquivalent(toCheck, acc));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Adds an account to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * The account must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void add(Account toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Replaces the account {@code target} in the list with {@code editedAccount}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * The account identity of {@code editedAccount} must not be the same as another existing account in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public void replace(Account target, Account editedAccount) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(target, editedAccount);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (!accountsAreEquivalent(target, editedAccount) \u0026\u0026 contains(editedAccount)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        internalList.set(index, editedAccount);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Removes the equivalent account from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * The account must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void remove(Account toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Retrieves an account from the list equivalent to the given account."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the account, or null if no such account exists"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Account get(Account toGet) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        for (Account account : internalUnmodifiableList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (accountsAreEquivalent(account, toGet)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                return account;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Retrieves an account from the list by index."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is out of bounds"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Account get(Index index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Retrieves an account from the list by name."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the account, or null if no such account exists"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Account get(Name name) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        for (Account account : internalUnmodifiableList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (account.getName().equals(name)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                return account;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public void setAll(UniqueAccountList replacement) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Replaces the contents of this list with {@code accounts}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * {@code accounts} must not contain duplicate accounts."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public void setAll(List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(accounts);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!accountsAreUnique(accounts)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        internalList.setAll(accounts);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Returns the number of accounts in the list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Retrieves the index of the account equivalent to the given account."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the index, or null if no such account exists"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Index indexOfEquivalent(Account toGet) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); ++i) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (accountsAreEquivalent(internalList.get(i), toGet)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                return Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public ObservableList\u003cAccount\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Iterator\u003cAccount\u003e iterator() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                || (other instanceof UniqueAccountList // instanceof handles nulls"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueAccountList) other).internalList));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns true if {@code accounts} contains only unique accounts."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private boolean accountsAreUnique(List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        for (int i \u003d 0; i \u003c accounts.size() - 1; i++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            for (int j \u003d i + 1; j \u003c accounts.size(); j++) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                if (accountsAreEquivalent(accounts.get(i), accounts.get(j))) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Returns true if the two accounts are identical, or have the same name."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static boolean accountsAreEquivalent(Account a1, Account a2) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (a1 \u003d\u003d null \u0026\u0026 a2 !\u003d null || a1 !\u003d null \u0026\u0026 a2 \u003d\u003d null) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return a1 \u003d\u003d a2 || a1.getName().equals(a2.getName());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "ChenJiehan318": 140,
      "cambrian-dk": 10,
      "thwnus": 67
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/account/exceptions/AccountNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "package budgetbuddy.model.account.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Signals that the operation is unable to find the specified account."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountNotFoundException extends RuntimeException {}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 1,
      "ChenJiehan318": 6
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/account/exceptions/DuplicateAccountException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "package budgetbuddy.model.account.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class DuplicateAccountException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public DuplicateAccountException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        super(\"Operation would result in duplicate accounts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 1,
      "ChenJiehan318": 10
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/attributes/Category.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Stub class to represent a Category of a Transaction."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final int MAX_LENGTH \u003d 180;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \"Category should not be null or more than \" + MAX_LENGTH + \" characters.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Category(String category) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        checkArgument(isValidCategory(category), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static boolean isValidCategory(String category) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return category !\u003d null \u0026\u0026 category.length() \u003c\u003d MAX_LENGTH;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                || (other instanceof Category \u0026\u0026 category.equals(((Category) other).category));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return category.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "cambrian-dk": 30,
      "ChenJiehan318": 10,
      "thwnus": 1
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/attributes/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * A stub class to represent a description of an entity."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final int MAX_LENGTH \u003d 180;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"Description should be no more than \" + MAX_LENGTH + \" characters.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns true if the given string description is no more than {@link #MAX_LENGTH} characters."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static boolean isValidDescription(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return description.length() \u003c\u003d MAX_LENGTH;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || (other instanceof Description"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 description.equals(((Description) other).description));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "cambrian-dk": 35,
      "thwnus": 2,
      "kenneth-fung": 10
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/attributes/Direction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Enum that represents the direction of money flow (IN/OUT)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public enum Direction {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    IN(\"IN\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    OUT(\"OUT\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Direction can only be IN or OUT.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public final String direction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Constructs a {@code direction}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @param direction The String representing the direction of money flow."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    Direction(String direction) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.direction \u003d direction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns true if a given string corresponds to a Direction value."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toTest The string to test."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static boolean contains(String toTest) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Arrays.stream(Direction.values())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .map(Direction::toString)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .anyMatch(directionStr -\u003e directionStr.equals(toTest));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return direction;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 24,
      "thwnus": 1,
      "kenneth-fung": 14
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/attributes/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents the name of a model (e.g. Person, Account) in budget buddy."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "kenneth-fung": 7,
      "-": 50
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/loan/Debtor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents money owed between a debtor and several creditors when splitting a payment."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class Debtor {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Person debtor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final HashMap\u003cPerson, Amount\u003e creditors \u003d new HashMap\u003cPerson, Amount\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Every field must be present and non-null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Debtor(Person debtor, HashMap\u003cPerson, Amount\u003e creditors) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(debtor, creditors);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.debtor \u003d debtor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.creditors.putAll(creditors);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Person getDebtor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return debtor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public HashMap\u003cPerson, Amount\u003e getCreditors() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return creditors;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof Debtor)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Debtor otherDebtor \u003d (Debtor) other;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return debtor.equals(otherDebtor.debtor)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 creditors.equals(otherDebtor.creditors);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Objects.hash(debtor, creditors);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        builder.append(debtor.getName()).append(\"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        creditors.forEach((key, value) -\u003e builder.append(\"owes \").append(key.getName()).append(\" \").append(value));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 63
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/loan/Loan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.AppUtil.getDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents a loan."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Guarantees: details are present and not null, field values are validated and immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class Loan {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Direction direction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Loan(Person person, Direction direction, Amount amount,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                Date date, Description description, Status status) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(person, direction, amount, date, description, status);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.direction \u003d direction;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Direction getDirection() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return direction;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getDateFormat().format(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Checks if the Loan has been paid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return True if paid, false otherwise."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean isPaid() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return status \u003d\u003d Status.PAID;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns a {@code string} containing the amount, direction and person of the loan."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String getEssentialInfo() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getDirection() \u003d\u003d Direction.OUT"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                ? String.format(\"%s owes you %s\", getPerson(), getAmount())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                : String.format(\"You owe %s %s\", getPerson(), getAmount());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Checks all fields of a Loan for equality (person, direction, amount, date, description, status)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof Loan)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // do not compare status of loan"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Loan otherLoan \u003d (Loan) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return otherLoan.getPerson().isSamePerson(person)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 otherLoan.getDirection() \u003d\u003d direction"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 otherLoan.getAmount().equals(amount)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 otherLoan.getDate().equals(date)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 otherLoan.getDescription().equals(description);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Objects.hash(person, direction, amount, description, date, status);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String directionWithFunctionWord \u003d getDirection() \u003d\u003d Direction.OUT"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                ? getDirection().direction.toLowerCase() + \" to\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                : getDirection().direction.toLowerCase() + \" from\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        final String divider \u003d \" | \";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        builder.append(getStatus().getStatusIcon()).append(\" \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .append(getAmount()).append(\" \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .append(directionWithFunctionWord).append(\" \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .append(getPerson())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .append(divider)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .append(getDateString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (!description.getDescription().isBlank()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            builder.append(divider).append(getDescription());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "cambrian-dk": 2,
      "kenneth-fung": 125,
      "thwnus": 2
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/loan/LoanFilters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A container class to hold filters for the loan list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanFilters {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Predicate\u003cLoan\u003e FILTER_ALL \u003d loan -\u003e true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns a predicate that checks if a loan\u0027s direction is equal to the given direction."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static Predicate\u003cLoan\u003e getDirectionPredicate(Direction direction) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        switch (direction) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        case IN:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return loan -\u003e loan.getDirection() \u003d\u003d Direction.IN;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        case OUT:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return loan -\u003e loan.getDirection() \u003d\u003d Direction.OUT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new EnumConstantNotPresentException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    Direction.class, \"Direction filter not found for given direction.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns a predicate that checks if a loan\u0027s status is equal to the given status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static Predicate\u003cLoan\u003e getStatusPredicate(Status status) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        switch (status) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        case PAID:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Loan::isPaid;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        case UNPAID:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return loan -\u003e !loan.isPaid();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new EnumConstantNotPresentException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    Status.class, \"Status filter not found for given status.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 43
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/loan/LoanSorters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A container class to hold comparators for sorting the loan list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanSorters {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Comparator\u003cLoan\u003e DATE_NEWEST \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Comparator.comparing(Loan::getDate).reversed();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Comparator\u003cLoan\u003e PERSON \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Comparator.comparing(loan -\u003e loan.getPerson().getName().toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Comparator\u003cLoan\u003e AMOUNT_ASC \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Comparator.comparingLong(loan -\u003e loan.getAmount().toLong());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 16
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/loan/Status.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents the status (PAID/UNPAID) of a Loan."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    PAID(\"PAID\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    UNPAID(\"UNPAID\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"Status can only be PAID or UNPAID (case-sensitive).\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public final String status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Constructs a {@code status}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param status A valid status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    Status(String status) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns true if a given string corresponds to a Status value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toTest The string to test."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static boolean contains(String toTest) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Arrays.stream(Status.values())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .map(Status::toString)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .anyMatch(statusStr -\u003e statusStr.equals(toTest));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Gets the icon of a corresponding status."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The icon as a string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // PAID: tick icon; UNPAID: blank space (or a cross? \\u2718)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return status.equals(PAID.toString()) ? \"\\u2713\" : \" \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 52
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/loan/exceptions/LoanNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Signals that the operation is unable to find the specified loan."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 6
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/loan/predicates/AmountMatchPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A predicate to check equality between a given amount and the amount of a given loan."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class AmountMatchPredicate implements Predicate\u003cLoan\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public AmountMatchPredicate(Amount amount) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean test(Loan loan) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loan.getAmount().equals(amount);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || (other instanceof AmountMatchPredicate"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 amount.equals(((AmountMatchPredicate) other).amount));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 32
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/loan/predicates/DateMatchPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A predicate to check equality between a given date and the date of a given loan."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class DateMatchPredicate implements Predicate\u003cLoan\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public DateMatchPredicate(Date date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean test(Loan loan) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loan.getDate().equals(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || (other instanceof DateMatchPredicate"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 date.equals(((DateMatchPredicate) other).date));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 32
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/loan/predicates/DescriptionMatchPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A predicate to check equality between a given description and the description of a given loan."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class DescriptionMatchPredicate implements Predicate\u003cLoan\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public DescriptionMatchPredicate(Description description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean test(Loan loan) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loan.getDescription().toString().equalsIgnoreCase(description.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || (other instanceof DescriptionMatchPredicate"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 description.equals(((DescriptionMatchPredicate) other).description));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 32
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/loan/predicates/PersonMatchPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A predicate to check equality between a given person and the person of a given loan."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class PersonMatchPredicate implements Predicate\u003cLoan\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public PersonMatchPredicate(Person person) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean test(Loan loan) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loan.getPerson().getName().toString().equalsIgnoreCase(person.getName().toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || (other instanceof PersonMatchPredicate"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 person.equals(((PersonMatchPredicate) other).person));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 32
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents a person referenced by a loan."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Creates a person with the loans in the {@code toBeCopied}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param name The name of the person."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Person(Name name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return otherPerson !\u003d null \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getName().name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "kenneth-fung": 15,
      "-": 56
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/Rule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a Rule in budget buddy."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: predicate and action are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class Rule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String TYPE_EXPRESSION \u003d \"EXPRESSION\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String TYPE_SCRIPT \u003d \"SCRIPT\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    // rule details"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final RulePredicate predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final RuleAction action;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Rule(RulePredicate predicate, RuleAction action) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(predicate, action);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RulePredicate getPredicate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleAction getAction() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return action;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if both rules have the same identity and detail fields."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!(other instanceof Rule)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Rule otherRule \u003d (Rule) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return otherRule.getPredicate().equals(getPredicate())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 otherRule.getAction().equals(getAction());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Objects.hash(predicate, action);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return String.format(\"If: %s, then: %s.\", predicate, action);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 63
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/RuleAction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a RuleAction in a Rule with hidden implementation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public abstract class RuleAction {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Actions should be either expressions or scripts \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    + \"and should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 13
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/RulePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a RulePredicate in a Rule with hidden implementation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public abstract class RulePredicate {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Predicates should be either expressions or scripts \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    + \"and should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 13
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/exceptions/RuleNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Signals that the operation is unable to find the specified rule."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/expression/ActionExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.expression;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.rules.RuleEngine.isValueParsable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a RuleAction written as an expression."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: operator and value are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class ActionExpression extends RuleAction {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Action expressions should contain one or two terms in the order\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"\u003coperator\u003e \u003cvalue\u003e \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"depending on the operator type, and should not be blank\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_TYPE_REQUIREMENTS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"The operator and value of the expression have to evaluate to the correct type:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"e.g. setcategory food, where \u0027setcategory\u0027 expects a string\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"and \u0027food\u0027 is a string\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final Pattern FORMAT_REGEX \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Pattern.compile(\"^(?\u003cexprOperator\u003e\\\\S+)\\\\s*(?\u003cexprValue\u003e.*)$\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Operator operator;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Value value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs an {@code ActionExpression}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param operator the operator used in the expression."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value used in the expression."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ActionExpression(Operator operator, Value value) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(operator, value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Operator getOperator() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return operator;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Value getValue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns if the action expression is valid,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * i.e. value is working with the expected type specified by the operator."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static boolean isValidActionExpr(Operator operator, Value value) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return operator.getExpectedTypes().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .anyMatch(type -\u003e isValueParsable(type, value));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Rule.TYPE_EXPRESSION;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if both action expressions have the same identity and detail fields."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!(other instanceof ActionExpression)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ActionExpression otherAction \u003d (ActionExpression) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return otherAction.getOperator().equals(getOperator())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 otherAction.getValue().equals(getValue());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Objects.hash(operator, value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return String.format(\"%s %s\", operator, value);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 95
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/expression/Attribute.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.expression;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleEngine;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a Attribute in an PredicateExpression"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAttribute(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public enum Attribute {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    DESCRIPTION(\"desc\", RuleEngine.TYPE_CATEGORY),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    OUT_AMOUNT(\"outamt\", RuleEngine.TYPE_AMOUNT),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    IN_AMOUNT(\"inamt\", RuleEngine.TYPE_AMOUNT),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    DATE(\"date\", RuleEngine.TYPE_DATE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Attributes should be valid and not be blank\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"Valid attributes: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    + Arrays.stream(Attribute.values())"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    .map(op -\u003e op.representation)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    .reduce((x, y) -\u003e x + \", \" + y)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    .orElse(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String representation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String evaluatedType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    Attribute(String representation, String evaluatedType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.representation \u003d representation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.evaluatedType \u003d evaluatedType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if a given string is a valid attribute."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static boolean isValidAttribute(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Arrays"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .stream(Attribute.values())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .anyMatch(attribute -\u003e attribute.representation.equals(test.toLowerCase()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns an {@code Attribute} given a valid string representation."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Attribute of(String rep) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Arrays"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .stream(Attribute.values())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .filter(attribute -\u003e attribute.representation.equals(rep.toLowerCase()))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the type that this attribute will be evaluated to."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String getEvaluatedType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return evaluatedType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return representation;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 64
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/expression/Operator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.expression;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleEngine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents an Operator in an expression."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidOperator(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public enum Operator {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    // Predicate operators"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    LESS_THAN(\"\u003c\", \"\u003c\", RuleEngine.TYPE_AMOUNT),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    MORE_THAN(\"\u003e\", \"\u003e\", RuleEngine.TYPE_AMOUNT),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    LESS_EQUAL(\"\u003c\u003d\", \"\u003c\u003d\", RuleEngine.TYPE_AMOUNT),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    MORE_EQUAL(\"\u003e\u003d\", \"\u003e\u003d\", RuleEngine.TYPE_AMOUNT),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    EQUAL_TO(\"\u003d\", \"\u003d\", RuleEngine.TYPE_AMOUNT),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    CONTAINS(\"contains\", \"contains\", RuleEngine.TYPE_CATEGORY),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    // Action operators"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    SET_CATEGORY(\"set_cat\", \"set category\", RuleEngine.TYPE_CATEGORY),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    REMOVE_CATEGORY(\"remove_cat\", \"remove category\", RuleEngine.TYPE_CATEGORY),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    SET_DESC(\"set_desc\", \"set description\", RuleEngine.TYPE_CATEGORY),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    APPEND_DESC(\"app_desc\", \"append desc\", RuleEngine.TYPE_DESC),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    PREPEND_DESC(\"prep_desc\", \"prepend desc\", RuleEngine.TYPE_DESC),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    SET_IN(\"set_in\", \"set txn inwards\", RuleEngine.TYPE_BLANK),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    SET_OUT(\"set_out\", \"set txn outwards\", RuleEngine.TYPE_BLANK),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    SWITCH_DIRECTION(\"switch_direct\", \"switch txn direction\", RuleEngine.TYPE_BLANK);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Operators should be valid for their expression and not be blank\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"Valid operators: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + Arrays.stream(Operator.values())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    .map(op -\u003e op.opWord)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    .reduce((x, y) -\u003e x + \", \" + y)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    .orElse(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String opWord;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String rep;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Set\u003cString\u003e expectedTypes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    Operator(String opWord, String rep, String... expectedType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.opWord \u003d opWord;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.rep \u003d rep;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.expectedTypes.addAll(Arrays.asList(expectedType));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if a given string is a valid operator."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static boolean isValidOperator(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Arrays"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .stream(Operator.values())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .anyMatch(operator -\u003e operator.opWord.equals(test.toLowerCase()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns an {@code Operator} given a valid representation."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Operator of(String opWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Arrays"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .stream(Operator.values())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .filter(operator -\u003e operator.opWord.equals(opWord.toLowerCase()))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the set of types that this operator expect from its arguments."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Set\u003cString\u003e getExpectedTypes() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Collections.unmodifiableSet(expectedTypes);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String getOperatorWord() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return opWord;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return rep;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 86
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/expression/PredicateExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.expression;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.rules.RuleEngine.isValueParsable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a RulePredicate written as an expression."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: attribute, operator and value are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class PredicateExpression extends RulePredicate {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Predicate expressions should contain exactly three terms in the order\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"\u003cattribute\u003e \u003coperator\u003e \u003cvalue\u003e \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_TYPE_REQUIREMENTS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"The attribute, operator, and value of the expression have to evaluate to the correct type:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"e.g. inamt \u003c 5, where \u0027inamt\u0027 evaluates to a decimal value,\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"\u0027\u003c\u0027 expects a decimal value, and \u00275\u0027 is a decimal value\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final Pattern FORMAT_REGEX \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Pattern.compile(\"^(?\u003cexprAttribute\u003e\\\\S+)\\\\s+(?\u003cexprOperator\u003e\\\\S+)\\\\s(?\u003cexprValue\u003e.*)$\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Attribute attribute;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Operator operator;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Value value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs an {@code PredicateExpression}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute used in the expression."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param operator the operator used in the expression."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value used in the expression."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public PredicateExpression(Attribute attribute, Operator operator, Value value) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(attribute, operator, value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Attribute getAttribute() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return attribute;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Operator getOperator() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return operator;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Value getValue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns if the predicate expression is valid,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * i.e. attribute and value are all working with the expected type specified by the operator."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static boolean isValidPredicateExpr(Attribute attribute, Operator operator, Value value) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return operator.getExpectedTypes()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .anyMatch(type -\u003e type.equals(attribute.getEvaluatedType())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                        \u0026\u0026 isValueParsable(type, value));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Rule.TYPE_EXPRESSION;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if both predicate expressions have the same identity and detail fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!(other instanceof PredicateExpression)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        PredicateExpression otherPredicate \u003d (PredicateExpression) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return otherPredicate.getAttribute().equals(getAttribute())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 otherPredicate.getOperator().equals(getOperator())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 otherPredicate.getValue().equals(getValue());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Objects.hash(attribute, operator, value);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return String.format(\"%s %s %s\", attribute, operator, value);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 105
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/expression/Value.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.expression;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a Value in an expression"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidValue(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class Value {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final int MAX_LENGTH \u003d 180;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Values, if present, should either be numerical, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"or contain alphanumeric characters including these special characters,\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"excluding the parentheses, (\" + SPECIAL_CHARACTERS + \"),\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"of length not more than \" + MAX_LENGTH + \" characters\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"^[\\\\w\\\\s\" + SPECIAL_CHARACTERS + \"]{0,\" + MAX_LENGTH + \"}$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a {@code Value}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value A valid value."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Value(String value) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if a given string is a valid value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static boolean isValidValue(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                || (other instanceof Value // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 value.equals(((Value) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 57
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/script/ActionScript.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.script;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a RuleAction written as a script."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: Field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class ActionScript extends RuleAction {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Action scripts should contain valid script names\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final ScriptName scriptName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs an {@code ActionScript}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param scriptName the name of the script to be used."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ActionScript(ScriptName scriptName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.scriptName \u003d scriptName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ScriptName getScriptName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return scriptName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Rule.TYPE_SCRIPT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if both action scripts have the same identity and detail fields."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!(other instanceof ActionScript)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ActionScript otherAction \u003d (ActionScript) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return otherAction.getScriptName().equals(getScriptName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return scriptName.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return String.format(\"run script %s\", scriptName.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 61
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/script/PredicateScript.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.script;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a RulePredicate written as a script."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: Field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class PredicateScript extends RulePredicate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Predicate scripts should contain valid script names\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final ScriptName scriptName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs an {@code PredicateScript}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param scriptName the name of the script to be used."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public PredicateScript(ScriptName scriptName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.scriptName \u003d scriptName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ScriptName getScriptName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return scriptName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Rule.TYPE_SCRIPT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if both predicate scripts have the same identity and detail fields."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!(other instanceof PredicateScript)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        PredicateScript otherPredicate \u003d (PredicateScript) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return otherPredicate.getScriptName().equals(getScriptName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return scriptName.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return String.format(\"run script %s\", scriptName.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 61
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/script/Script.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model.script;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents a script."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class Script {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final ScriptName name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Creates a Script."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param name The name of the script"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param description The description of the script"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param code The script\u0027s code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Script(ScriptName name, Description description, String code) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireAllNonNull(name, description, code);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Returns this script\u0027s name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptName getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Return this script\u0027s description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the description"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Return this script\u0027s code."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the code"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        Script script \u003d (Script) o;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return name.equals(script.name) \u0026\u0026 code.equals(script.code) \u0026\u0026 description.equals(script.description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return Objects.hash(name, code, description);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 74
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/script/ScriptName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model.script;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents the name of a script."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Guarantees: immutable, and is valid as specified"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptName {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Script names must contain only \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            + \"alphanumeric characters, dashes, and underscores, and must not be empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}-_]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Constructs a script name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param name A valid script name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws IllegalArgumentException if {@code name} is not a valid script name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptName(String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Returns true if {@code name} is a valid script name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param name The string to validate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return true if {@code name} is a valid script name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static boolean isValidName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return name.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptName that \u003d (ScriptName) o;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return name.equals(that.name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 62
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/transaction/Amount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Represents the Amount in a Transaction."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Guarantees: immutable, is valid as declared in {@link #isValidAmount(long)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String CURRENCY_SIGN \u003d \"$\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MAX_AMOUNT \u003d \"9999999999999999\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"Amounts should be non-negative numbers, should not be blank, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    + \"and should not exceed \" + CURRENCY_SIGN + MAX_AMOUNT + \".\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_CENTS_PARSE_ERROR \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"Cents should be at most two decimal places long.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final long amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Constructs an {@code Amount}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @param amount a valid amount."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Amount(long amount) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        AppUtil.checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public long toLong() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns true if a given long is a valid Amount."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static boolean isValidAmount(long test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return test \u003e\u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return String.format(\"%s%d.%02d\", CURRENCY_SIGN, amount / 100, amount % 100);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 amount \u003d\u003d ((Amount) other).amount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return Long.hashCode(amount);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 8,
      "cambrian-dk": 45,
      "kenneth-fung": 8
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/transaction/Transaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Represents a Transaction in a TransactionList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class Transaction {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private Direction direction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Transaction(Date date, Amount amount, Direction direction, Description description,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                       Category... categories) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireAllNonNull(date, amount, direction);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.direction \u003d direction;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.categories.addAll(Arrays.asList(categories));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Constructor that allows categories to be entered as a @code{@literal Set\u003cCategory\u003e}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Transaction(Date date, Amount amount, Direction direction, Description description,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                       Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireAllNonNull(date, amount, direction);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.direction \u003d direction;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.categories \u003d categories;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Direction getDirection() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return direction;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Set\u003cCategory\u003e getCategories() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return categories;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns true if both Transactions have all the same fields (date, amount, description, categories)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (!(other instanceof Transaction)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Transaction otherTransaction \u003d (Transaction) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return otherTransaction.getDate().equals(getDate())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 otherTransaction.amount.equals(amount)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 otherTransaction.direction.equals(direction)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 otherTransaction.description.equals(description)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 otherTransaction.categories.equals(categories);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return Objects.hash(date, amount, direction, description, categories);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        builder.append(\"Amount: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(direction.toString())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(\" on \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(\" Categories: \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "cambrian-dk": 107,
      "thwnus": 5
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/transaction/TransactionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * A list of Transactions that does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionList implements Iterable\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"TransactionList can not be null\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns true if the list contains an equivalent Transaction as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean contains(Transaction toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Adds a Transaction to the list. Multiple identical transactions are allowed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void add(Transaction toAdd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the Transaction at the specified index in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param toGet The index of the target transaction."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws TransactionNotFoundException If the transaction is not in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Transaction getTransaction(Index toGet) throws TransactionNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (toGet.getOneBased() \u003e internalList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return internalList.get(toGet.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Replaces the Transaction at the index {@code txnIndex} in the list with {@code editedTransaction}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * {@code txnIndex} must be a valid index of a Transaction in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void setTransaction(Index txnIndex, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(txnIndex, editedTransaction);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        internalList.set(txnIndex.getZeroBased(), editedTransaction);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Replaces all transactions within the list with the transactions from another TransactionList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * {@code toCopy} must not be a null list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void setAll(TransactionList toCopy) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(toCopy);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        internalList.setAll(toCopy.internalList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Removes the equivalent Transaction from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * The Transaction must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void remove(Transaction toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            // TODO handle transactions not found"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the current number of transactions in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int getTransactionsCount() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public ObservableList\u003cTransaction\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Iterator\u003cTransaction\u003e iterator() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                || (other instanceof TransactionList // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 internalList.equals(((TransactionList) other).internalList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 26,
      "cambrian-dk": 85,
      "ChenJiehan318": 1,
      "thwnus": 1
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/transaction/TransactionMatchesConditionsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Tests that {@code Transaction}\u0027s attributes matches any of the attributes given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionMatchesConditionsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Optional\u003cCategory\u003e categoryOptional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Optional\u003cDate\u003e fromOptional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Optional\u003cDate\u003e untilOptional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public TransactionMatchesConditionsPredicate(Optional\u003cCategory\u003e categoryOptional,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                                                 Optional\u003cDate\u003e fromOptional,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                                                 Optional\u003cDate\u003e untilOptional) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.categoryOptional \u003d categoryOptional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.fromOptional \u003d fromOptional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.untilOptional \u003d untilOptional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (categoryOptional.isPresent()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            if (!transaction.getCategories().contains(categoryOptional.get())) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (fromOptional.isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            if (!transaction.getDate().after(fromOptional.get())) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (untilOptional.isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            if (!transaction.getDate().before(fromOptional.get())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || (other instanceof TransactionMatchesConditionsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 categoryOptional.equals(((TransactionMatchesConditionsPredicate) other).categoryOptional)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 fromOptional.equals(((TransactionMatchesConditionsPredicate) other).fromOptional)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 untilOptional.equals(((TransactionMatchesConditionsPredicate) other).untilOptional)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 50,
      "thwnus": 3
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/transaction/exceptions/TransactionNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "package budgetbuddy.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Signals that the operation is unable to find the specified transaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        super(\"The transaction cannot be found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 10
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static List\u003cLoan\u003e getSampleLoans() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Arrays.asList("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new Loan(new Person(new Name(\"Example Person 1\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        Direction.OUT, new Amount(420), new Date(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        new Description(\"Paid for their stuff.\"), Status.UNPAID),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new Loan(new Person(new Name(\"Example Person 2\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        Direction.IN, new Amount(10000), new Date(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        new Description(\"Owe them for that party.\"), Status.UNPAID));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static LoansManager getSampleLoansManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new LoansManager(getSampleLoans());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 24,
      "-": 8
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.AccountsManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.RuleManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.storage.accounts.AccountsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.LoansStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.rules.RuleStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.storage.scripts.ScriptsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public interface Storage extends AccountsStorage, LoansStorage, RuleStorage, ScriptsStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    void save(Model model) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    Path getLoansFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    void saveLoans(LoansManager loansManager) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    Path getRuleFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    void saveRules(RuleManager ruleManager) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    Path getAccountsFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    void saveAccounts(AccountsManager accountsManager) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 15,
      "ChenJiehan318": 10,
      "kenneth-fung": 8,
      "thwnus": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.AccountsManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.RuleManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.ScriptLibrary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.storage.accounts.AccountsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.LoansStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.rules.RuleStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.storage.scripts.ScriptsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.storage.scripts.exceptions.ScriptsStorageException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private AccountsStorage accountsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private LoansStorage loansStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private RuleStorage ruleStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private ScriptsStorage scriptsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public StorageManager(AccountsStorage accountsStorage, LoansStorage loansStorage, RuleStorage ruleStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                          ScriptsStorage scriptsStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loansStorage \u003d loansStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.ruleStorage \u003d ruleStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.scriptsStorage \u003d scriptsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.accountsStorage \u003d accountsStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void save(Model model) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        saveAccounts(model.getAccountsManager());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        saveLoans(model.getLoansManager());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        saveRules(model.getRuleManager());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        saveScripts(model.getScriptLibrary());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Loan Storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Path getLoansFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loansStorage.getLoansFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Optional\u003cLoansManager\u003e readLoans() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return readLoans(getLoansFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Optional\u003cLoansManager\u003e readLoans(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loansStorage.readLoans(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void saveLoans(LoansManager loansManager) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        saveLoans(loansManager, loansStorage.getLoansFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void saveLoans(LoansManager loansManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansStorage.saveLoans(loansManager, filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Rule Storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Path getRuleFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return ruleStorage.getRuleFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Optional\u003cRuleManager\u003e readRules() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return readRules(getRuleFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Optional\u003cRuleManager\u003e readRules(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return ruleStorage.readRules(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void saveRules(RuleManager ruleManager) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        saveRules(ruleManager, ruleStorage.getRuleFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void saveRules(RuleManager ruleManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ruleStorage.saveRules(ruleManager, filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Path getScriptsPath() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return scriptsStorage.getScriptsPath();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptLibrary readScripts(Path scriptsPath) throws IOException, ScriptsStorageException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return scriptsStorage.readScripts(scriptsPath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public void saveScripts(ScriptLibrary scripts, Path scriptsPath) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        scriptsStorage.saveScripts(scripts, scriptsPath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Account Storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Path getAccountsFilePath() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return accountsStorage.getAccountsFilePath();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Optional\u003cAccountsManager\u003e readAccounts() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return readAccounts(getAccountsFilePath());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Optional\u003cAccountsManager\u003e readAccounts(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return accountsStorage.readAccounts(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void saveAccounts(AccountsManager accountsManager) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        saveAccounts(accountsManager, accountsStorage.getAccountsFilePath());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void saveAccounts(AccountsManager accountsManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        accountsStorage.saveAccounts(accountsManager, filePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 45,
      "ChenJiehan318": 34,
      "kenneth-fung": 32,
      "thwnus": 23,
      "-": 38
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/accounts/AccountsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.storage.accounts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.AccountsManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Represents a storage for {@link AccountsManager}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public interface AccountsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    Path getAccountsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns AccountsManager data as a {@link AccountsManager}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws DataConversionException If the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws IOException If there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    Optional\u003cAccountsManager\u003e readAccounts() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @see #readAccounts()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    Optional\u003cAccountsManager\u003e readAccounts(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Saves the given {@link AccountsManager} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param accountsManager Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws IOException If any problem occurs when writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    void saveAccounts(AccountsManager accountsManager) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param filePath The path to save the data file to."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @see #saveAccounts(AccountsManager)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    void saveAccounts(AccountsManager accountsManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 46
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/accounts/JsonAccountsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.storage.accounts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.AccountsManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * A class to access AccountsManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class JsonAccountsStorage implements AccountsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAccountsStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public JsonAccountsStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Path getAccountsFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Optional\u003cAccountsManager\u003e readAccounts() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return readAccounts(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Similar to {@link #readAccounts()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param filePath Location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws DataConversionException If the data file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Optional\u003cAccountsManager\u003e readAccounts(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Optional\u003cJsonSerializableAccountsManager\u003e jsonAccountsManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                filePath, JsonSerializableAccountsManager.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (jsonAccountsManager.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return Optional.of(jsonAccountsManager.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void saveAccounts(AccountsManager accountsManager) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        saveAccounts(accountsManager, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Similar to {@link #saveAccounts(AccountsManager)}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param filePath Location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void saveAccounts(AccountsManager accountsManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(accountsManager, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAccountsManager(accountsManager), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 78
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/accounts/JsonAdaptedAccount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.storage.accounts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Jackson-friendly version of {@link budgetbuddy.model.account.Account}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class JsonAdaptedAccount {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Account\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final String transactionList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Constructs a {@code JsonAdaptedAccount} with the given account details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public JsonAdaptedAccount(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                           @JsonProperty(\"transactionList\") String transactionList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(name, description, transactionList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.transactionList \u003d transactionList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Converts a given {@code Transaction} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param source"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public JsonAdaptedAccount(Account source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        // TODO !!!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        transactionList \u003d source.getTransactionList().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Converts this Jackson-friendly adapted account object into the model\u0027s {@code Account} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws IllegalValueException If any data constraints were violated in the adapted account."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Account toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new Account(checkName(), checkDescription(), checkTransactionList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Checks that adapted name can be converted into model\u0027s {@code Name} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws IllegalValueException If adapted object cannot be converted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private Name checkName() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Checks that adapted description can be converted into model\u0027s {@code Description} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws IllegalValueException If adapted object cannot be converted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private Description checkDescription() throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Checks that adapted transactionList can be converted into model\u0027s {@code transactionList} object."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws IllegalValueException If adapted object cannot be converted."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private TransactionList checkTransactionList() throws IllegalValueException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (transactionList \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TransactionList.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!Description.isValidDescription(transactionList)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new IllegalValueException(TransactionList.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        // TODO Deserialise transactions..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new TransactionList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 97,
      "thwnus": 4
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/accounts/JsonSerializableAccountsManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.storage.accounts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.AccountsManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * An immutable AccountsManager that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "@JsonRootName(value \u003d \"accountsmanager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class JsonSerializableAccountsManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final List\u003cJsonAdaptedAccount\u003e accounts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final int activeAccountIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Constructs a {@code JsonSerializableAccountsManager} with the given accounts."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public JsonSerializableAccountsManager(@JsonProperty(\"accounts\") List\u003cJsonAdaptedAccount\u003e accounts,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                                           @JsonProperty(\"activeAccountIndex\") int activeAccountIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.accounts.addAll(accounts);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.activeAccountIndex \u003d activeAccountIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Converts a given {@code AccountsManager} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param source Future changes to the source will not affect the created {@code JsonSerializableAccountsManager}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public JsonSerializableAccountsManager(AccountsManager source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        accounts.addAll(source.getAccounts().stream().map(JsonAdaptedAccount::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        activeAccountIndex \u003d source.getActiveAccountIndex().getZeroBased();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Converts this accounts manager into the model\u0027s {@code AccountsManager} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws IllegalValueException If any data constraints are violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountsManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        List\u003cAccount\u003e accountList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        for (JsonAdaptedAccount jsonAdaptedAccount : accounts) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            Account account \u003d jsonAdaptedAccount.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            accountList.add(account);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new AccountsManager(accountList, Index.fromZeroBased(activeAccountIndex));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 48,
      "thwnus": 8
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/loans/JsonAdaptedLoan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.storage.loans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.AppUtil.getDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Jackson-friendly version of {@link budgetbuddy.model.loan.Loan}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class JsonAdaptedLoan {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Loan\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final String personName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final String direction;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final long amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Constructs a {@code JsonAdaptedLoan} with the given loan details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public JsonAdaptedLoan(@JsonProperty(\"personName\") String personName,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                           @JsonProperty(\"direction\") String direction,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                           @JsonProperty(\"amount\") long amount,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                           @JsonProperty(\"date\") Date date,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                           @JsonProperty(\"status\") String status) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(personName, direction, amount, date, description, status);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.personName \u003d personName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.direction \u003d direction;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Converts a given {@code Loan} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param source"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public JsonAdaptedLoan(Loan source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        personName \u003d source.getPerson().getName().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        direction \u003d source.getDirection().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        amount \u003d source.getAmount().toLong();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        date \u003d source.getDate();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        status \u003d source.getStatus().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Converts this Jackson-friendly adapted loan object into the model\u0027s {@code Loan} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If any data constraints were violated in the adapted loan."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Loan toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Person person \u003d new Person(getValidatedName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Loan(person, getValidatedDirection(), getValidatedAmount(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                getValidatedDate(), getValidatedDescription(), getValidatedStatus());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Validates and converts the adapted name into the model\u0027s {@code Name} object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The validated and converted name."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Name getValidatedName() throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (personName \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!Name.isValidName(personName)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Name(personName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Validates and converts the adapted direction into the model\u0027s {@code Direction} object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The validated and converted direction."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Direction getValidatedDirection() throws IllegalValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (direction \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Direction.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!Direction.contains(direction)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException(Direction.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Direction.valueOf(direction);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Validates and converts the adapted amount into the model\u0027s {@code Amount} object."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The validated and converted amount."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Amount getValidatedAmount() throws IllegalValueException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Amount(amount);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Validates the adapted date as a {@code java.util.Date} object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The validated date."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Date getValidatedDate() throws IllegalValueException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            String dateStr \u003d getDateFormat().format(date);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            getDateFormat().parse(dateStr);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException(\"Error reading stored date.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Validates and converts the adapted description into the model\u0027s {@code Description} object."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The validated and converted description."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Description getValidatedDescription() throws IllegalValueException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Validates and converts the adapted status into the model\u0027s {@code Status} object."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The validated and converted status."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Status getValidatedStatus() throws IllegalValueException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!Status.contains(status)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Status.valueOf(status);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 163,
      "thwnus": 2
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/loans/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.storage.loans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Person(modelName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 6,
      "-": 43
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/loans/JsonLoansStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.storage.loans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A class to access LoansManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class JsonLoansStorage implements LoansStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonLoansStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public JsonLoansStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Path getLoansFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Optional\u003cLoansManager\u003e readLoans() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return readLoans(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Similar to {@link #readLoans()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param filePath Location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws DataConversionException If the data file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Optional\u003cLoansManager\u003e readLoans(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cJsonSerializableLoansManager\u003e jsonLoansManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                filePath, JsonSerializableLoansManager.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (jsonLoansManager.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.of(jsonLoansManager.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void saveLoans(LoansManager loansManager) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        saveLoans(loansManager, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Similar to {@link #saveLoans(LoansManager)}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param filePath Location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void saveLoans(LoansManager loansManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(loansManager, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableLoansManager(loansManager), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 78
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/loans/JsonSerializableLoansManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.storage.loans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * An immutable LoansManager that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "@JsonRootName(value \u003d \"loansmanager\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class JsonSerializableLoansManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final List\u003cJsonAdaptedLoan\u003e loans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Constructs a {@code JsonSerializableLoansManager} with the given loans."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public JsonSerializableLoansManager(@JsonProperty(\"loans\") List\u003cJsonAdaptedLoan\u003e persons) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loans.addAll(persons);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Converts a given {@code LoansManager} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param source Future changes to the source will not affect the created {@code JsonSerializableLoansManager}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public JsonSerializableLoansManager(LoansManager source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loans.addAll(source.getLoans().stream().map(JsonAdaptedLoan::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Converts this loans manager into the model\u0027s {@code LoansManager} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If any data constraints are violated."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoansManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        List\u003cLoan\u003e loanList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (JsonAdaptedLoan jsonAdaptedLoan : loans) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loanList.add(jsonAdaptedLoan.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new LoansManager(loanList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "kenneth-fung": 49
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/loans/LoansStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.storage.loans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents a storage for {@link LoansManager}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public interface LoansStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    Path getLoansFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns LoansManager data as a {@link LoansManager}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws DataConversionException If the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IOException If there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    Optional\u003cLoansManager\u003e readLoans() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @see #readLoans()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    Optional\u003cLoansManager\u003e readLoans(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Saves the given {@link LoansManager} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param loansManager Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IOException If any problem occurs when writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    void saveLoans(LoansManager loansManager) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param filePath The path to save the data file to."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @see #saveLoans(LoansManager)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    void saveLoans(LoansManager loansManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 45
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/rules/JsonAdaptedAction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage.rules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSubTypes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSubTypes.Type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Jackson-friendly version of {@link RuleAction}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "@JsonTypeInfo(use \u003d Id.NAME, property \u003d \"type\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "@JsonSubTypes({"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        @Type(value \u003d JsonAdaptedActionExpression.class, name \u003d \"expr\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        @Type(value \u003d JsonAdaptedActionScript.class, name \u003d \"script\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "})"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public interface JsonAdaptedAction {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts this Jackson-friendly adapted action object into the model\u0027s {@code RuleAction} object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If any data constraints were violated in the adapted action."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    RuleAction toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 26
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/rules/JsonAdaptedActionExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage.rules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.ActionExpression;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Operator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Jackson-friendly version of {@link RuleAction}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class JsonAdaptedActionExpression implements JsonAdaptedAction {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Action\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String operator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a {@code JsonAdaptedActionExpression} with the given action details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public JsonAdaptedActionExpression(@JsonProperty(\"operator\") String operator,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                                       @JsonProperty(\"value\") String value) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(operator, value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts a given {@code ActionExpression} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public JsonAdaptedActionExpression(ActionExpression source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        operator \u003d source.getOperator().getOperatorWord();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        value \u003d source.getValue().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts this Jackson-friendly adapted action object into the model\u0027s {@code ActionExpression} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If any data constraints were violated in the adapted action."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ActionExpression toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new ActionExpression(getValidatedOperator(), getValidatedValue());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Validates and converts the adapted operator into the model\u0027s {@code Operator} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @return The validated and converted operator."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Operator getValidatedOperator() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (operator \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Operator.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!Operator.isValidOperator(operator)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException(Operator.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Operator.of(operator);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Validates and converts the adapted value into the model\u0027s {@code Value} object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @return The validated and converted value."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Value getValidatedValue() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Value.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!Value.isValidValue(value)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException(Value.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new Value(value);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 83
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/rules/JsonAdaptedActionScript.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage.rules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.ActionScript;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Jackson-friendly version of {@link RuleAction}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class JsonAdaptedActionScript implements JsonAdaptedAction {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Script name is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String scriptName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a {@code JsonAdaptedActionScript} with the given action details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public JsonAdaptedActionScript(@JsonProperty(\"scriptName\") String scriptName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(scriptName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.scriptName \u003d scriptName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts a given {@code ActionScript} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public JsonAdaptedActionScript(ActionScript source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        scriptName \u003d source.getScriptName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts this Jackson-friendly adapted action object into the model\u0027s {@code ActionScript} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If any data constraints were violated in the adapted action."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ActionScript toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new ActionScript(getValidatedScriptName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Validates and converts the adapted script name into the model\u0027s {@code ScriptName} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @return The validated and converted script name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private ScriptName getValidatedScriptName() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (scriptName \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!ScriptName.isValidName(scriptName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException(ScriptName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new ScriptName(scriptName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 61
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/rules/JsonAdaptedPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage.rules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSubTypes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSubTypes.Type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Jackson-friendly version of {@link RulePredicate}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "@JsonTypeInfo(use \u003d Id.NAME, property \u003d \"type\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "@JsonSubTypes({"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        @Type(value \u003d JsonAdaptedPredicateExpression.class, name \u003d \"expr\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        @Type(value \u003d JsonAdaptedPredicateScript.class, name \u003d \"script\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "})"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public interface JsonAdaptedPredicate {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts this Jackson-friendly adapted predicate object into the model\u0027s {@code RulePredicate} object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If any data constraints were violated in the adapted predicate."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    RulePredicate toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 25
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/rules/JsonAdaptedPredicateExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage.rules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Operator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.PredicateExpression;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Jackson-friendly version of {@link RulePredicate}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class JsonAdaptedPredicateExpression implements JsonAdaptedPredicate {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Predicate\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String attribute;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String operator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a {@code JsonAdaptedPredicateExpression} with the given predicate details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public JsonAdaptedPredicateExpression(@JsonProperty(\"attribute\") String attribute,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                                          @JsonProperty(\"operator\") String operator,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                                          @JsonProperty(\"value\") String value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(attribute, operator, value);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts a given {@code PredicateExpression} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public JsonAdaptedPredicateExpression(PredicateExpression source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        attribute \u003d source.getAttribute().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        operator \u003d source.getOperator().getOperatorWord();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        value \u003d source.getValue().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts this Jackson-friendly adapted predicate object into the model\u0027s {@code PredicateExpression} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If any data constraints were violated in the adapted predicate."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public PredicateExpression toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new PredicateExpression(getValidatedAttribute(), getValidatedOperator(), getValidatedValue());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Validates and converts the adapted attribute into the model\u0027s {@code Attribute} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @return The validated and converted attribute."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Attribute getValidatedAttribute() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (attribute \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Attribute.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!Attribute.isValidAttribute(attribute)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException(Attribute.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Attribute.of(attribute);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Validates and converts the adapted operator into the model\u0027s {@code Operator} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @return The validated and converted operator."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Operator getValidatedOperator() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (operator \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Operator.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!Operator.isValidOperator(operator)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException(Operator.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Operator.of(operator);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Validates and converts the adapted value into the model\u0027s {@code Value} object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @return The validated and converted value."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Value getValidatedValue() throws IllegalValueException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Value.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!Value.isValidValue(value)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException(Value.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new Value(value);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 104
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/rules/JsonAdaptedPredicateScript.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage.rules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.PredicateScript;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Jackson-friendly version of {@link RulePredicate}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class JsonAdaptedPredicateScript implements JsonAdaptedPredicate {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Script name is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String scriptName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a {@code JsonAdaptedPredicateScript} with the given predicate details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public JsonAdaptedPredicateScript(@JsonProperty(\"scriptName\") String scriptName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(scriptName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.scriptName \u003d scriptName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts a given {@code PredicateScript} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public JsonAdaptedPredicateScript(PredicateScript source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        scriptName \u003d source.getScriptName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts this Jackson-friendly adapted predicate object into the model\u0027s {@code PredicateScript} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If any data constraints were violated in the adapted predicate."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public PredicateScript toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new PredicateScript(getValidatedScriptName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Validates and converts the adapted script name into the model\u0027s {@code ScriptName} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @return The validated and converted script name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private ScriptName getValidatedScriptName() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (scriptName \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!ScriptName.isValidName(scriptName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new IllegalValueException(ScriptName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new ScriptName(scriptName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 61
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/rules/JsonAdaptedRule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage.rules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.ActionExpression;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.PredicateExpression;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.ActionScript;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.PredicateScript;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Jackson-friendly version of {@link Rule}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class JsonAdaptedRule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final JsonAdaptedPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final JsonAdaptedAction action;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a {@code JsonAdaptedRule} with the given rule details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public JsonAdaptedRule(@JsonProperty(\"predicate\") JsonAdaptedPredicate predicate,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                           @JsonProperty(\"action\") JsonAdaptedAction action) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(predicate, action);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts a given {@code Rule} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public JsonAdaptedRule(Rule source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RulePredicate sPred \u003d source.getPredicate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleAction sAct \u003d source.getAction();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (sPred.getType().equals(Rule.TYPE_EXPRESSION)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            predicate \u003d new JsonAdaptedPredicateExpression((PredicateExpression) sPred);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            predicate \u003d new JsonAdaptedPredicateScript((PredicateScript) sPred);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (sAct.getType().equals(Rule.TYPE_EXPRESSION)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            action \u003d new JsonAdaptedActionExpression((ActionExpression) sAct);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            action \u003d new JsonAdaptedActionScript((ActionScript) sAct);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts this Jackson-friendly adapted rule object into the model\u0027s {@code Rule} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If any data constraints were violated in the adapted rule."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Rule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new Rule(predicate.toModelType(), action.toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 62
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/rules/JsonRuleStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage.rules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.RuleManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * A class to access RuleManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class JsonRuleStorage implements RuleStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRuleStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public JsonRuleStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Path getRuleFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Optional\u003cRuleManager\u003e readRules() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return readRules(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Similar to {@link #readRules()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param filePath Location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws DataConversionException If the data file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Optional\u003cRuleManager\u003e readRules(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Optional\u003cJsonSerializableRuleManager\u003e jsonRuleManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                filePath, JsonSerializableRuleManager.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (jsonRuleManager.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return Optional.of(jsonRuleManager.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void saveRules(RuleManager ruleManager) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        saveRules(ruleManager, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Similar to {@link #saveRules(RuleManager)}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param filePath Location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void saveRules(RuleManager ruleManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(ruleManager, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRuleManager(ruleManager), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 78
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/rules/JsonSerializableRuleManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage.rules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.RuleManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * An immutable RuleManager that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "@JsonRootName(value \u003d \"rulemanager\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class JsonSerializableRuleManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final List\u003cJsonAdaptedRule\u003e rules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a {@code JsonSerializableRuleManager} with the given rules."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public JsonSerializableRuleManager(@JsonProperty(\"rules\") List\u003cJsonAdaptedRule\u003e rules) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.rules.addAll(rules);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts a given {@code RuleManager} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param source Future changes to the source will not affect the created {@code JsonSerializableRuleManager}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public JsonSerializableRuleManager(RuleManager source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        rules.addAll(source.getRules().stream().map(JsonAdaptedRule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Converts this rule manager into the model\u0027s {@code RuleManager} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IllegalValueException If any data constraints are violated."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        List\u003cRule\u003e ruleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        for (JsonAdaptedRule jsonAdaptedRule : rules) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ruleList.add(jsonAdaptedRule.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new RuleManager(ruleList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 50
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/rules/RuleStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage.rules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.RuleManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a storage for {@link RuleManager}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public interface RuleStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    Path getRuleFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns RuleManager data as a {@link RuleManager}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws DataConversionException If the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IOException If there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    Optional\u003cRuleManager\u003e readRules() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @see #readRules()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    Optional\u003cRuleManager\u003e readRules(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Saves the given {@link RuleManager} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param ruleManager Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws IOException If any problem occurs when writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    void saveRules(RuleManager ruleManager) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param filePath The path to save the data file to."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @see #saveRules(RuleManager)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    void saveRules(RuleManager ruleManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 45
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/scripts/FlatfileScriptsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.storage.scripts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.io.FilenameFilter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.ScriptLibrary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.ScriptLibraryManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.Script;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.storage.scripts.exceptions.ScriptsStorageException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Stores scripts as separate files in a directory."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class FlatfileScriptsStorage implements ScriptsStorage {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static final String DESCRIPTIONS_PATH \u003d \"descriptions.json\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FlatfileScriptsStorage.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static final FilenameFilter scriptFilenameFilter \u003d (file, name) -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            name.toLowerCase().endsWith(\".js\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                    \u0026\u0026 ScriptName.isValidName(name.substring(0, name.length() - 3));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private Path scriptsPath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Constructs a flatfile script storage that stores scripts at the specified path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param scriptsPath the path at which to store scripts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public FlatfileScriptsStorage(Path scriptsPath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.scriptsPath \u003d scriptsPath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Path getScriptsPath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return scriptsPath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptLibrary readScripts(Path scriptsPath) throws IOException, ScriptsStorageException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        File scriptsDir \u003d scriptsPath.toFile();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (!scriptsDir.isDirectory()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new ScriptsStorageException(\"Scripts path does not point to a directory\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        Path scriptDescriptionsJson \u003d scriptsPath.resolve(DESCRIPTIONS_PATH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        Map\u003cScriptName, Description\u003e descMap;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            descMap \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                    JsonUtil.readJsonFile(scriptDescriptionsJson, JsonSerializableScriptDescriptionMap.class)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                            .map(JsonSerializableScriptDescriptionMap::getDescriptionMap).orElse(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            logger.warning(String.format("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                    \"Exception while reading scripts description file; using blank descriptions. %s\", e));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            descMap \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        File[] scriptFiles \u003d scriptsDir.listFiles(scriptFilenameFilter);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ArrayList\u003cScript\u003e scripts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        for (File scriptFile : scriptFiles) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            String scriptCode \u003d Files.readString(scriptFile.toPath(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            String scriptFileName \u003d scriptFile.getName();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            ScriptName scriptName \u003d scriptFileNameToScriptName(scriptFileName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            Description scriptDesc \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (descMap !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                scriptDesc \u003d descMap.get(scriptName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (scriptDesc \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                scriptDesc \u003d new Description(\"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            scripts.add(new Script(scriptName, scriptDesc, scriptCode));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ScriptLibraryManager(scripts);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public void saveScripts(ScriptLibrary scripts, Path scriptsPath) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        File scriptsDir \u003d scriptsPath.toFile();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (scriptsDir.exists() \u0026\u0026 !scriptsDir.isDirectory() \u0026\u0026 !scriptsDir.delete()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new IOException(\"Failed to delete non-directory at scripts path\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (!scriptsDir.exists() \u0026\u0026 !scriptsDir.mkdirs()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new IOException(\"Failed to create scripts directory\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        Set\u003cPath\u003e existingScriptFiles \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                Arrays.stream(scriptsDir.listFiles(scriptFilenameFilter)).map(File::toPath)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                        .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        for (Script script : scripts.getScriptList()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            String scriptFileName \u003d scriptToScriptFileName(script);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            Path scriptFilePath \u003d scriptsPath.resolve(scriptFileName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            Files.writeString(scriptFilePath, script.getCode(), StandardCharsets.UTF_8,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                    StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            existingScriptFiles.remove(scriptFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        for (Path leftoverScriptFile : existingScriptFiles) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            Files.delete(leftoverScriptFile);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        Path scriptDescriptionsJson \u003d scriptsPath.resolve(DESCRIPTIONS_PATH);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        JsonSerializableScriptDescriptionMap jsonDescMap \u003d new JsonSerializableScriptDescriptionMap(scripts);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        JsonUtil.saveJsonFile(jsonDescMap, scriptDescriptionsJson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static ScriptName scriptFileNameToScriptName(String scriptFileName) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ScriptName(scriptFileName.substring(0, scriptFileName.length() - 3));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static String scriptToScriptFileName(Script script) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return String.format(\"%s.js\", script.getName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 132
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/scripts/JsonSerializableScriptDescriptionMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.storage.scripts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.ScriptLibrary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.Script;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.ScriptName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * An immutable script description map that is serialisable to JSON."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "@JsonRootName(\"scriptDescriptionMap\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class JsonSerializableScriptDescriptionMap {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final Map\u003cString, String\u003e descriptionMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Constructs a {@link JsonSerializableScriptDescriptionMap} from the given map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param descriptionMap the map"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public JsonSerializableScriptDescriptionMap("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            @JsonProperty(\"descriptionMap\") Map\u003cString, String\u003e descriptionMap) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.descriptionMap \u003d descriptionMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Constructs a {@link JsonSerializableScriptDescriptionMap} from the scripts in the given library."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param library the library"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public JsonSerializableScriptDescriptionMap(ScriptLibrary library) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.descriptionMap \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        for (Script script : library.getScriptList()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            descriptionMap.put(script.getName().toString(), script.getDescription().getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Retrieves the description map."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the map"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Map\u003cScriptName, Description\u003e getDescriptionMap() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return Collections.unmodifiableMap("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                descriptionMap.entrySet().stream().collect(Collectors.toConcurrentMap("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                    entry -\u003e new ScriptName(entry.getKey()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                    entry -\u003e new Description(entry.getValue()))));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 56
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/scripts/ScriptsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.storage.scripts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.ScriptLibrary;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.storage.scripts.exceptions.ScriptsStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents storage for {@link budgetbuddy.model.ScriptLibrary}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public interface ScriptsStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Returns the path scripts are stored at."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the path scripts are stored at"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    Path getScriptsPath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Reads scripts from the path returned by {@link #getScriptsPath()}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the scripts"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws IOException if an IO exception occurs"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    default ScriptLibrary readScripts() throws IOException, ScriptsStorageException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return readScripts(getScriptsPath());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Reads scripts from the given path."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param scriptsPath the path to read scripts from"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the scripts"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws IOException if an IO exception occurs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    ScriptLibrary readScripts(Path scriptsPath) throws IOException, ScriptsStorageException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Saves scripts to the path returned by {@link #getScriptsPath()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param scripts the scripts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws IOException if an IO exception occurs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    default void saveScripts(ScriptLibrary scripts) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        saveScripts(scripts, getScriptsPath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Saves scripts to the given path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param scripts the scripts"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param scriptsPath the path to save scripts to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws IOException if an IO exception occurs"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    void saveScripts(ScriptLibrary scripts, Path scriptsPath) throws IOException;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 57
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/scripts/exceptions/ScriptsStorageException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.storage.scripts.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents an issue that occurs while reading or writing the script library."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptsStorageException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Constructs a {@link ScriptsStorageException} with the given message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptsStorageException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Constructs a {@link ScriptsStorageException} with the given message and cause."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param cause the cause"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptsStorageException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 25
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "-": 72
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-w13-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "ChenJiehan318": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.ui.tab.AccountTab;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.tab.LoanSplitTab;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.tab.LoanTab;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.tab.PanelTab;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.tab.RuleTab;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.ui.tab.ScriptTab;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.ui.tab.TransactionTab;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private HashMap\u003cCommandCategory, PanelTab\u003e tabMap;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private StackPane sideBarPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private StackPane outputDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        tabMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // instantiate all tabs"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountTab accountTab \u003d new AccountTab(logic.getAccountList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        tabMap.put(CommandCategory.ACCOUNT, accountTab);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        TransactionTab transactionTab \u003d new TransactionTab(logic.getTransactionList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        tabMap.put(CommandCategory.TRANSACTION, transactionTab);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleTab ruleTab \u003d new RuleTab(logic.getRuleList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        tabMap.put(CommandCategory.RULE, ruleTab);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        LoanTab loanTab \u003d new LoanTab(logic.getFilteredLoanList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        tabMap.put(CommandCategory.LOAN, loanTab);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        LoanSplitTab loanSplitTab \u003d new LoanSplitTab(logic.getSortedDebtorList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        tabMap.put(CommandCategory.LOAN_SPLIT, loanSplitTab);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptTab scriptTab \u003d new ScriptTab(logic.getScriptList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        tabMap.put(CommandCategory.SCRIPT, scriptTab);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        OutputDisplay outputDisplay \u003d new OutputDisplay(accountTab, transactionTab, ruleTab,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                loanTab, loanSplitTab, scriptTab);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        outputDisplayPlaceholder.getChildren().add(outputDisplay.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // activate initial tab"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // updateView(INITIAL_TAB_HERE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Updates the current tab on display"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private void updateView(PanelTab tabToView) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (tabToView !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            TabPane pane \u003d (TabPane) outputDisplayPlaceholder.getChildren().get(0);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            pane.getSelectionModel().select(tabToView);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            CommandCategory category \u003d commandResult.getCommandCategory();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            updateView(tabMap.get(category));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 44,
      "ChenJiehan318": 4,
      "cambrian-dk": 6,
      "thwnus": 5,
      "kenneth-fung": 1,
      "-": 180
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/OutputDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static javafx.scene.control.TabPane.STYLE_CLASS_FLOATING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents the output display component that shows the appropriate panels."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class OutputDisplay extends UiPart\u003cTabPane\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final String FXML \u003d \"OutputDisplay.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public OutputDisplay(Tab... tabs) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        getRoot().getStyleClass().add(STYLE_CLASS_FLOATING);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        getRoot().getTabs().addAll(tabs);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 20
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public StatusBarFooter() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        // TODO: Put something useful in the status bar"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        saveLocationStatus.setText(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "thwnus": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/calendar.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "ChenJiehan318": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/card/AccountCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.ui.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.ui.UiPart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * An UI component that displays information of a {@code Account}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private static final String FXML \u003d \"AccountCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public final Account account;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountCard(Account account, int displayedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.account \u003d account;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        name.setText(account.getName().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        description.setText(account.getDescription().toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (!(other instanceof AccountCard)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountCard card \u003d (AccountCard) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 account.equals(card.account);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "ChenJiehan318": 51,
      "cambrian-dk": 1,
      "kenneth-fung": 1,
      "thwnus": 1
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/card/LoanCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.ui.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A UI component that displays information of a {@code Loan}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final String FXML \u003d \"LoanCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public final Loan loan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Label amountDirectionPerson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanCard(Loan loan, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loan \u003d loan;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        amountDirectionPerson.setText(loan.getEssentialInfo());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        date.setText(loan.getDateString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        description.setText(loan.getDescription().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        description.setWrapText(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        status.setText(loan.getStatus().getStatusIcon());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        status.setStyle(\"-fx-font-size: 48\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoanCard otherCard \u003d (LoanCard) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return id.getText().equals(otherCard.id.getText())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 loan.equals(otherCard.loan);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 59
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/card/LoanSplitCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.ui.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Debtor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A UI component that displays information of a {@code Debtor}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanSplitCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final String FXML \u003d \"LoanSplitCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public final Debtor debtor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Label person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private FlowPane debts;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanSplitCard(Debtor debtor) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.debtor \u003d debtor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.person.setText(debtor.getDebtor().getName().toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.debts.setOrientation(Orientation.VERTICAL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        debtor.getCreditors().entrySet().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .sorted(Comparator.comparingLong(pa -\u003e pa.getValue().toLong()))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .forEach(pa -\u003e debts.getChildren().add("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        new Label(String.format(\"owes %s to %s\", pa.getValue(), pa.getKey()))));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanSplitCard)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoanSplitCard otherCard \u003d (LoanSplitCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return debtor.equals(otherCard.debtor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 57
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/card/RuleCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.ActionExpression;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.PredicateExpression;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.ActionScript;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.script.PredicateScript;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * An UI component that displays information of a {@code Rule}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final String FXML \u003d \"RuleCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public final Rule rule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Label predicatePrefix;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Label predicateDelimiter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Label actionPrefix;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Label actionDelimiter;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private FlowPane predicateFlow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private FlowPane actionFlow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleCard(Rule rule, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.rule \u003d rule;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        id.setText(\"Rule #\" + displayedIndex + \": \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RulePredicate predicate \u003d rule.getPredicate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        predicatePrefix.setText(\"IF\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        predicateDelimiter.setText(\":\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (predicate.getType().equals(Rule.TYPE_EXPRESSION)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            PredicateExpression predExpr \u003d (PredicateExpression) predicate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Label attr \u003d new Label(predExpr.getAttribute().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Label op \u003d new Label(predExpr.getOperator().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Label val \u003d new Label(predExpr.getValue().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            attr.setId(\"predAttr\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            op.setId(\"predOp\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            val.setId(\"predVal\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            predicateFlow.getChildren().addAll(attr, op, val);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            PredicateScript predicateScript \u003d (PredicateScript) predicate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Label name \u003d new Label(predicateScript.getScriptName().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Label suffix \u003d new Label(\"(script)\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            name.setId(\"predScript\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            suffix.setId(\"predSuffix\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            predicateFlow.getChildren().addAll(name, suffix);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleAction action \u003d rule.getAction();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        actionPrefix.setText(\"THEN\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        actionDelimiter.setText(\":\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (action.getType().equals(Rule.TYPE_EXPRESSION)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ActionExpression actExpr \u003d (ActionExpression) action;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Label op \u003d new Label(actExpr.getOperator().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            op.setId(\"actOp\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            actionFlow.getChildren().add(op);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            String valStr \u003d actExpr.getValue().toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (!valStr.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                Label val \u003d new Label(valStr);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                val.setId(\"actVal\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                actionFlow.getChildren().add(val);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ActionScript actionScript \u003d (ActionScript) action;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Label name \u003d new Label(actionScript.getScriptName().toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Label suffix \u003d new Label(\"(script)\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            name.setId(\"actScript\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            suffix.setId(\"actSuffix\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            actionFlow.getChildren().addAll(name, suffix);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!(other instanceof RuleCard)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleCard card \u003d (RuleCard) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 rule.equals(card.rule);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 115
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/card/ScriptCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.ui.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.Script;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * A UI component that displays information of a {@link Script}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static final String FXML \u003d \"ScriptCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static final String MESSAGE_NO_DESCRIPTION \u003d \"No description provided\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final Script script;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptCard(Script script) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.script \u003d script;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        name.setText(script.getName().toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        String desc \u003d script.getDescription().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (desc.isBlank()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            description.setText(MESSAGE_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            description.setStyle(\"-fx-font-style: italic\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            description.setText(desc);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptCard that \u003d (ScriptCard) o;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return Objects.equals(script, that.script);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return script.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 54
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/card/TransactionCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "package budgetbuddy.ui.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * An UI component that displays information of a {@code Account}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private static final String FXML \u003d \"TransactionCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public final Transaction transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private Label direction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private Label categories;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionCard(Transaction transaction, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        amount.setText(transaction.getAmount().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        description.setText(transaction.getDescription().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        amount.setText(transaction.getAmount().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        direction.setText(transaction.getDirection().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        categories.setText(transaction.getCategories().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        date.setText(transaction.getDate().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (!(other instanceof TransactionCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        TransactionCard card \u003d (TransactionCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 transaction.equals(card.transaction);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 65
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/panel/AccountListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.ui.card.AccountCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Panel containing the list of accounts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountListPanel extends DisplayPanel {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private static final String FXML \u003d \"AccountPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AccountListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private ListView\u003cAccount\u003e accountListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountListPanel(ObservableList\u003cAccount\u003e accountList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        accountListView.setItems(accountList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        accountListView.setCellFactory(listView -\u003e new AccountListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Account} using a {@code AccountCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    class AccountListViewCell extends ListCell\u003cAccount\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        protected void updateItem(Account account, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            super.updateItem(account, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            if (empty || account \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                setMouseTransparent(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                setFocusTraversable(false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                setGraphic(new AccountCard(account, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "ChenJiehan318": 46
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/panel/DisplayPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.UiPart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents an abstract output display panel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public abstract class DisplayPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public DisplayPanel(String fxmlFileName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(fxmlFileName);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 13
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/panel/LoanPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.ui.card.LoanCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Panel containing the list of loans."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class LoanPanel extends DisplayPanel {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final String FXML \u003d \"LoanPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LoanPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private ListView\u003cLoan\u003e loanListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanPanel(ObservableList\u003cLoan\u003e sortedLoanList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loanListView.setItems(sortedLoanList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loanListView.setCellFactory(loanListView -\u003e new LoanListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Loan} using a {@code LoanCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    class LoanListViewCell extends ListCell\u003cLoan\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        protected void updateItem(Loan loan, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            super.updateItem(loan, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (empty || loan \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                setGraphic(new LoanCard(loan, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                setMouseTransparent(true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                setFocusTraversable(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "kenneth-fung": 46
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/panel/LoanSplitPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Debtor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.ui.card.LoanSplitCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Panel containing the list of debtors."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class LoanSplitPanel extends DisplayPanel {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final String FXML \u003d \"LoanSplitPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LoanSplitPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private ListView\u003cDebtor\u003e debtorListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanSplitPanel(SortedList\u003cDebtor\u003e sortedDebtorList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        debtorListView.setItems(sortedDebtorList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        debtorListView.setCellFactory(debtorListView -\u003e new DebtorListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Debtor} using a {@code LoanSplitCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    class DebtorListViewCell extends ListCell\u003cDebtor\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        protected void updateItem(Debtor debtor, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            super.updateItem(debtor, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (empty || debtor \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                setGraphic(new LoanSplitCard(debtor).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "kenneth-fung": 45
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/panel/RulePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.card.RuleCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Panel containing the list of rules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RulePanel extends DisplayPanel {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final String FXML \u003d \"RulePanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RulePanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private ListView\u003cRule\u003e ruleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RulePanel(ObservableList\u003cRule\u003e ruleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ruleListView.setItems(ruleList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ruleListView.setCellFactory(listView -\u003e new RuleListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Rule} using a {@code RuleCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class RuleListViewCell extends ListCell\u003cRule\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        protected void updateItem(Rule rule, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            super.updateItem(rule, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (empty || rule \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                int newIndex \u003d getIndex() + 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                setGraphic(new RuleCard(rule, newIndex).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                setMouseTransparent(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                setFocusTraversable(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 48
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/panel/ScriptListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.Script;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.ui.card.ScriptCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Panel containing the list of scripts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptListPanel extends DisplayPanel {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static final String FXML \u003d \"ScriptListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ScriptListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private ListView\u003cScript\u003e scriptListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptListPanel(ObservableList\u003cScript\u003e scriptList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        scriptListView.setItems(scriptList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        scriptListView.setCellFactory(listView -\u003e new ScriptListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Account} using a {@code AccountCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    static class ScriptListViewCell extends ListCell\u003cScript\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        protected void updateItem(Script script, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            super.updateItem(script, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (empty || script \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                setMouseTransparent(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                setFocusTraversable(false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                setGraphic(new ScriptCard(script).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 48
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/panel/TransactionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "package budgetbuddy.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.ui.card.TransactionCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Panel containing a list of transactions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionListPanel extends DisplayPanel {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private static final String FXML \u003d \"TransactionPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransactionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private ListView\u003cTransaction\u003e transactionListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionListPanel(ObservableList\u003cTransaction\u003e transactionList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.transactionListView.setItems(transactionList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.transactionListView.setCellFactory(listView -\u003e new TransactionListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Account} using a {@code TransactionCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    class TransactionListViewCell extends ListCell\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        protected void updateItem(Transaction transaction, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            super.updateItem(transaction, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            if (empty || transaction \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                setMouseTransparent(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                setFocusTraversable(false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                setGraphic(new TransactionCard(transaction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 47
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/tab/AccountTab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.ui.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.ui.panel.AccountListPanel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Represents a tab component that displays the account panel when selected."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountTab extends PanelTab {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountTab(ObservableList\u003cAccount\u003e accountList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        super(new AccountListPanel(accountList), \"/images/accountTab.png\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 15
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/tab/LoanSplitTab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.loan.Debtor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.panel.LoanSplitPanel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a tab component that displays the loan split panel when selected."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class LoanSplitTab extends PanelTab {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public LoanSplitTab(SortedList\u003cDebtor\u003e loanSplitList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(new LoanSplitPanel(loanSplitList), \"/images/loanSplitTab.png\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 15
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/tab/LoanTab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.panel.LoanPanel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a tab component that displays the loan panel when selected."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class LoanTab extends PanelTab {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public LoanTab(ObservableList\u003cLoan\u003e loanList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(new LoanPanel(loanList), \"/images/loanTab.png\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 15
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/tab/PanelTab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.panel.DisplayPanel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.effect.ColorAdjust;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents an abstract tab component that displays its corresponding panel when selected."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public abstract class PanelTab extends Tab {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public PanelTab(DisplayPanel panel, String imageFileName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        setClosable(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        setContent(panel.getRoot());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // Create image"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ImageView currImage \u003d new ImageView(AppUtil.getImage(imageFileName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ColorAdjust desaturateEffect \u003d new ColorAdjust(0, -1, 0, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ColorAdjust saturateEffect \u003d new ColorAdjust(0, 0, 0, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        currImage.setEffect(desaturateEffect);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        setGraphic(currImage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // Change effect depending on state"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        setOnSelectionChanged(event -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (isSelected()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                currImage.setEffect(saturateEffect);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                currImage.setEffect(desaturateEffect);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 35
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/tab/RuleTab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.panel.RulePanel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a tab component that displays the rule panel when selected."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleTab extends PanelTab {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleTab(ObservableList\u003cRule\u003e ruleList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(new RulePanel(ruleList), \"/images/ruleTab.png\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 15
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/tab/ScriptTab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.ui.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.Script;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.ui.panel.ScriptListPanel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents a tab component that displays the script panel when selected."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptTab extends PanelTab {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptTab(ObservableList\u003cScript\u003e scriptList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        super(new ScriptListPanel(scriptList), \"/images/scriptTab.png\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 15
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/tab/TransactionTab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "package budgetbuddy.ui.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import budgetbuddy.ui.panel.TransactionListPanel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Represents a tab component that displays the transaction panel when selected."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionTab extends PanelTab {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionTab(ObservableList\u003cTransaction\u003e transactionList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        super(new TransactionListPanel(transactionList), \"/images/transactionTab.png\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 15
    }
  },
  {
    "path": "src/main/resources/view/AccountCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"80\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 40
    }
  },
  {
    "path": "src/main/resources/view/AccountPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    \u003cListView fx:id\u003d\"accountListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 8
    }
  },
  {
    "path": "src/main/resources/view/ColorfulTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    background-color: #FFC0CB; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-base: #FFC0CB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-control-inner-background: #FFC0CB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #FFC0CB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color: transparent transparent transparent #FFC0CB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #FFC0CB;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #FFC0CB;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #FFC0CB;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color: #FFC0CB;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     -fx-border-color: derive(#FFC0CB, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color: derive(#FFC0CB, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color: derive(#FFC0CB, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-border-color: black, black;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #FFC0CB;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #FFC0CB;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent #FFC0CB transparent #FFC0CB;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color: #FFC0CB #F5F5F5 #ffffff #F5F5F5;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #B0E0E6;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 335,
      "kenneth-fung": 17
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-border-color: #999999;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tcgj"
        },
        "content": "#filterField {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tcgj"
        },
        "content": "#predicateFlow, #actionFlow {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-hgap: 5;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-vgap: 5;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tcgj"
        },
        "content": "#predOp, #actOp, #predAttr, #predVal, #actVal, #predScript, #actScript {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-padding: 1 3 3 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tcgj"
        },
        "content": "#predOp, #actOp {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-background-color: #f67280;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tcgj"
        },
        "content": "#predAttr, #predVal, #actVal {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-background-color: #f8b595;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tcgj"
        },
        "content": "#predScript, #actScript {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-background-color: #6c5b7c;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tcgj"
        },
        "content": "#predSuffix, #actSuffix {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-font-size: 9px;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tcgj"
        },
        "content": ".tab-pane.floating \u003e .tab-header-area .tab {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 31,
      "-": 342
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/LoanCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"70\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"25\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cLabel fx:id\u003d\"amountDirectionPerson\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" prefWidth\u003d\"400\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 41
    }
  },
  {
    "path": "src/main/resources/view/LoanPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    \u003cListView fx:id\u003d\"loanListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/LoanSplitCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"30\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"70\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"30\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cLabel fx:id\u003d\"person\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"30\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"debts\" minHeight\u003d\"30\" prefHeight\u003d\"70\" alignment\u003d\"CENTER_LEFT\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 31
    }
  },
  {
    "path": "src/main/resources/view/LoanSplitPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    \u003cListView fx:id\u003d\"debtorListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"800.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"BudgetBuddy\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    \u003cImage url\u003d\"@/images/favicon.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        \u003cStackPane fx:id\u003d\"outputDisplayPlaceholder\" minHeight\u003d\"300.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tcgj": 7,
      "kenneth-fung": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/OutputDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003cTabPane fx:id\u003d\"tabPane\" side\u003d\"LEFT\" styleClass\u003d\"pane-with-border\" tabClosingPolicy\u003d\"UNAVAILABLE\" tabMaxHeight\u003d\"150.0\" tabMaxWidth\u003d\"50.0\" tabMinHeight\u003d\"150.0\" tabMinWidth\u003d\"50.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6
    }
  },
  {
    "path": "src/main/resources/view/PanelTab.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003cTab closable\u003d\"false\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5
    }
  },
  {
    "path": "src/main/resources/view/RuleCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" mouseTransparent\u003d\"true\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "  \u003cGridPane mouseTransparent\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"NEVER\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"NEVER\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "  \u003cLabel fx:id\u003d\"id\" alignment\u003d\"TOP_CENTER\" styleClass\u003d\"cell_big_label\" textOverrun\u003d\"CLIP\" GridPane.columnSpan\u003d\"2147483647\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "  \u003cLabel fx:id\u003d\"predicatePrefix\" style\u003d\"-fx-font-weight: bold\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cLabel fx:id\u003d\"actionPrefix\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cLabel fx:id\u003d\"predicateDelimiter\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cLabel fx:id\u003d\"actionDelimiter\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "   \u003cFlowPane fx:id\u003d\"predicateFlow\" alignment\u003d\"CENTER_LEFT\" hgap\u003d\"5.0\" prefWrapLength\u003d\"500.0\" vgap\u003d\"5.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"actionFlow\" alignment\u003d\"CENTER_LEFT\" hgap\u003d\"5.0\" prefWrapLength\u003d\"500.0\" vgap\u003d\"5.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets left\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tcgj": 70
    }
  },
  {
    "path": "src/main/resources/view/RulePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "  \u003cListView fx:id\u003d\"ruleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tcgj": 8
    }
  },
  {
    "path": "src/main/resources/view/ScriptCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "thwnus": 12
    }
  },
  {
    "path": "src/main/resources/view/ScriptListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    \u003cListView fx:id\u003d\"scriptListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "thwnus": 8
    }
  },
  {
    "path": "src/main/resources/view/TransactionCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"80\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003cLabel fx:id\u003d\"amount\" text\u003d\"\\$amount\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003cLabel fx:id\u003d\"direction\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$direction\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003cLabel fx:id\u003d\"categories\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$categories\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 43
    }
  },
  {
    "path": "src/main/resources/view/TransactionPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    \u003cListView fx:id\u003d\"transactionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 8
    }
  },
  {
    "path": "src/test/java/budgetbuddy/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.ScriptLibraryManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.storage.accounts.JsonAccountsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.JsonLoansStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.rules.JsonRuleStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.storage.scripts.FlatfileScriptsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    // TODO"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    // private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        JsonLoansStorage loansStorage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new JsonLoansStorage(temporaryFolder.resolve(\"loans.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        JsonAccountsStorage accountsStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                new JsonAccountsStorage(temporaryFolder.resolve(\"accounts.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        JsonRuleStorage ruleStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                new JsonRuleStorage(temporaryFolder.resolve(\"rules.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        FlatfileScriptsStorage scriptsStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                new FlatfileScriptsStorage(temporaryFolder.resolve(\"scripts\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        StorageManager storage \u003d new StorageManager(accountsStorage,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                loansStorage, ruleStorage, scriptsStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        String deleteCommand \u003d \"account delete 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        String listCommand \u003d HelpCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        assertCommandSuccess(listCommand, HelpCommand.SHOWING_HELP_MESSAGE, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    // TODO: Add an equivalent test for accounts"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        JsonLoansStorage loansStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new JsonLoansStorage(temporaryFolder.resolve(\"ioExceptionLoans.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        JsonAccountsStorage accountsStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                new JsonAccountsStorage(temporaryFolder.resolve(\"ioExceptionAccounts.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, loansStorage,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                accountsStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(TypicalPersons.AMY).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLoansManager(), model.getRuleManager(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                model.getAccountsManager(), new ScriptLibraryManager(), new UserPrefs());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    // TODO: Add an equivalent for our accounts"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /* private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 18,
      "ChenJiehan318": 9,
      "thwnus": 18,
      "kenneth-fung": 6,
      "-": 118
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", null);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", null)));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", null, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\", null)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", null, true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", null, false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\", null).hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\", null).hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", null, true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", null, false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 12,
      "-": 42
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    // TODO Add an equivalent for accounts"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "thwnus": 5,
      "-": 60
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, null, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "-": 14
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, null, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "-": 14
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/parser/CommandLineParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class CommandLineParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final CommandLineParser parser \u003d new CommandLineParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 7,
      "thwnus": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static void assertParseSuccess(CommandParser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static void assertParseFailure(CommandParser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "thwnus": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/parser/CommandParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CommandParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class CommandParserUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e CommandParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            -\u003e CommandParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, CommandParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, CommandParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CommandParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e CommandParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertEquals(expectedName, CommandParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertEquals(expectedName, CommandParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 11,
      "kenneth-fung": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/LoansManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.LoanFilters;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.LoanSorters;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.exceptions.LoanNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.predicates.AmountMatchPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.predicates.DateMatchPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.predicates.DescriptionMatchPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.predicates.PersonMatchPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.TypicalDebtors;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.TypicalLoans;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoansManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private LoansManager loansManager \u003d new LoansManager(TypicalLoans.LOAN_LIST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LoansManager(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void updateFilteredList_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e loansManager.updateFilteredList(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void updateFilteredList_validPredicates_loanListFiltersCorrectly() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // direction predicate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.updateFilteredList(LoanFilters.getDirectionPredicate(Direction.IN));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(loansManager.getFilteredLoans().stream().allMatch(loan -\u003e loan.getDirection() \u003d\u003d Direction.IN));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // status predicate"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.updateFilteredList(LoanFilters.getStatusPredicate(Status.PAID));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(loansManager.getFilteredLoans().stream().allMatch(Loan::isPaid));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // amount predicate"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.updateFilteredList(new AmountMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getAmount()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(loansManager.getFilteredLoans().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .allMatch(loan -\u003e loan.getAmount().equals(TypicalLoans.JOHN_OUT_UNPAID.getAmount())));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // date predicate"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.updateFilteredList(new DateMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getDate()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(loansManager.getFilteredLoans().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .allMatch(loan -\u003e loan.getDate().equals(TypicalLoans.JOHN_OUT_UNPAID.getDate())));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // description predicate"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.updateFilteredList(new DescriptionMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getDescription()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(loansManager.getFilteredLoans().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .allMatch(loan -\u003e loan.getDescription().equals(TypicalLoans.JOHN_OUT_UNPAID.getDescription())));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // person predicate"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.updateFilteredList(new PersonMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getPerson()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(loansManager.getFilteredLoans().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .allMatch(loan -\u003e loan.getPerson().equals(TypicalLoans.JOHN_OUT_UNPAID.getPerson())));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // show-all predicate"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.updateFilteredList(LoanFilters.FILTER_ALL);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(loansManager.getFilteredLoans(), TypicalLoans.LOAN_LIST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void sortLoans_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e loansManager.sortLoans(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void sortLoans_validSorters_loanListSortsCorrectly() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // sort by amount in ascending order"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.sortLoans(LoanSorters.AMOUNT_ASC);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(IntStream.range(0, loansManager.getFilteredLoans().size() - 1)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .allMatch(i -\u003e loansManager.getFilteredLoans().get(i).getAmount().toLong()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        \u003c\u003d loansManager.getFilteredLoans().get(i + 1).getAmount().toLong()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // sort by date, newest first"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.sortLoans(LoanSorters.DATE_NEWEST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(IntStream.range(0, loansManager.getFilteredLoans().size() - 1).allMatch(i -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Date first \u003d loansManager.getFilteredLoans().get(i).getDate();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Date second \u003d loansManager.getFilteredLoans().get(i + 1).getDate();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return first.after(second) || first.equals(second);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // sort by persons\u0027 names in alphabetical order"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.sortLoans(LoanSorters.PERSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(IntStream.range(0, loansManager.getFilteredLoans().size() - 1)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .allMatch(i -\u003e loansManager.getFilteredLoans().get(i).getPerson().getName().toString()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .compareTo(loansManager.getFilteredLoans().get(i + 1).getPerson().getName().toString()) \u003c\u003d 0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void sortLoans_doubleSort_loanListSortOrderReverses() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // sort by amount in descending order"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.sortLoans(LoanSorters.AMOUNT_ASC);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.sortLoans(LoanSorters.AMOUNT_ASC);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(IntStream.range(0, loansManager.getFilteredLoans().size() - 1)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .allMatch(i -\u003e loansManager.getFilteredLoans().get(i).getAmount().toLong()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        \u003e\u003d loansManager.getFilteredLoans().get(i + 1).getAmount().toLong()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // sort by date, oldest first"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.sortLoans(LoanSorters.DATE_NEWEST);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.sortLoans(LoanSorters.DATE_NEWEST);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(IntStream.range(0, loansManager.getFilteredLoans().size() - 1).allMatch(i -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Date first \u003d loansManager.getFilteredLoans().get(i).getDate();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Date second \u003d loansManager.getFilteredLoans().get(i + 1).getDate();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return first.before(second) || first.equals(second);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // sort by persons\u0027 names in reverse alphabetical order"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.sortLoans(LoanSorters.PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.sortLoans(LoanSorters.PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(IntStream.range(0, loansManager.getFilteredLoans().size() - 1)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .allMatch(i -\u003e loansManager.getFilteredLoans().get(i).getPerson().getName().toString()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        .compareTo(loansManager.getFilteredLoans().get(i + 1).getPerson().getName().toString()) \u003e\u003d 0));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void getLoans_removeLoan_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e loansManager.getLoans().remove(0));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void getLoan_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e loansManager.getLoan(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void getLoan_indexBeyondListSize_throwsLoanNotFoundException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(LoanNotFoundException.class, () -\u003e loansManager.getLoan("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                Index.fromZeroBased(loansManager.getLoansCount())));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void addLoan_addAfterFilter_filteredLoansShowsAllLoan() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        int targetSize \u003d loansManager.getLoansCount();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.updateFilteredList(LoanFilters.getStatusPredicate(Status.PAID));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.addLoan(TypicalLoans.JOHN_OUT_UNPAID);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(targetSize + 1, loansManager.getFilteredLoans().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void editLoan_validIndexValidLoan_editedLoanReplacesTargetLoan() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Loan targetLoan \u003d loansManager.getLoan(targetIndex);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Loan editedLoan \u003d new LoanBuilder(targetLoan).withAmount(targetLoan.getAmount().toLong() + 1).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.editLoan(targetIndex, editedLoan);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(editedLoan, loansManager.getLoan(targetIndex));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void deleteLoan_validIndex_loanDeletedFromList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Loan targetLoan \u003d loansManager.getLoan(targetIndex);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.deleteLoan(targetIndex);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(loansManager.getLoans().stream().noneMatch(loan -\u003e loan.equals(targetLoan)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void setDebtors_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e loansManager.setDebtors(null));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void setDebtors_validList_debtorsSortedByNameInAlphabeticalOrder() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.setDebtors(TypicalDebtors.DEBTOR_LIST);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(IntStream.range(0, loansManager.getDebtors().size() - 1).allMatch(i -\u003e {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Name first \u003d loansManager.getDebtors().get(i).getDebtor().getName();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Name second \u003d loansManager.getDebtors().get(i + 1).getDebtor().getName();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return first.toString().compareToIgnoreCase(second.toString()) \u003c\u003d 0;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void getDebtors_addDebtorToList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e loansManager.getDebtors().add(TypicalDebtors.JOHN));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansManager loansManagerCopy \u003d new LoansManager(loansManager.getLoans());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManagerCopy.setDebtors(loansManager.getDebtors());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(loansManagerCopy, loansManager);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(loansManager, loansManager);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(null, loansManager);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(5, loansManager);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different loan list -\u003e returns false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager \u003d new LoansManager(TypicalLoans.LOAN_LIST);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansManager loansManagerDiffLoans \u003d new LoansManager();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManagerDiffLoans.setDebtors(loansManager.getDebtors());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(loansManagerDiffLoans, loansManager);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different debtors -\u003e returns false"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansManager.setDebtors(TypicalDebtors.DEBTOR_LIST);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansManager loansManagerDiffDebtors \u003d new LoansManager(loansManager.getLoans());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(loansManagerDiffDebtors, loansManager);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 225
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        userPrefs.setRuleFilePath(Paths.get(\"rule/file/path\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        userPrefs.setLoansFilePath(Paths.get(\"loans/file/path\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        userPrefs.setRuleFilePath(Paths.get(\"new/rule/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansManager loansManager \u003d new LoansManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleManager ruleManager \u003d new RuleManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountsManager accountsManager \u003d new AccountsManager();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptLibrary scriptLibrary \u003d new ScriptLibraryManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        modelManager \u003d new ModelManager(loansManager, ruleManager, accountsManager, scriptLibrary, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(loansManager, ruleManager, accountsManager,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                scriptLibrary, userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        differentUserPrefs.setRuleFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(loansManager, ruleManager, accountsManager,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                scriptLibrary, differentUserPrefs)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 10,
      "ChenJiehan318": 1,
      "kenneth-fung": 1,
      "thwnus": 4,
      "-": 69
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void setRuleFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setRuleFilePath(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void setLoansFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setLoansFilePath(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 9,
      "-": 18
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/loan/DebtorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.DebtorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.TypicalDebtors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class DebtorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // all fields null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Debtor(null, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // debtor field null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DebtorBuilder().withDebtor(null).build());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // creditors field null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DebtorBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            .withCreditors(null, null).build());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Debtor johnCopy \u003d new DebtorBuilder(TypicalDebtors.JOHN).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(TypicalDebtors.JOHN, johnCopy);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(TypicalDebtors.JOHN, TypicalDebtors.JOHN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(null, TypicalDebtors.JOHN);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(5, TypicalDebtors.JOHN);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different debtor -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Debtor editedJohn \u003d new DebtorBuilder(TypicalDebtors.JOHN).withDebtor(\"Mary\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(TypicalDebtors.JOHN, editedJohn);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different creditors -\u003e return false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        editedJohn \u003d new DebtorBuilder(TypicalDebtors.JOHN)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .withCreditors("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        TypicalDebtors.MARY.getCreditors().keySet().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                                .map(Person::toString)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                                .collect(Collectors.toList()),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        TypicalDebtors.MARY.getCreditors().values().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                                .map(Amount::toLong)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                                .collect(Collectors.toList()))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(TypicalDebtors.JOHN, editedJohn);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 62
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/loan/LoanFiltersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.model.loan.LoanFilters.getDirectionPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.TypicalLoans;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanFiltersTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void getDirectionPredicate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e getDirectionPredicate(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void getDirectionPredicate_invalidDirection_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e getDirectionPredicate(Direction.valueOf(\"\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void getDirectionPredicate_validDirection_returnsCorrectPredicate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // pass in Direction.IN -\u003e test against Loan with Direction.IN returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(getDirectionPredicate(Direction.IN).test(TypicalLoans.MARY_IN_UNPAID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // pass in Direction.OUT -\u003e test against Loan with Direction.OUT returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(getDirectionPredicate(Direction.OUT).test(TypicalLoans.JOHN_OUT_UNPAID));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 32
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/loan/LoanSortersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.TypicalLoans;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanSortersTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private List\u003cLoan\u003e loans;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loans \u003d new ArrayList\u003cLoan\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loans.add(TypicalLoans.JOHN_OUT_UNPAID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loans.add(TypicalLoans.PETER_OUT_PAID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void dateNewestSorter_sortList_loansSortedByNewestDateFirst() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loans.sort(LoanSorters.DATE_NEWEST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(IntStream.range(0, loans.size() - 1)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .allMatch(i -\u003e loans.get(i).getDate().after(loans.get(i + 1).getDate())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        || loans.get(i).getDate().equals(loans.get(i + 1).getDate())));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void personSorter_sortList_loansSortedInAlphabeticalOrder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loans.sort(LoanSorters.PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(IntStream.range(0, loans.size() - 1)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .allMatch(i -\u003e loans.get(i).getPerson().getName().toString()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        .compareTo(loans.get(i + 1).getPerson().getName().toString()) \u003c\u003d 0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void amountAscendingSorter_sortList_loansSortedBySmallestAmountFirst() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loans.sort(LoanSorters.AMOUNT_ASC);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(IntStream.range(0, loans.size() - 1)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .allMatch(i -\u003e loans.get(i).getAmount().toLong()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        \u003c\u003d loans.get(i + 1).getAmount().toLong()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 48
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/loan/LoanTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.TypicalLoans;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // all fields null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Loan("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                null, null, null, null, null, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // person field null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LoanBuilder().withPerson(null).build());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // amount field null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LoanBuilder().withAmount(null).build());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // direction field null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LoanBuilder().withDirection(null).build());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // description field null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LoanBuilder().withDescription(null).build());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // date field null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LoanBuilder().withDate(null).build());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // status field null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LoanBuilder().withStatus(null).build());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void isPaid() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assert !TypicalLoans.JOHN_OUT_UNPAID.isPaid();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assert TypicalLoans.PETER_OUT_PAID.isPaid();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Loan johnOutUnpaidCopy \u003d new LoanBuilder(TypicalLoans.JOHN_OUT_UNPAID).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(TypicalLoans.JOHN_OUT_UNPAID, johnOutUnpaidCopy);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(TypicalLoans.JOHN_OUT_UNPAID, TypicalLoans.JOHN_OUT_UNPAID);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(null, TypicalLoans.JOHN_OUT_UNPAID);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(5, TypicalLoans.JOHN_OUT_UNPAID);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different loan -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(TypicalLoans.JOHN_OUT_UNPAID, TypicalLoans.MARY_IN_UNPAID);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Loan editedJohnOutUnpaid \u003d new LoanBuilder(TypicalLoans.JOHN_OUT_UNPAID).withPerson(\"Dredd\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(TypicalLoans.JOHN_OUT_UNPAID, editedJohnOutUnpaid);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different direction -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        editedJohnOutUnpaid \u003d new LoanBuilder(TypicalLoans.JOHN_OUT_UNPAID).withDirection(\"IN\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(TypicalLoans.JOHN_OUT_UNPAID, editedJohnOutUnpaid);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        editedJohnOutUnpaid \u003d new LoanBuilder(TypicalLoans.JOHN_OUT_UNPAID)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .withAmount(TypicalLoans.JOHN_OUT_UNPAID.getAmount().toLong() + 1L).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(TypicalLoans.JOHN_OUT_UNPAID, editedJohnOutUnpaid);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        editedJohnOutUnpaid \u003d new LoanBuilder(TypicalLoans.JOHN_OUT_UNPAID)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .withDescription(\"Different description.\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(TypicalLoans.JOHN_OUT_UNPAID, editedJohnOutUnpaid);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        editedJohnOutUnpaid \u003d new LoanBuilder(TypicalLoans.JOHN_OUT_UNPAID).withDate(new Date(100000L)).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(TypicalLoans.JOHN_OUT_UNPAID, editedJohnOutUnpaid);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 87
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/loan/StatusTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class StatusTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(Status.contains(\"PAID\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(Status.contains(\"UNPAID\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertFalse(Status.contains(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertFalse(Status.contains(\"\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertFalse(Status.contains(\"GIBBERISH\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 18
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/loan/predicates/AmountMatchPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.TypicalLoans;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class AmountMatchPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AmountMatchPredicate(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void test_equalAmounts_returnsTrue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        AmountMatchPredicate amountMatchPredicate \u003d new AmountMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getAmount());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(amountMatchPredicate.test(TypicalLoans.JOHN_OUT_UNPAID)); // equal amounts -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void test_unequalAmounts_returnsFalse() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        AmountMatchPredicate amountMatchPredicate \u003d new AmountMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getAmount());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertFalse(amountMatchPredicate.test(TypicalLoans.MARY_IN_UNPAID)); // unequal amounts -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        AmountMatchPredicate amountMatchPredicate \u003d new AmountMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getAmount());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(amountMatchPredicate, new AmountMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getAmount()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(amountMatchPredicate, amountMatchPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(null, amountMatchPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(10, amountMatchPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(new AmountMatchPredicate(TypicalLoans.PETER_OUT_PAID.getAmount()), amountMatchPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 50
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/loan/predicates/DateMatchPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.TypicalLoans;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class DateMatchPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateMatchPredicate(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void test_equalDates_returnsTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        DateMatchPredicate dateMatchPredicate \u003d new DateMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getDate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(dateMatchPredicate.test(TypicalLoans.JOHN_OUT_UNPAID)); // equal dates -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void test_unequalDates_returnsFalse() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        DateMatchPredicate dateMatchPredicate \u003d new DateMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertFalse(dateMatchPredicate.test(TypicalLoans.MARY_IN_UNPAID)); // unequal dates -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        DateMatchPredicate dateMatchPredicate \u003d new DateMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getDate());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(dateMatchPredicate, new DateMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getDate()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(dateMatchPredicate, dateMatchPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(null, dateMatchPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(10, dateMatchPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(new DateMatchPredicate(TypicalLoans.PETER_OUT_PAID.getDate()), dateMatchPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 49
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/loan/predicates/DescriptionMatchPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.TypicalLoans;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class DescriptionMatchPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DescriptionMatchPredicate(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void test_equalDescriptions_returnsTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        DescriptionMatchPredicate descriptionMatchPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new DescriptionMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getDescription());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // equal description -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(descriptionMatchPredicate.test(TypicalLoans.JOHN_OUT_UNPAID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void test_unequalDescriptions_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        DescriptionMatchPredicate descriptionMatchPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new DescriptionMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // unequal description -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertFalse(descriptionMatchPredicate.test(TypicalLoans.MARY_IN_UNPAID));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        DescriptionMatchPredicate descriptionMatchPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new DescriptionMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getDescription());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(descriptionMatchPredicate,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new DescriptionMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getDescription()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(descriptionMatchPredicate, descriptionMatchPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(null, descriptionMatchPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(10, descriptionMatchPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(new DescriptionMatchPredicate(TypicalLoans.PETER_OUT_PAID.getDescription()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                descriptionMatchPredicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 56
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/loan/predicates/PersonMatchPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.testutil.TypicalLoans;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class PersonMatchPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PersonMatchPredicate(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void test_equalPersons_returnsTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        PersonMatchPredicate personMatchPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new PersonMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getPerson());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // equal person -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertTrue(personMatchPredicate.test(TypicalLoans.JOHN_OUT_UNPAID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void test_unequalPersons_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        PersonMatchPredicate personMatchPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new PersonMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getPerson());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertFalse(personMatchPredicate.test(TypicalLoans.MARY_IN_UNPAID)); // unequal person -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        PersonMatchPredicate personMatchPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new PersonMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getPerson());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(personMatchPredicate,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new PersonMatchPredicate(TypicalLoans.JOHN_OUT_UNPAID.getPerson()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertEquals(personMatchPredicate, personMatchPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(null, personMatchPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(10, personMatchPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assertNotEquals(new PersonMatchPredicate(TypicalLoans.PETER_OUT_PAID.getPerson()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                personMatchPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 55
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "kenneth-fung": 1,
      "-": 44
    }
  },
  {
    "path": "src/test/java/budgetbuddy/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.JsonAdaptedPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final String VALID_NAME \u003d TypicalPersons.BENSON.getName().toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertEquals(TypicalPersons.BENSON, person.toModelType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 7,
      "kenneth-fung": 3,
      "-": 22
    }
  },
  {
    "path": "src/test/java/budgetbuddy/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        userPrefs.setLoansFilePath(Paths.get(\"loans.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        userPrefs.setRuleFilePath(Paths.get(\"rules.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 7,
      "-": 117
    }
  },
  {
    "path": "src/test/java/budgetbuddy/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.storage.accounts.JsonAccountsStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.JsonLoansStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.rules.JsonRuleStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.storage.scripts.FlatfileScriptsStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        JsonLoansStorage loansStorage \u003d new JsonLoansStorage(getTempFilePath(\"loans\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        JsonAccountsStorage accountsStorage \u003d new JsonAccountsStorage(getTempFilePath(\"accounts\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        JsonRuleStorage ruleStorage \u003d new JsonRuleStorage(getTempFilePath(\"rules\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        FlatfileScriptsStorage scriptsStorage \u003d new FlatfileScriptsStorage(getTempFilePath(\"scripts\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        storageManager \u003d new StorageManager(accountsStorage, loansStorage, ruleStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                scriptsStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "ChenJiehan318": 4,
      "kenneth-fung": 2,
      "thwnus": 2,
      "-": 40
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/DebtorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Debtor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A utility class to help with building Debtor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class DebtorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String DEFAULT_DEBTOR \u003d \"John\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Person debtor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private HashMap\u003cPerson, Amount\u003e creditors;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public DebtorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.debtor \u003d new Person(new Name(DEFAULT_DEBTOR));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.creditors \u003d new HashMap\u003cPerson, Amount\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public DebtorBuilder(Debtor toCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.debtor \u003d toCopy.getDebtor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.creditors \u003d new HashMap\u003cPerson, Amount\u003e(toCopy.getCreditors());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Sets the {@code debtor} of the {@code Debtor} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public DebtorBuilder withDebtor(String person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.debtor \u003d new Person(new Name(person));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Sets the {@code creditors} of the {@code Debtor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public DebtorBuilder withCreditors(List\u003cString\u003e creditorsPersons, List\u003cLong\u003e creditorsAmounts) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assert creditorsPersons.size() \u003d\u003d creditorsAmounts.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        IntStream.range(0, creditorsPersons.size()).forEach(i -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.creditors.put("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    new Person(new Name(creditorsPersons.get(i))),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    new Amount(creditorsAmounts.get(i)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Debtor build() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Debtor(debtor, creditors);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 58
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/LoanBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A utility class to help with building Loan objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person DEFAULT_PERSON \u003d TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Direction DEFAULT_DIRECTION \u003d Direction.OUT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Amount DEFAULT_AMOUNT \u003d new Amount(100L);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Description DEFAULT_DESCRIPTION \u003d new Description(\"The description.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Date DEFAULT_DATE \u003d new Date();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Status DEFAULT_STATUS \u003d Status.UNPAID;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Direction direction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.person \u003d DEFAULT_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.direction \u003d DEFAULT_DIRECTION;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.amount \u003d DEFAULT_AMOUNT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.date \u003d DEFAULT_DATE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.status \u003d DEFAULT_STATUS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanBuilder(Loan toCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.person \u003d toCopy.getPerson();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.direction \u003d toCopy.getDirection();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.amount \u003d toCopy.getAmount();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.description \u003d toCopy.getDescription();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.date \u003d toCopy.getDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.status \u003d toCopy.getStatus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Sets the {@code Person} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanBuilder withPerson(String person) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.person \u003d new Person(new Name(person));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Sets the {@code Direction} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanBuilder withDirection(String direction) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.direction \u003d Direction.valueOf(direction);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Sets the {@code Amount} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanBuilder withAmount(Long amount) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Sets the {@code Description} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Sets the {@code Date} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanBuilder withDate(Date date) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Sets the {@code Status} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.status \u003d Status.valueOf(status);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Loan build() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Loan(person, direction, amount, date, description, status);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 102
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Kurtz\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Person(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 29
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/TypicalDebtors.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Debtor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A utility class containing a list of {@code Debtor} objects to be used in tests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class TypicalDebtors {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Debtor JOHN \u003d new DebtorBuilder().withDebtor(\"John\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            .withCreditors(List.of(\"Mary\", \"Peter\"), List.of(3000L, 50000L)).build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Debtor MARY \u003d new DebtorBuilder().withDebtor(\"Mary\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            .withCreditors(List.of(\"Peter\", \"Zed\", \"Gary\"), List.of(40000L, 930L, 7000L)).build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Debtor ZED \u003d new DebtorBuilder().withDebtor(\"Zed\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            .withCreditors(List.of(\"Gary\"), List.of(1L)).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final List\u003cDebtor\u003e DEBTOR_LIST \u003d List.of(JOHN, MARY, ZED);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private TypicalDebtors() {} // prevents instantiation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 22
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Index INDEX_THIRD_ITEM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/TypicalLoans.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A utility class containing a list of {@code Loan} objects to be used in tests."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class TypicalLoans {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Loan JOHN_OUT_UNPAID \u003d new LoanBuilder().withPerson(\"John\").withDirection(\"OUT\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            .withAmount(10000L).withDescription(\"For dinner.\").withDate(new Date(1)).withStatus(\"UNPAID\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Loan PETER_OUT_PAID \u003d new LoanBuilder().withPerson(\"Peter\").withDirection(\"OUT\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            .withAmount(4000L).withDescription(\"For lunch.\").withDate(new Date(2)).withStatus(\"PAID\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Loan MARY_IN_UNPAID \u003d new LoanBuilder().withPerson(\"Mary\").withDirection(\"IN\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            .withAmount(420L).withDescription(\"For supper.\").withDate(new Date(3)).withStatus(\"UNPAID\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Loan ZED_OUT_PAID \u003d new LoanBuilder().withPerson(\"Zed\").withDirection(\"IN\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            .withAmount(66666L).withDescription(\"For the midnight snack.\").withDate(new Date(4)).withStatus(\"PAID\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final List\u003cLoan\u003e LOAN_LIST \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            List.of(JOHN_OUT_UNPAID, MARY_IN_UNPAID, PETER_OUT_PAID, ZED_OUT_PAID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private TypicalLoans() {} // prevents instantiation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 30
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "kenneth-fung": 11,
      "-": 16
    }
  },
  {
    "path": "src/test/java/budgetbuddy/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/budgetbuddy/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import budgetbuddy.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import budgetbuddy.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003cfx:root type\u003d\"TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 5
    }
  }
]
