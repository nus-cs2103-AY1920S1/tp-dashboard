[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d Budget Buddy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W13-4/main[image:https://travis-ci.org/AY1920S1-CS2103T-W13-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Budget Buddy is a desktop expense manager, capable of tracking your expenses, income and loans."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* It aims to be the number one application of choice for **computing students** at the **National University of Singapore**."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* User interaction occurs chiefly through a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* The original source of the code is the AddressBook-Level3 project created by https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "thwnus": 2,
      "kenneth-fung": 3,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "mainClassName \u003d \u0027budgetbuddy.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    archiveName \u003d \u0027budgetbuddy.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        \u0027site-name\u0027: \u0027Budget Buddy\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-W13-4/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 1,
      "thwnus": 3,
      "-": 150
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Budget Buddy was developed by the https://github.com/AY1920S1-CS2103T-W13-4[W13-4] team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Tee Hao Wei"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::thwnus.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "{empty}[https://github.com/thwnus[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Responsibilities: Script Evaluator, Transaction Reports"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Daryl Koh Yi Kai"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::cambrian-dk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "{empty}[http://github.com/cambrian-dk[github]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Responsibilities: Transactions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Chong Guang Jun"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::tcgj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "{empty}[http://github.com/tcgj[github]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Responsibilities: Categories, Accounts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Chen Jiehan"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::ChenJiehan318.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "{empty}[http://github.com/ChenJiehan318[github]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Role: UI +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Responsibilities: Budgets, Goals"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Kenneth Fung Chen Yu"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::kenneth-fung.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "{empty}[http://github.com/kenneth-fung[github]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Responsibilities: Loans"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 26,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-W13-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* *Email us* : You can also reach us at `ay1920s1-cs2103t-w13-4@protonmail.com`"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 1,
      "thwnus": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d Budget Buddy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "By: `CS2103T W13-4`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "// tag::loans[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Loans Feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The Loans feature exists outside of the Account/Transaction mechanisms."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "It adds a separate `LoansManager` alongside the main `AccountsManager`, with `Loan` objects stored internally in an `internalList`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The following class diagram demonstrates the association between the `LoansManager` and `Loan` objects"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "(miscellaneous methods such as getters and setters are omitted):"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::LoanClassDiagram.png[]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Each `Loan` object has the following attributes:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `person:Person` -- The person to whom the loan belongs."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `amount:Amount` -- The amount of money loaned."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `direction:Direction` -- The direction of the loan (either *in* or *out*)."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `status:Status` -- The status of the loan (either *paid* or *unpaid*)."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `date:Date` -- The date of the loan."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `description:Description` (optional) -- A description of the loan."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "To facilitate the manipulation of `Loan` objects, `LoansManager` implements the following operations."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `LoansManager#getLoans()` -- Gets the current list of loans."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `LoansManager#addLoan(Index toAdd)` -- Adds the `Loan toAdd` to `internalList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `LoansManager#editLoan(Index toEdit, Loan editedLoan)` -- Edits the loan at `Index toEdit` to match `Loan editedLoan`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `LoansManager#updateLoanStatus(Index toUpdate, Status newStatus)` -- Updates the `Status` of the loan at `Index toUpdate` to `newStatus`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `LoansManager#deleteLoan(Index toDelete)` -- Deletes the loan at `Index toDelete` from `internalList`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "After each of the above operations, the state of `internalList` is saved in the file `loans.json`, which is stored on the local hard disk."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Given below is an example usage scenario and how the `LoansManager` behaves at each step."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "If `loans.json` exists on the hard disk, its data is loaded into `internalList`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Otherwise, `loans.json` is created and the `LoansManager` initializes with an empty `internalList`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 2. The user executes the command `loan out p/John x/4.20` to add a new loan."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "This creates a new loan `toAdd` of `amount` 4.20 `out` to the `person` John, with the current `date` being used as the user did not provide one."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`LoansManager#addLoan(Loan toAdd)` is then called and `toAdd` is added to `internalList`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The following sequence diagram illustrates how the process of adding a loan works:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "image::LoanSequenceDiagram.png[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "In general, the rest of the operations work using a similar sequence of steps."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Some commands might create a new `Loan` object (as shown above) while others might simply use the `Index` of a loan."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 3. The user executes the command `loan list` to see their current list of loans."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`LoansManager#getLoans()` is called."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "An immutable version of `internalList` sorted by `person` is retrieved and displayed to the user."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 4. The user executes the command `loan edit 1 x/500` to edit the `amount` of the first loan in the list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "This creates a new `editedLoan` identical to the first loan in `internalList`, except that `editedLoan` has an `amount` of 500."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`LoansManager#editLoan(Index toEdit, Loan editedLoan)` is then called,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "where `toEdit` is the index of the first loan in `internalList`,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "and `toEdit` is replaced with `editedLoan`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 5. The user executes the command `loan paid 1` to update the status of the first loan in the list to *paid*."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`LoansManager#updateLoanStatus(Index toUpdate, Status newStatus)` is called"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "(where `toUpdate` is the index of the first loan in `internalList` and `newStatus` has the value `Status.PAID`)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "and the loan at index `toUpdate` in `internalList` has its `status` updated to `newStatus`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The command `loan unpaid` works identically to `loan paid`, except that `newStatus` has the value `Status.UNPAID`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Step 6. The user executes the command `loan delete 1` to delete the first loan in the list."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "`LoansManager#deleteLoan(Index toDelete)` is called,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "where `toDelete` is the index of the first loan in `internalList`,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "and the loan at index `toDelete` is removed from `internalList`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "For the commands `loan paid`, `loan unpaid` and `loan delete`,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "if the user targets a loan outside of the list (e.g. index greater than list size)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "an error message will be displayed."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Multi-Loan Targeting"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The user can target and act on multiple loans with a single command."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "For example, `loan delete 1 3 4` can be used to delete the first, third and fourth loans in `internalList`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Alternatively or additionally, `loan delete p/John Mary` can also be used"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "to delete all the loans of the persons John and Mary in `internalList`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The `LoansManager` handles this by executing the appropriate operation repeatedly."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "In the case of `loan delete 1 3 4`, `LoansManager#deleteLoan(Index toDelete)` is called once for each of the three loans."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "If any of the targeted loan indices cannot be found by the `LoansManager` in `internalList`, they are added to a `missingLoanIndices` list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "The `missingLoanIndices` list is then displayed to the user after all other loans have been acted upon,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "notifying them that the loans with those indices could not be found."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Multi-loan targeting is implemented for the commands `loan paid`, `loan unpaid` and `loan delete`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Structure of the loan - person interaction"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* **Alternative 1 (current choice)**: `LoansManager` stores `internalList`; each `Loan` references a `Person`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** Pros: Easy to implement and understand."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** Cons: Takes a longer time to get all the loans belonging to a person."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* **Alternative 2**: `LoansManager` stores `persons` list; each `Person` stores `LoanList`; each `Loan` references `Person`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** Pros: Easy to retrieve the person of each loan and retrieve all the loans belonging to a person."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** Cons: Circular dependency and high coupling, potentially leading to lower testability and a higher bug count."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "// end::loans[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "thwnus"
        },
        "content": "// tag::scripts[]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d Scripting"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "thwnus"
        },
        "content": "The scripting engine works independently of the rest of the application."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "thwnus"
        },
        "content": "At its core, it uses the Nashorn ECMAScript 5.1 engine bundled with Java 11 to"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "thwnus"
        },
        "content": "evaluate scripts."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "thwnus"
        },
        "content": "A set of convenience functions are provided to make basic tasks, such as manipulating"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "thwnus"
        },
        "content": "transactions and accounts, easier. The full model and UI are nevertheless exposed to"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "thwnus"
        },
        "content": "scripts, and scripts are able to access any classes provided in the Java 11 standard"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "thwnus"
        },
        "content": "library, as well as any dependencies included in the application."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "thwnus"
        },
        "content": "There is a simple mechanism to store scripts to be run in future. This works together"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "thwnus"
        },
        "content": "with rules to give the ability to have complex predicates and actions outside of"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "thwnus"
        },
        "content": "those supported inherently by the program. This also works with aliases to allow,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "thwnus"
        },
        "content": "in effect, custom commands to be created."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "thwnus"
        },
        "content": "The following class diagram illustrates the design of the scripting engine and model."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "thwnus"
        },
        "content": "_TODO: Class diagram_"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "thwnus"
        },
        "content": "_TODO_"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* has a need to manage expenses and income over a significant period of time"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* capable of basic programming to customize the app to their liking"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*Value proposition*: manage expenses/income faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |user |see an overview of all my spending from month to month |better judge my expense/income ratio"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |spendthrift |set a budget for my monthly spending |avoid breaking the bank again"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |lazy user |key in recurring expenses just once |do not have to enter them over and over again"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |careful spender |make month-to-month comparisons of spending in a particular category |see where additional expenses for certain months come from"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |cautious spender |carry over any budget deficits incurred each month to the following month |remember to repay it"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |user who borrows and loans money frequently |track who owes me money/who I owe money to |settle my debts"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "thwnus"
        },
        "content": "|`* * *` |SoC student who has to pay school fees regularly |track how much I’ll have to pay and when I have to pay it by |avoid making late payments"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "thwnus"
        },
        "content": "|`* * *` |SoC student experienced in writing programs |write my own scripts to manipulate entries in the app |automate and customize the app to my liking"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* * *` |ambitious user |set goals for my cumulative income |work towards my dream home/car/goal"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |careless user |undo a mistake |not worry even if I accidentally make an error"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |careful spender |dedicate different accounts to different holidays |control how much I spend while on the holidays"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |careful spender |set different currencies for different accounts |see my expenditure during a holiday in the local currency"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |lazy person |import expenses from csv exports from internet banking |transfer my records across software"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |supremely lazy user |have the program detect recurring transactions and suggest them to me |not waste time adding them manually"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |paranoid user |have the program show me all possible commands and how to use them |know exactly what I am doing"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |user who prefers visuals |see a chart of my budget spending across past months |see how much I have been overspending/underspending"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |busy user |move and delete multiple transactions at the same time |be more efficient"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |lazy user |have the program autofill my command as I am typing it |enter my transactions more quickly"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |user who cannot control spending |set a budget for different purposes |control my spending"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |lazy user |have the app to have predictive commands based on what transactions I commonly include |spend less time typing in my expenses"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |fast typer |type out multiple commands all at once |type the next command without having to pause"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |person who occasionally goes overseas |assign an exchange rate to each foreign currency transaction |get reports on my total expenditure in my home currency"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |busy user |see my overall budget surplus/deficit at a glance |know straight away when I’m below or above my budget for that month"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |meticulous user |see how much I need to budget every month to reach a savings goal based on what the goal is and its deadline |plan my budget well"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`* *` |busy user |keep track of my spending in different account books |segregate completely unrelated spending"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`*` |unmotivated person |be rewarded for entering my expenses/income daily |be motivated to do so and eventually turn it into a habit"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`*` |expense planner |record down possible future expenses |keep track of what I planned to spend on"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|`*` |forgetful user |have the app set reminders |keep track of my spending everyday"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "(For all use cases below, the *System* is `Budget Buddy` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Use case: Delete transaction"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "1.  User requests to list transactions."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "2.  Budget Buddy shows a list of transactions for the current account."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "3.  User requests to delete a specific transaction in the list."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "4.  Budget Buddy deletes the transaction."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 3a1. Budget Buddy shows an error message."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Use case: Add loan"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "1.  User requests to add a \u003c\u003cloan-out, loan out\u003e\u003e for a person."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "2.  Budget Buddy adds the loan for the given person."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 1a. The given loan out value is negative."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 1a1. Budget Buddy shows an error message."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 2a. The given person does not exist in the loan list."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 2a1. Budget Buddy adds the given person to the loan list with a loan entry."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Use case: Edit loan"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "1.  User requests to list loans."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "2.  Budget Buddy shows a list of loans."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "3.  User requests to edit the description of a loan in the list."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "4.  Budget Buddy edits the description of the specified loan."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 2a. The given loan index is invalid."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 2a1. Budget Buddy shows an error message."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Use case: Add account"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "1. User requests to add a new account."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "2. Budget Buddy creates the new account."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 1a. No account name was provided."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 1a1. Budget Buddy shows an error message."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Use case: Rename categories"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "1. User requests to list all categories."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "2. Budget Buddy shows all created categories."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "3. User requests to rename a category."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "4. Budget Buddy renames the category and displays the list of categories."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 3a. The index of the category does not exist."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 3a1. Budget buddy shows an error message."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* 3b. The new name of the category is invalid."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "** 3b1. Budget Buddy shows an error message."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "+"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ".  Should be able to hold up to 1000000 transactions without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[[loan-out]] Loan Out::"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "A loan where the user owes another person money."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "[[loan-in]] Loan In::"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "A loan where another person owes the user money."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 268,
      "thwnus": 28,
      "-": 400
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d Budget Buddy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "By: `CS2103T W13-4`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Budget Buddy is for computing students who prefer to use a desktop app to manage their expenses."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "More importantly, Budget Buddy is *optimized for those who prefer to work with a Command Line Interface* (CLI)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "If you can type fast, Budget Buddy can get your expense management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Furthermore, Budget Buddy allows computing students to add their own functions through customized JavaScript files,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "as well as a set of rules to simplify expense tracking through automation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Nothing to see here."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Words within `\u003c\u003e` brackets are parameters to be supplied by the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Parameters within `[]` brackets are optional and can be omitted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `|` indicates that a choice must be made between two parameters."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* `...` indicates a variable number (at least 1) of the specified parameter."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Displays help. If `command` is specified, view detailed help for that command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `help [\u003ccommand\u003e]`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Managing defaults: `default`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Set default account: `default account`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Sets the default account."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `default account \u003cid\u003e`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Managing the main transaction view: `view`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003d\u003d\u003d\u003d Filter transactions: `view filter`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Filters the main transaction view. If no arguments are provided, all transactions are shown."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Otherwise, only transactions meeting all the criteria are shown."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Format: `view filter [a/\u003caccount\u003e] [c/\u003ccategory\u003e] [f/\u003cfrom date\u003e] [t/\u003cto date\u003e]`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003d\u003d\u003d\u003d Sort transactions: `view sort`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Sorts transactions by (a)ccount, (c)ategory, (d)ate or (x)amount."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Specify `o/a` to sort in ascending order, or `o/d` to sort in descending order."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "If omitted, sort in ascending order."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Format: `view sort s/\u003ca|c|d|x\u003e [o/\u003ca|d\u003e]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003d\u003d\u003d Managing transactions: `transaction`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003d\u003d\u003d\u003d Add a transaction: `transaction out|in`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Adds a new transaction of the specified amount and with the given description."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Format: `transaction out|in x/\u003camount\u003e d/\u003cdescription\u003e [a/\u003caccount\u003e] [c/\u003ccategory\u003e] [w/\u003cdate\u003e] [r/\u003cd|w|m|y\u003e]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "* If the account is not given, the transaction is inserted into the default account."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "* If the category is not given, the transaction is not categorised."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "* If the date is not given, the date is set to the current date."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "* If the argument ‘r’ is added, the transition is marked as recurring;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "identical entries will be added either daily, weekly, monthly, or yearly."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a transaction: `transaction edit`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Edits the specified transaction, setting the specified fields."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "If the ‘recurring’ field is modified, the app will ask if all previous recurring entries should be deleted."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Format: `transaction edit \u003cid\u003e out|in [x/\u003camount\u003e] [d/\u003cdescription\u003e] [a/\u003caccount\u003e] [c/\u003ccategory\u003e] [w/\u003cdate\u003e] [r/\u003cd|w|m|y\u003e]`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "\u003d\u003d\u003d\u003d Delete transaction(s): `transaction delete`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Deletes the transactions with the specified IDs."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "Format: `transaction delete \u003cid ...\u003e`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Managing accounts: `account`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Add an account: `account add`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Creates a new account with the given name. If the currency symbol is not specified, “$” is used."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `account add n/\u003cname\u003e [c/\u003ccurrency symbol\u003e]`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d List accounts: `account list`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Lists all accounts."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Edit an account: `account edit`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Edits the specified account, setting the specified fields."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `account edit \u003cid\u003e [n/\u003cname\u003e] [c/\u003ccurrency symbol\u003e]`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Delete account(s): `account delete`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Deletes the accounts with the specified IDs, as in `account list`."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Note: you cannot delete an account if there are transactions associated with the account."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `account delete \u003cid ...\u003e`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Managing categories: `category`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Add a category"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Categories do not need to be added; you can simply use the category name and a new category will be created if no such one exists."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d List categories: `category list`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Lists all categories."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Rename a category: `category rename`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Renames the specified category."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Note that this is the same as setting the category of all transactions of category `old name` to `new name`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `category rename o/\u003cold name\u003e n/\u003cnew name\u003e`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a category: `category delete`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Deletes the specified category."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Note that this is the same as un-categorising all transactions under the specified category."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `category delete n/\u003cname\u003e`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d Viewing reports: `report`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Displays a report."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `report [[f/\u003cfrom date\u003e] [t/\u003cto date\u003e] | [p/\u003cthis month|last month|this week|last week|today|yesterday\u003e]] [total|category]`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* You can specify either the start and end date range, inclusive, or name a period."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thwnus"
        },
        "content": "If no period is specified, it defaults to the current month-to-date."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* You can see a total report that shows your total income and expenditure and budget information,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thwnus"
        },
        "content": "if a budget has been set up,  or a report that breaks your income and expenditure down into categories."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thwnus"
        },
        "content": "If the type is omitted, it defaults to a total report."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* Your goal progress will also be shown in both reports."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d\u003d Managing budgets: `budget`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Displays or sets the budget for the specified period."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "If the period is omitted, it defaults to the entire current month."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Format: `budget [[f/\u003cfrom date\u003e] [t/\u003cto date\u003e] | [p/\u003cthis month|last month|this week|last week|today|yesterday\u003e]] [\u003camount\u003e|unset]`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d View budgets"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "To view budgets, omit `[\u003camount\u003e|unset]` from the command."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "All budgets overlapping the period specified will be displayed."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Set budgets"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "To set a budget, specify the `[\u003camount\u003e]`. Note that budgets cannot overlap."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Remove budgets"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "To unset a budget, specify `[unset]`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d\u003d Goal setting: `goal`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Add a goal: `goal add`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Adds a goal on the specified account to reach the specified amount by the target date or at the end of the specified period."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Format: `goal add [a/\u003caccount\u003e] [[d/\u003ctarget date\u003e] | [p/\u003cthis week|this month|next month|this year\u003e]] x/[+]\u003camount\u003e`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* If the account is omitted, the default account is set."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* If the period is omitted, the target date is set to the last day of the current month."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "* If + is specified before amount, then the target amount is set as amount more than the current balance in the target account."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d\u003d\u003d View goals: `goal list`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "List all goals."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "\u003d\u003d\u003d\u003d Delete goal(s): `goal delete`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Deletes the goals with the specified goal IDs. Goal IDs can be retrieved from `goal list`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "Format: `goal delete \u003cid ...\u003e`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d Tracking loans: `loan`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Add a new loan: `loan out|in`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Adds a new loan out/in entry."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Each loan has a unique ID (across both out and in entries)."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "If date is not given, it is set to the current date."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan out|in p/\u003cperson\u0027s name\u003e x/\u003camount\u003e [w/\u003cdate\u003e] [d/\u003cdescription\u003e]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d List loans: `loan list`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Displays a list of all loans, sorted alphabetically by person first, then by newest for each person\u0027s loans."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan list [p/\u003cperson ...\u003e] [o|i] [s/\u003ca|p\u003e]`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "****"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Adding a person\u0027s name filters the list to that/those person(s)\u0027s loans only."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Adding ‘o’ argument filters list to out loans only."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Adding ‘i’ argument filters list to in loans only."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "* Add `s/a` to sort the list by amount, or `s/p` to sort by person."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "****"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Edit loan: `loan edit`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Edits the specified field of the loan entry with the specified ID."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan edit \u003cloan ID\u003e [\u003cp/person\u003e] [x/\u003camount\u003e] [d/\u003cdescription\u003e] [w/\u003cdate\u003e]`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Mark loan(s) as paid: `loan paid`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Marks the specified loan(s) as paid."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "If a person\u0027s name is specified, all their loans are marked as paid."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan paid \u003cloan ID ...\u003e [\u003cp/person ...\u003e]`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Mark loan(s) as unpaid: `loan unpaid`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Marks the specified loan(s) as unpaid."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "If a person\u0027s name is specified, all their loans are marked as unpaid."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan unpaid \u003cloan ID ...\u003e \u003cp/person ...\u003e`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Delete loan(s): `loan delete`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Deletes the loan(s) with the specified loan ID(s)."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "If a person\u0027s name is specified, all of that person\u0027s loans are deleted."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan delete \u003cloan ID ...\u003e \u003cp/person ...\u003e`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d\u003d\u003d Calculate loans: `loan split`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Splits and calculates a group payment, then prints a list of who owes who."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "Format: `loan split n/\u003cname\u003e a/\u003camount paid\u003e ...`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d Automating with rules: `rule`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Add a new rule: `rule add`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Adds a new rule to the rule engine."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tcgj"
        },
        "content": "A rule can be formed with both scripts and expressions."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `rule add pred/\u003cexpression | script\u003e act/\u003cexpression | script\u003e`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tcgj"
        },
        "content": "****"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* Expression Format:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Predicate: \u003cattribute\u003e \u003cpredicate operator\u003e \u003cvalue\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Action: \u003caction operator\u003e \u003cvalue\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tcgj"
        },
        "content": "* Script:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tcgj"
        },
        "content": "** Specify name of script."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tcgj"
        },
        "content": "****"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d List rules: `rule list`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Displays a list of all rules, sorted by the date a rule was added."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `rule list`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a rule: `rule edit`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Edits the specified fields in the rule with the specified ID."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Both predicate and action can be modified."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `rule edit \u003crule ID\u003e [pred/\u003cexpression | script\u003e] [act/\u003cexpression | script\u003e]`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a rule: `rule delete`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Deletes a rule with the specified rule ID."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Format: `rule delete \u003crule ID\u003e`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d Import and export: `import, export`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Import a file: `import`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Imports transactions from the file at the given path."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `import [f/\u003cformat\u003e] [p/\u003cfile path\u003e]`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* The file path can be relative to where you launched Budget Buddy from, or absolute."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "thwnus"
        },
        "content": "If the path is omitted, a file browser is opened for you to select the file."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* Format is one of dbs (DBS Bank/POSB), ocbc (OCBC Bank), sc (Standard Chartered), csv (generic comma-separated values file)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "thwnus"
        },
        "content": "If the format is omitted, automatic detection is attempted."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Export transactions: `export`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Exports all transactions to the given path."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `export [p/\u003cfile path\u003e]`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* The file path can be relative to where you launched Budget Buddy from, or absolute."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "thwnus"
        },
        "content": "If the path is omitted, a file browser is opened for you to select where to save the file."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* The file is a comma-separated values file."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d Scripting: `script`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Evaluate a script: `script eval`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Evaluates a script and displays the result."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `script eval \u003cscript\u003e`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* The scripting language is JavaScript (specifically, ECMAScript 5.1)."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Add a stored script: `script add`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Stores a script for future invocation."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `script add \u003cscript name\u003e [p/\u003cfile path\u003e | s/\u003cscript\u003e]`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* The script name may contain only alphanumeric characters, underscores, and dashes."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* If neither a file path nor the script code is given, a file browser is opened for you to"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "thwnus"
        },
        "content": "select the script file."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "thwnus"
        },
        "content": "WARNING: The script is not checked for correctness before it is stored. Any syntax errors"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "thwnus"
        },
        "content": "will be reported only when the script is run."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "thwnus"
        },
        "content": "\u003d\u003d\u003d\u003d Run a stored script: `script run`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Runs a previously-stored script."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "thwnus"
        },
        "content": "Format: `script run \u003cscript name\u003e [\u003cargument\u003e]`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "thwnus"
        },
        "content": "* The argument is the rest of the command line after the script name, and is passed to the script as a single string."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "thwnus"
        },
        "content": "****"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003d\u003d Command Summary"
      }
    ],
    "authorContributionMap": {
      "tcgj": 86,
      "ChenJiehan318": 29,
      "cambrian-dk": 32,
      "kenneth-fung": 70,
      "thwnus": 74,
      "-": 72
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"account delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"account delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteAccount(a)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAccounts(accountManager)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tcgj": 4,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "if () then ([command commits BudgetBuddy])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    :Save BudgetBuddy to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    budgetBuddyStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "participant \":CommandLineParser\" as CommandLineParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "participant \":AccountDeleteCommandParser\" as AccountDeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "participant \"d:AccountDeleteCommand\" as AccountDeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "[-\u003e LogicManager : execute(\"account delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager -\u003e CommandLineParser : parseCommand(\"account delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate CommandLineParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "create AccountDeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandLineParser -\u003e AccountDeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate AccountDeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommandParser --\u003e CommandLineParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate AccountDeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandLineParser -\u003e AccountDeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate AccountDeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "create AccountDeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommandParser -\u003e AccountDeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate AccountDeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommand --\u003e AccountDeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate AccountDeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommandParser --\u003e CommandLineParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate AccountDeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommandParser -[hidden]-\u003e CommandLineParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "destroy AccountDeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandLineParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate CommandLineParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager -\u003e AccountDeleteCommand : execute(model)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate AccountDeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommand -\u003e Model : deleteAccount(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Model --\u003e AccountDeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandResult --\u003e AccountDeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "AccountDeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate AccountDeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tcgj": 32,
      "-": 37
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package Script {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class ScriptManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package CommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Interface CommandParser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class CommandLineParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class CommandParserUtil"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package Rule {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Interface Testable \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Interface Actionable \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class \"{abstract}\\nTestableExpression\" as TestableExpression"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class \"{abstract}\\nActionableExpression\" as ActionableExpression"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class TUVExpression"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class ABCExpression"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "HiddenOutside ...\u003e Logic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager ---\u003e\"1\" CommandLineParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandLineParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "XYZCommandParser ..|\u003e CommandParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "XYZCommandParser ..\u003e CommandParserUtil"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "TestableExpression .right.|\u003e Testable"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "ActionableExpression .right.|\u003e Actionable"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "TUVExpression -right-|\u003e TestableExpression"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "ABCExpression -right-|\u003e ActionableExpression"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager .left.\u003e Testable : tests \u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager .left.\u003e Actionable : performs \u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "ActionableExpression -[hidden]-\u003e TestableExpression"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager -up--\u003e ScriptManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Command .up.\u003e ScriptManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager -left-\u003e Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Command .left.\u003e Model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AccountAddCommand, etc"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandResult -[hidden]-\u003e CommandParser"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tcgj": 38,
      "-": 48
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package Card {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class DEFCard"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package Panel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class \"{abstract}\\nListPanel\" as ListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Class DEFPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "MainWindow *-down-\u003e ListPanel"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "DEFPanel .up.|\u003e ListPanel"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "DEFPanel -down-\u003e DEFCard"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "ListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "DEFCard --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "DEFCard ..\u003e Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "ListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "note right of DEFPanel: DEFPanel \u003d RulePanel,\\n AccountPanel, etc"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "note right of DEFCard: DEFCard \u003d RuleCard,\\n AccountCard, etc"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tcgj": 20,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State1 as \"__ab0:BudgetBuddy__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State2 as \"__ab1:BudgetBuddy__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State3 as \"__ab2:BudgetBuddy__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State1 as \"__ab0:BudgetBuddy__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State2 as \"__ab1:BudgetBuddy__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State3 as \"__ab2:BudgetBuddy__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"add n/David\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State1 as \"__ab0:BudgetBuddy__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State2 as \"__ab1:BudgetBuddy__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State3 as \"__ab2:BudgetBuddy__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State1 as \"__ab0:BudgetBuddy__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State2 as \"__ab1:BudgetBuddy__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State3 as \"__ab2:BudgetBuddy__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State1 as \"__ab0:BudgetBuddy__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State2 as \"__ab1:BudgetBuddy__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State3 as \"__ab2:BudgetBuddy__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State1 as \"__ab0:BudgetBuddy__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State2 as \"__ab1:BudgetBuddy__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class State3 as \"__ab3:BudgetBuddy__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "note right on link: State ab2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "participant \":CommandLineParser\" as CommandLineParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "participant \":VersionedBudgetBuddy\" as VersionedBudgetBuddy MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "[-\u003e LogicManager : execute(\"undo\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "LogicManager -\u003e CommandLineParser : parseCommand(\"undo\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate CommandLineParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandLineParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "UndoCommand --\u003e CommandLineParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "CommandLineParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate CommandLineParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "UndoCommand -\u003e Model : undoBudgetBuddy()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "Model -\u003e VersionedBudgetBuddy : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "activate VersionedBudgetBuddy"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "VersionedBudgetBuddy -\u003e VersionedBudgetBuddy :resetData(BudgetBuddy)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "VersionedBudgetBuddy --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "deactivate VersionedBudgetBuddy"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tcgj": 15,
      "-": 38
    }
  },
  {
    "path": "src/main/java/budgetbuddy/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/budgetbuddy/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/budgetbuddy/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.AccountsManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.RuleManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.StorageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.JsonLoansStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.LoansStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.UiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansStorage loansStorage \u003d new JsonLoansStorage(userPrefs.getLoansFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        storage \u003d new StorageManager(loansStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        AccountsManager accountsManager \u003d new AccountsManager();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansManager loansManager \u003d initLoansManager(storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        RuleManager ruleManager \u003d new RuleManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ModelManager(loansManager, ruleManager, accountsManager, userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Loads and returns a Loans Manager from storage."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns an empty Loans Manager if no file found or if exception occurs during loading."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private LoansManager initLoansManager(Storage storage) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cLoansManager\u003e loansManagerOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loansManagerOptional \u003d storage.readLoans();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (loansManagerOptional.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                logger.info(\"Loans file not found. Will be starting with an empty LoansManager.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return loansManagerOptional.orElseGet(LoansManager::new);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            logger.warning(\"Loans file not in the correct format. Will be starting with an empty LoansManager.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return new LoansManager();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            logger.warning(\"Problem while reading from loans file. Will be starting with an empty LoansManager.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return new LoansManager();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Budget Buddy\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        logger.info(\"Starting Budget Buddy \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Budget Buddy ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 25,
      "ChenJiehan318": 1,
      "kenneth-fung": 21,
      "thwnus": 2,
      "-": 144
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_INVALID_ACCOUNT_DISPLAYED_INDEX \u003d \"The account index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \"The transaction index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_TRANSACTIONS_LISTED_OVERVIEW \u003d \"%1$d transactions listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_ACCOUNTS_LISTED_OVERVIEW \u003d \"%1$d accounts listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "ChenJiehan318": 2,
      "cambrian-dk": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return zeroBasedIndex + \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * A comparator to sort indices in descending order."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static class SortDescending implements Comparator\u003cIndex\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public int compare(Index first, Index second) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return first.getZeroBased() - second.getZeroBased();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "kenneth-fung": 16,
      "-": 54
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns a {@code SimpleDateFormat} for use in displaying/parsing dates."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * The primary purpose of this method is to standardise date display across the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static SimpleDateFormat getDateFormat() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"d/M/yy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        format.setLenient(false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return format;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 12,
      "-": 37
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns true if {@code items} contain any duplicates."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author kenneth-fung-reused"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    //Reused from https://stackoverflow.com/a/600319 with minor modifications"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static \u003cT\u003e boolean hasDuplicates(Collection\u003cT\u003e items) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Set\u003cT\u003e hashSet \u003d new HashSet\u003cT\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (T item : items) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (!hashSet.add(item)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "kenneth-fung": 16,
      "-": 36
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/budgetbuddy/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        AppUtil.checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        AppUtil.checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns true if {@code s} represents a non-negative unsigned long"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * e.g. 1, 2.2, 3, ..., {@code Long.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static boolean isNonNegativeUnsignedLong(String s) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            long value \u003d Long.parseLong(s);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return value \u003e\u003d 0 \u0026\u0026 !s.startsWith(\"+\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "kenneth-fung": 17,
      "-": 64
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns an unmodifiable view of the list of loans."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    SortedList\u003cLoan\u003e getSortedLoanList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /** Returns an unmodifiable view of the list of rules */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    ObservableList\u003cRule\u003e getRuleList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 8,
      "kenneth-fung": 4,
      "-": 31
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandLineParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.script.ScriptManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final CommandLineParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final ScriptManager scriptManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        addressBookParser \u003d new CommandLineParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        scriptManager \u003d new ScriptManager(engine -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            // TODO: This will be pulled out into a separate class in a future PR"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            // TODO: Currently, this just brings it to feature-parity"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            engine.setVariable(\"ab\", model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        commandResult \u003d command.execute(model, scriptManager);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            storage.saveLoans(model.getLoansManager());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public SortedList\u003cLoan\u003e getSortedLoanList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return model.getLoansManager().getSortedLoans();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ObservableList\u003cRule\u003e getRuleList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return model.getRuleManager().getRuleList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 16,
      "thwnus": 10,
      "kenneth-fung": 10,
      "-": 45
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.script.ScriptManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param model {@link Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    protected abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param model {@link Model} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param scriptManager {@link ScriptManager} which the command should use to evaluate any scripts."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public CommandResult execute(Model model, ScriptManager scriptManager) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return execute(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "thwnus": 14,
      "-": 15
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/CommandCategory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents the category that a command belongs to."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public enum CommandCategory {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    RULE, ACCOUNT, TRANSACTION, LOAN, SCRIPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 8
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final CommandCategory commandCategory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public CommandResult(String feedbackToUser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                         CommandCategory commandCategory, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // todo: add requireNonNull on commandCategory after every command has set their category"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.commandCategory \u003d commandCategory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and {@code commandCategory},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public CommandResult(String feedbackToUser, CommandCategory commandCategory) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this(feedbackToUser, commandCategory, false, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public CommandCategory getCommandCategory() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return commandCategory;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 14,
      "-": 66
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, null, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, null, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/accountcommands/AccountAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.commands.accountcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Adds an account."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountAddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"account add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an account.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + PREFIX_NAME + \"Japan trip \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Expense spent in Japan.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New account added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final Account toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountAddCommand(Account account) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        toAdd \u003d account;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        model.getAccountsManager().addAccount(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!(other instanceof AccountAddCommand)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountAddCommand otherCommand \u003d (AccountAddCommand) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return toAdd.equals(otherCommand.toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "ChenJiehan318": 58
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/accountcommands/AccountDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.commands.accountcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.AccountsManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Delete one or more loans."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountDeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"account delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes an account.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + PREFIX_NAME + \"Japan trip \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_DELETE_ACCOUNT_SUCCESS \u003d \"Deleted Account: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountsManager accountsManager \u003d model.getAccountsManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        List\u003cAccount\u003e lastShownList \u003d model.getAccountsManager().getAccountsList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACCOUNT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Account accountToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        accountsManager.deleteAccount(accountToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ACCOUNT_SUCCESS, accountToDelete), null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                || (other instanceof AccountDeleteCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "ChenJiehan318": 60
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/accountcommands/AccountFindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.commands.accountcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.AccountsManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.NameHasKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Finds and lists all accounts in accountsManager whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountFindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"account find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all accounts whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" trip\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final NameHasKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountFindCommand(NameHasKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountsManager accountsManager \u003d model.getAccountsManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        accountsManager.updateFilteredAccountList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                String.format(Messages.MESSAGE_ACCOUNTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                        accountsManager.getFilteredAccountList().size()), null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                || (other instanceof AccountFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 predicate.equals(((AccountFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 48,
      "thwnus": 1
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/accountcommands/AccountListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.commands.accountcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Lists accounts."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"account list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all accounts.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed accounts.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        builder.append(\"Current Accounts:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        for (int i \u003d 0; i \u003c model.getAccountsManager().getAccountsList().size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            Account account \u003d model.getAccountsManager().getAccountsList().get(i);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            builder.append(i + 1).append(\". \").append(account.getName().toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new CommandResult(builder.toString(), null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "ChenJiehan318": 35
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/LoanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Adds a loan."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a loan.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"out|in \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_PERSON + \"PERSON \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"out \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_PERSON + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_AMOUNT + \"4.20 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Weed money. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_DATE + \"4/12/2020\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New loan added:\\n%1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Loan toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanCommand(Loan loan) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(loan);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        toAdd \u003d loan;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(model, model.getLoansManager());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        model.getLoansManager().addLoan(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), CommandCategory.LOAN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanCommand)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoanCommand otherCommand \u003d (LoanCommand) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return toAdd.equals(otherCommand.toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 9,
      "kenneth-fung": 59
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/LoanDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.exceptions.LoanNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Delete one or more loans."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanDeleteCommand extends MultiLoanCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes one or more loans.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + MULTI_LOAN_SYNTAX"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + MULTI_LOAN_SYNTAX_EXAMPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Loan(s) %1$s deleted.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanDeleteCommand(List\u003cIndex\u003e loanIndices, List\u003cPerson\u003e persons) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(loanIndices, persons);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(model, model.getLoansManager());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansManager loansManager \u003d model.getLoansManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cIndex\u003e targetLoanIndices \u003d constructTargetLoanIndicesList(loansManager);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Consumer\u003cIndex\u003e deleteLoanOp \u003d loansManager::deleteLoan;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        actOnTargetLoans(targetLoanIndices, deleteLoanOp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String resultMessage \u003d constructMultiLoanResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new CommandResult(resultMessage, CommandCategory.LOAN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * The indices of loans in the list will (potentially) change after each deletion."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * This version of multi-loan targeting takes this into account"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * when passing the target indices to the given operation."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void actOnTargetLoans(List\u003cIndex\u003e targetLoanIndices, Consumer\u003cIndex\u003e operation) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        int indicesProcessed \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        targetLoanIndices.sort(new Index.SortDescending()); // indices MUST be sorted before iteration"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (Index index : targetLoanIndices) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                operation.accept(Index.fromZeroBased(index.getZeroBased() - indicesProcessed));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                indicesProcessed++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                hitLoanIndices.add(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } catch (LoanNotFoundException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                missingLoanIndices.add(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanDeleteCommand)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return super.equals(other);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 7,
      "kenneth-fung": 72
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/LoanEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.exceptions.LoanNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Edits a loan."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanEditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a loan.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"\u003cloan number\u003e \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"[%sAMOUNT]\", PREFIX_AMOUNT) + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"[%sDESCRIPTION]\", PREFIX_DESCRIPTION) + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"[%sDATE]\", PREFIX_DATE) + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + PREFIX_AMOUNT + \"4.30\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Loan %1$d edited.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_UNEDITED \u003d \"At least one field must be provided for editing.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"The loan targeted for editing could not be found.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Index targetLoanIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final LoanEditDescriptor loanEditDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanEditCommand(Index targetLoanIndex, LoanEditDescriptor loanEditDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(targetLoanIndex, loanEditDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.targetLoanIndex \u003d targetLoanIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loanEditDescriptor \u003d new LoanEditDescriptor(loanEditDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(model, model.getLoansManager());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansManager loansManager \u003d model.getLoansManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Loan editedLoan;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            Loan targetLoan \u003d loansManager.getLoan(targetLoanIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            editedLoan \u003d createEditedLoan(targetLoan, loanEditDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loansManager.editLoan(targetLoanIndex, editedLoan);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (LoanNotFoundException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                String.format(MESSAGE_SUCCESS, targetLoanIndex.getOneBased()), CommandCategory.LOAN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Creates and returns a {@code Loan} with the details of {@code loanToEdit},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * edited with {@code loanEditDescriptor}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static Loan createEditedLoan(Loan loanToEdit, LoanEditDescriptor loanEditDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        assert loanToEdit !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Person updatedPerson \u003d loanToEdit.getPerson();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Direction updatedDirection \u003d loanEditDescriptor.getDirection().orElse(loanToEdit.getDirection());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Amount updatedAmount \u003d loanEditDescriptor.getAmount().orElse(loanToEdit.getAmount());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Date updatedDate \u003d loanEditDescriptor.getDate().orElse(loanToEdit.getDate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Description updatedDescription \u003d loanEditDescriptor.getDescription().orElse(loanToEdit.getDescription());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Status updatedStatus \u003d loanEditDescriptor.getStatus().orElse(loanToEdit.getStatus());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Loan(updatedPerson, updatedDirection, updatedAmount,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                updatedDate, updatedDescription, updatedStatus);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanEditCommand)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoanEditCommand otherCommand \u003d (LoanEditCommand) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return targetLoanIndex.equals(otherCommand.targetLoanIndex)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 loanEditDescriptor.equals(otherCommand.loanEditDescriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Stores the details to edit the loan with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static class LoanEditDescriptor {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private Person person;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private Direction direction;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private Status status;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public LoanEditDescriptor() {}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public LoanEditDescriptor(LoanEditDescriptor toCopy) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            setPerson(toCopy.person);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            setDirection(toCopy.direction);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "         * Returns true if any field is edited."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return CollectionUtil.isAnyNonNull(direction, amount, date, description, status);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "         * A loan\u0027s Person field cannot be edited by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "         * This method should never be exposed to any other class beyond ```LoanEditCommand```."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        private void setPerson(Person person) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public Optional\u003cPerson\u003e getPerson() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.ofNullable(person);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public void setDirection(Direction direction) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.direction \u003d direction;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public Optional\u003cDirection\u003e getDirection() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.ofNullable(direction);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public void setStatus(Status status) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public Optional\u003cStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (!(other instanceof LoanEditDescriptor)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            LoanEditDescriptor e \u003d (LoanEditDescriptor) other;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return getPerson().equals(e.getPerson())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 getDirection().equals(e.getDirection())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 getStatus().equals(e.getStatus());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 13,
      "cambrian-dk": 1,
      "kenneth-fung": 194,
      "thwnus": 2
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/LoanListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_SORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Lists loans."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all loans.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"[\u003cperson number ...\u003e]\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"[o|i] \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + String.format(\"[%s\u003cd|a\u003e]\", PREFIX_SORT) + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"loan list 1 2 o a\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Loans listed by person in alphabetical order.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_NO_LOANS \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"No loans found in your list. Nobody owes anybody money... for now.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(model, model.getLoansManager());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                model.getLoansManager().getLoans().isEmpty()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        ? MESSAGE_NO_LOANS"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        : MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                CommandCategory.LOAN);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "kenneth-fung": 33
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/LoanPaidCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Marks one or more loans as paid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanPaidCommand extends UpdateStatusCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan paid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks one or more loans as paid.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + MULTI_LOAN_SYNTAX"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + MULTI_LOAN_SYNTAX_EXAMPLE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Loan(s) %1$s marked as paid.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanPaidCommand(List\u003cIndex\u003e loanIndices, List\u003cPerson\u003e persons) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(loanIndices, persons);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(model, model.getLoansManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        updateStatuses(model.getLoansManager(), Status.PAID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String result \u003d constructMultiLoanResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new CommandResult(result, CommandCategory.LOAN);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanPaidCommand)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return super.equals(other);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "kenneth-fung": 47
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/LoanUnpaidCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Marks one or more loans as unpaid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanUnpaidCommand extends UpdateStatusCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan unpaid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks one or more loans as unpaid.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + MULTI_LOAN_SYNTAX"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            + MULTI_LOAN_SYNTAX_EXAMPLE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Loan(s) %1$s marked as unpaid.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanUnpaidCommand(List\u003cIndex\u003e loanIndices, List\u003cPerson\u003e persons) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(loanIndices, persons);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(model, model.getLoansManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        updateStatuses(model.getLoansManager(), Status.UNPAID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String result \u003d constructMultiLoanResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new CommandResult(result, CommandCategory.LOAN);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanUnpaidCommand)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return super.equals(other);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "kenneth-fung": 47
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/MultiLoanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.hasDuplicates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.exceptions.LoanNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents a command that can handle multiple targeted loans."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public abstract class MultiLoanCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected static final String MULTI_LOAN_SYNTAX \u003d \"\u003cloan number... \u003e [p/\u003cperson\u003e ...]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected static final String MULTI_LOAN_SYNTAX_EXAMPLE \u003d \"1 3 4 p/Peter Mary\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final String MESSAGE_NO_TARGETS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"No loan indices or persons given as targets.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_TARGETS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"Duplicate loan targets detected.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final String MESSAGE_NO_TARGETS_HIT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"None of the targeted loans could be found.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected List\u003cIndex\u003e hitLoanIndices;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected List\u003cIndex\u003e missingLoanIndices;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private List\u003cIndex\u003e loanIndices;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private List\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Constructs a command capable of targeting multiple loans to act upon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param loanIndices A list of loan indices to target."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param persons A list of persons; loans belonging to any of these persons will be targeted."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws CommandException If {@link #checkTargetLists} throws a {@code CommandException}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public MultiLoanCommand(List\u003cIndex\u003e loanIndices, List\u003cPerson\u003e persons) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(loanIndices, persons);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loanIndices \u003d new ArrayList\u003cIndex\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.persons \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.hitLoanIndices \u003d new ArrayList\u003cIndex\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.missingLoanIndices \u003d new ArrayList\u003cIndex\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        checkTargetLists(loanIndices, persons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loanIndices.addAll(loanIndices);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Checks for errors in the given lists during construction."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws CommandException If both lists are empty, if either list has repeated entries."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static void checkTargetLists(List\u003cIndex\u003e loanIndices, List\u003cPerson\u003e persons) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(loanIndices, persons);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (loanIndices.isEmpty() \u0026\u0026 persons.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new CommandException(MESSAGE_NO_TARGETS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (hasDuplicates(loanIndices) || hasDuplicates(persons)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TARGETS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Constructs and a sorted list of target loan indices to be acted upon by this command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Both the loan indices and persons list are used in the construction."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Duplicates detected in the final list are removed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected List\u003cIndex\u003e constructTargetLoanIndicesList(LoansManager loansManager) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cIndex\u003e targetLoanIndices \u003d new ArrayList\u003cIndex\u003e(loanIndices);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            for (int i \u003d 0; i \u003c loansManager.getLoansCount(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                Index index \u003d Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                if (loansManager.getLoan(index).getPerson().isSamePerson(person)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    targetLoanIndices.add(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        targetLoanIndices \u003d targetLoanIndices.stream().distinct().collect(Collectors.toList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return targetLoanIndices;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Executes a given operation on loans targeted using the given list of indices."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param operation A `Consumer` that takes an index, gets the loan with that index, and acts on the loan."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected void actOnTargetLoans(List\u003cIndex\u003e targetLoanIndices, Consumer\u003cIndex\u003e operation) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (Index index : targetLoanIndices) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                operation.accept(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                hitLoanIndices.add(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } catch (LoanNotFoundException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                missingLoanIndices.add(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Assembles a result message that takes into account targeted loans not found in the loans manager."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param successMessage Message for when at least one target was found and acted upon."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The result message."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected String constructMultiLoanResult(String successMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        successMessage \u003d String.format("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                successMessage,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                hitLoanIndices.stream()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        .map(index -\u003e String.format(\"%d\", index.getOneBased()))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        .collect(Collectors.joining(\", \")));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (missingLoanIndices.isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return successMessage;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (hitLoanIndices.isEmpty()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return MESSAGE_NO_TARGETS_HIT;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        StringBuilder resultMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        resultMessage.append(successMessage).append(\"\\n\").append(\"However, the following loans were not found: \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (Index missingIndex : missingLoanIndices) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            resultMessage"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    .append(String.format(\"%d\", missingIndex.getOneBased()))"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    .append(\", \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        resultMessage.delete(resultMessage.length() - 2, resultMessage.length() - 1); // remove \", \" at end"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return resultMessage.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof MultiLoanCommand)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        MultiLoanCommand otherCommand \u003d (MultiLoanCommand) other;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loanIndices.equals(otherCommand.loanIndices)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 persons.equals(otherCommand.persons);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "kenneth-fung": 154
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/loancommands/UpdateStatusCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.loancommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Updates the status of a loan."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public abstract class UpdateStatusCommand extends MultiLoanCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public UpdateStatusCommand(List\u003cIndex\u003e loanIndices, List\u003cPerson\u003e persons) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(loanIndices, persons);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Updates the statuses of one or more existing loans to the given status."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected void updateStatuses(LoansManager loansManager, Status updatedStatus) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(loansManager, updatedStatus);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cIndex\u003e targetLoanIndices \u003d constructTargetLoanIndicesList(loansManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Consumer\u003cIndex\u003e updateStatusOp \u003d targetIndex -\u003e loansManager.updateLoanStatus(targetIndex, updatedStatus);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        actOnTargetLoans(targetLoanIndices, updateStatusOp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "kenneth-fung": 29
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/rulecommands/RuleAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands.rulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PREDICATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.RuleManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Adds a rule to budget buddy."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleAddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rule add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new rule to budget buddy. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + PREFIX_PREDICATE + \"PREDICATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + PREFIX_ACTION + \"ACTION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + PREFIX_PREDICATE + \"amount less than 10 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + PREFIX_ACTION + \"add to budget daily\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New rule added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RULE \u003d \"This rule already exists in budget buddy.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Rule rule;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Creates a RuleAddCommand to add the specified {@code Rule}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleAddCommand(Rule rule) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(rule);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.rule \u003d rule;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleManager ruleManager \u003d model.getRuleManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (ruleManager.hasRule(rule)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RULE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ruleManager.addRule(rule);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, rule), CommandCategory.RULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 55
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/scriptcommands/ScriptCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.scriptcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.script.ScriptManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Acts as a base class for commands that use the script manager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public abstract class ScriptCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public abstract CommandResult execute(Model model, ScriptManager scriptManager) throws CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    protected CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return execute(model, null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 20
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/scriptcommands/ScriptEvalCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.scriptcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.script.ScriptManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.script.exceptions.ScriptException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Evaluates a script. The script has access to the full model."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptEvalCommand extends ScriptCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"script eval\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_NO_RESULT \u003d \"Script succeeded with no result.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_SCRIPT_EXCEPTION \u003d \"Exception thrown during script evaluation\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final String script;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptEvalCommand(String script) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.script \u003d script;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public CommandResult execute(Model model, ScriptManager scriptManager) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireNonNull(scriptManager);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            Object result \u003d scriptManager.evaluateScript(script);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                return new CommandResult(MESSAGE_NO_RESULT, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                return new CommandResult(result.toString(), null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        } catch (ScriptException se) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_SCRIPT_EXCEPTION, se.getMessage()), se);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "thwnus": 34
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/transaction/TransactionAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.DATE_EXAMPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACCOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_RECURRENCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Adds a transaction."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionAddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"transaction\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a transaction.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"out|in \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_AMOUNT + \"\u003camount\u003e \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_DESCRIPTION + \"\u003cdescription\u003e \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_ACCOUNT + \"\u003caccount\u003e] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"\u003ccategory\u003e] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"\u003cdate\u003e] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_RECURRENCE + \"\u003cd|w|m|y\u003e]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"out \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_AMOUNT + \"10 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_DESCRIPTION + \"apple  \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_ACCOUNT + \"food  \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_CATEGORY + \"fruits \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_DATE + DATE_EXAMPLE + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_RECURRENCE + \"d\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Transaction added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Error adding transaction.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Transaction toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Creates an AddTransactionCommand to add the specified {@code Transaction}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionAddCommand(Transaction toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            model.getAccountsManager().addTransaction(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            //TODO change to accept more specific exception"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "cambrian-dk": 52,
      "ChenJiehan318": 2,
      "thwnus": 14
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/transaction/TransactionDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Represents the command to delete a transaction."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionDeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"transaction delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes transactions with the specified IDs\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"\u003cid ...\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"5 7 13\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_DELETE_TRANSACTION_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(model, model.getAccountsManager());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactions();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Transaction transactionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        model.getAccountsManager().removeTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete), null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "cambrian-dk": 39,
      "ChenJiehan318": 2,
      "thwnus": 9
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/transaction/TransactionEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Represents a command to edit transactions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionEditCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 7,
      "thwnus": 1
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/commands/view/ViewFilterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACCOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_UNTIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.TransactionMatchesConditionsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Finds and lists all transactions in AccountBook whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class ViewFilterCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view filter\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters the main transaction view. If no \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"arguments are provided, all transactions are shown. Otherwise, only transactions meeting all \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"the criteria are shown.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Parameters: [\" + PREFIX_ACCOUNT + \"\u003caccount\u003e] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"\u003ccategory\u003e] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_FROM + \"\u003cfrom date\u003e] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"[\" + PREFIX_UNTIL + \"/\u003cto date\u003e]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_ACCOUNT + \"School \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_FROM + \"4/2/2420 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            + PREFIX_UNTIL + \"5/2/2420\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final TransactionMatchesConditionsPredicate predicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public ViewFilterCommand(TransactionMatchesConditionsPredicate predicate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        model.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                        model.getFilteredTransactions().size()), null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || (other instanceof ViewFilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 predicate.equals(((ViewFilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "cambrian-dk": 46,
      "thwnus": 10
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_ACCOUNT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final Prefix PREFIX_ACTION \u003d new Prefix(\"act/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"x/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_FROM \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_UNTIL \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_PREDICATE \u003d new Prefix(\"pred/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Prefix PREFIX_SORT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    // Loans"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Prefix PREFIX_PERSON \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    // Transactions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final Prefix PREFIX_RECURRENCE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    // Date examples"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String DATE_EXAMPLE \u003d \"4/20/2420\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "cambrian-dk": 14,
      "kenneth-fung": 6,
      "-": 8
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/CommandLineParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.ServiceLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class CommandLineParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static final Pattern ONEWORD_REGEX \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Used for two-word commands like \u003ccode\u003eaccount edit\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static final Pattern TWOWORD_REGEX \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+\\\\s\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Contains a map of command names to parsers."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final HashMap\u003cString, CommandParser\u003e commandParsers;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Creates a command line parser. Commands are found by searching for"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * all classes implementing the interface {@link CommandParser}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public CommandLineParser() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        commandParsers \u003d loadParsers();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param rawUserInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Command parseCommand(String rawUserInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        final String userInput \u003d rawUserInput.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        CommandParser parser \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        Matcher matcher \u003d TWOWORD_REGEX.matcher(userInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            parser \u003d commandParsers.get(matcher.group(\"commandWord\").toLowerCase());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (parser \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            matcher \u003d ONEWORD_REGEX.matcher(userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            parser \u003d commandParsers.get(matcher.group(\"commandWord\").toLowerCase());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (parser \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return parser.parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Loads all command parsers reachable from the system class loader."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return A map of command names to parsers"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private static HashMap\u003cString, CommandParser\u003e loadParsers() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        HashMap\u003cString, CommandParser\u003e ret \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        for (CommandParser parser : ServiceLoader.load(CommandParser.class, null)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            String name \u003d parser.name().toLowerCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (ret.containsKey(name)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                throw new IllegalArgumentException(\"Duplicate command name.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            ret.put(name, parser);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 8,
      "thwnus": 57,
      "-": 24
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents a CommandParser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * All CommandParsers must have a no-argument constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public interface CommandParser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Gets the command name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return The command name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    String name();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "thwnus": 10,
      "-": 11
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/CommandParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.AppUtil.getDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleProcessingUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.ActionExpression;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Operator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.PredicateExpression;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Contains utility methods used for parsing strings in the various *CommandParser classes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class CommandParserUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Parses a {@code String account} into an {@code Amount}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @throws ParseException if the given {@code account} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static Account parseAccount(String account) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        String trimmedAccount \u003d account.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new Account(new Name(trimmedAccount), new Description(\"null\"), new TransactionList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Parses a {@code String amount} into an {@code Amount}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String[] dollarCentArray \u003d trimmedAmount.split(\"\\\\.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (dollarCentArray.length \u003c\u003d 0 || dollarCentArray.length \u003e\u003d 3) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Long parsedDollars;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (StringUtil.isNonNegativeUnsignedLong(dollarCentArray[0])) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            parsedDollars \u003d Long.parseLong(dollarCentArray[0]) * 100L;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Long parsedCents \u003d 0L;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (dollarCentArray.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (dollarCentArray[1].length() \u003c\u003d 2"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 StringUtil.isNonNegativeUnsignedLong(dollarCentArray[1])) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                parsedCents \u003d dollarCentArray[1].length() \u003d\u003d 1"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        ? Long.parseLong(dollarCentArray[1] + \"0\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        : Long.parseLong(dollarCentArray[1]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                throw new ParseException(Amount.MESSAGE_CENTS_PARSE_ERROR);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Amount(parsedDollars + parsedCents);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return getDateFormat().parse(trimmedDate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String attribute} into a {@code Attribute}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code attribute} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Attribute parseAttribute(String attribute) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(attribute);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedAttr \u003d attribute.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!Attribute.isValidAttribute(trimmedAttr)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(Attribute.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Attribute.of(trimmedAttr).get();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String operator} into an {@code Operator}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code operator} is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Operator parseOperator(String operator) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(operator);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedOp \u003d operator.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!Operator.isValidOperator(trimmedOp)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(Operator.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Operator.of(trimmedOp).get();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String value} into a {@code Value}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code value} is invalid."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Value parseValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedValue \u003d value.trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!Value.isValidValue(trimmedValue)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(Value.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new Value(trimmedValue);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String expr} into an {@code PredicateExpression}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code expr} is invalid."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static PredicateExpression parsePredicateExpr(String expr) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(expr);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedExpr \u003d expr.trim();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Matcher matcher \u003d PredicateExpression.FORMAT_REGEX.matcher(trimmedExpr);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(PredicateExpression.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Attribute attribute \u003d parseAttribute(matcher.group(\"exprAttribute\"));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Operator operator \u003d parseOperator(matcher.group(\"exprOperator\"));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Value value \u003d parseValue(matcher.group(\"exprValue\"));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!RuleProcessingUtil.isValidPredicateExpr(attribute, operator, value)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(PredicateExpression.MESSAGE_TYPE_REQUIREMENTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new PredicateExpression(attribute, operator, value);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String expr} into an {@code ActionExpression}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code expr} is invalid."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static ActionExpression parseActionExpr(String expr) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(expr);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String trimmedExpr \u003d expr.trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Matcher matcher \u003d ActionExpression.FORMAT_REGEX.matcher(trimmedExpr);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(ActionExpression.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Operator operator \u003d parseOperator(matcher.group(\"exprOperator\"));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Value value \u003d parseValue(matcher.group(\"exprValue\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!RuleProcessingUtil.isValidActionExpr(operator, value)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(ActionExpression.MESSAGE_TYPE_REQUIREMENTS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new ActionExpression(operator, value);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String predicate} into a {@code RulePredicate}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static RulePredicate parsePredicate(String predicate, String type) throws ParseException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (type.equals(Rule.TYPE_EXPRESSION)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return parsePredicateExpr(predicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(RulePredicate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses a {@code String action} into a {@code RuleAction}."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the given {@code action} is invalid."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static RuleAction parseAction(String action, String type) throws ParseException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(action);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (type.equals(Rule.TYPE_EXPRESSION)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return parseActionExpr(action);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(RuleAction.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * TODO IMPLEMENT, right now just returns a new Category"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static Category parseCategory(String s) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return new Category(s);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 141,
      "cambrian-dk": 19,
      "ChenJiehan318": 2,
      "kenneth-fung": 68,
      "thwnus": 4,
      "-": 36
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/ExitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Parses the \u003ccode\u003eexit\u003c/code\u003e command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ExitCommandParser implements CommandParser\u003cExitCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return ExitCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ExitCommand parse(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "thwnus": 16
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/HelpCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Parses the \u003ccode\u003ehelp\u003c/code\u003e command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class HelpCommandParser implements CommandParser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return HelpCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public HelpCommand parse(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "thwnus": 16
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/accountcommandparsers/AccountAddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.accountcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.accountcommands.AccountAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Parses input arguments and creates a new AccountAddCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountAddCommandParser implements CommandParser\u003cAccountAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return AccountAddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccountAddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * and returns an AccountAddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccountAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Name name \u003d CommandParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Optional\u003cString\u003e optionalDescription \u003d argMultimap.getValue(PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Description description \u003d optionalDescription.isPresent()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                ? CommandParserUtil.parseDescription(optionalDescription.get())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                : new Description(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Account account \u003d new Account(name, description, transactionList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new AccountAddCommand(account);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 62
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/accountcommandparsers/AccountDeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.accountcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.accountcommands.AccountDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Parses input arguments and creates a new LoanDeleteCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountDeleteCommandParser implements CommandParser\u003cAccountDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return AccountDeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            Index index \u003d CommandParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return new AccountDeleteCommand(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccountDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 34
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/accountcommandparsers/AccountFindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.accountcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.accountcommands.AccountFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.NameHasKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountFindCommandParser implements CommandParser\u003cAccountFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return AccountFindCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccountFindCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * and returns a AccountFindCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccountFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new AccountFindCommand(new NameHasKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 39
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/accountcommandparsers/AccountListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.accountcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.commands.accountcommands.AccountListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Parses the \u003ccode\u003elist\u003c/code\u003e command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountListCommandParser implements CommandParser\u003cAccountListCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return AccountListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountListCommand parse(String args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new AccountListCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 19
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/LoanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Parses input arguments and creates a new LoanCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanCommandParser implements CommandParser\u003cLoanCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return LoanCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoanCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * and returns an LoanCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PERSON, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_DATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String directionString \u003d argMultimap.getPreamble().toUpperCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || !(directionString.equals(Direction.IN.toString())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || directionString.equals(Direction.OUT.toString()))) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Name name \u003d CommandParserUtil.parseName(argMultimap.getValue(PREFIX_PERSON).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Person person \u003d new Person(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Direction direction \u003d Direction.valueOf(directionString.toUpperCase());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Amount amount \u003d CommandParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cString\u003e optionalDescription \u003d argMultimap.getValue(PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Description description \u003d optionalDescription.isPresent()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                ? CommandParserUtil.parseDescription(optionalDescription.get())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                : new Description(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cString\u003e optionalDate \u003d argMultimap.getValue(PREFIX_DATE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (optionalDate.isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                date \u003d CommandParserUtil.parseDate(optionalDate.get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Status status \u003d Status.UNPAID;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Loan loan \u003d new Loan(person, direction, amount, date, description, status);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new LoanCommand(loan);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 17,
      "cambrian-dk": 1,
      "kenneth-fung": 66,
      "thwnus": 2
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/LoanDeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Parses input arguments and creates a new LoanDeleteCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanDeleteCommandParser extends MultiLoanCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return LoanDeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            parseMultiLoanArgs(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return new LoanDeleteCommand(loanIndices, persons);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanDeleteCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 28
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/LoanEditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanEditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanEditCommand.LoanEditDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Parses input arguments and creates a new LoanEditCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanEditCommandParser implements CommandParser\u003cLoanEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return LoanEditCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Index loanIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loanIndex \u003d CommandParserUtil.parseIndex(argMultiMap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanEditCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoanEditDescriptor loanEditDescriptor \u003d new LoanEditDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loanEditDescriptor.setAmount("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    CommandParserUtil.parseAmount(argMultiMap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loanEditDescriptor.setDescription("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    CommandParserUtil.parseDescription(argMultiMap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loanEditDescriptor.setDate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    CommandParserUtil.parseDate(argMultiMap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!loanEditDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException(LoanEditCommand.MESSAGE_UNEDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new LoanEditCommand(loanIndex, loanEditDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 61
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/LoanListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Parses the \u003ccode\u003elist\u003c/code\u003e command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanListCommandParser implements CommandParser\u003cLoanListCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return LoanListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanListCommand parse(String args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new LoanListCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 19
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/LoanPaidCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanPaidCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Parses input arguments and creates a new LoanPaidCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanPaidCommandParser extends MultiLoanCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return LoanPaidCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanPaidCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            parseMultiLoanArgs(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return new LoanPaidCommand(loanIndices, persons);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanPaidCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 28
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/LoanUnpaidCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.LoanUnpaidCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Parses input arguments and creates a new LoanUnpaidCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanUnpaidCommandParser extends MultiLoanCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return LoanUnpaidCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanUnpaidCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            parseMultiLoanArgs(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return new LoanUnpaidCommand(loanIndices, persons);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanUnpaidCommand.COMMAND_WORD), e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 28
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/loancommandparsers/MultiLoanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.loancommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.commands.loancommands.MultiLoanCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents a command parser that can handle multiple loan targets."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public abstract class MultiLoanCommandParser implements CommandParser\u003cMultiLoanCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected List\u003cIndex\u003e loanIndices;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected List\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public MultiLoanCommandParser() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loanIndices \u003d new ArrayList\u003cIndex\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        persons \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Parses multiple loan targets into two lists to be passed on to Command classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * {@code loanIndices} is used for targeting individual loans."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * {@code persons} is used for targeting all the loans of specific persons."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param args The loan targets (as a String) to be parsed (e.g. 1 3 4 Mary)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws ParseException If parsing fails at any point."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    protected void parseMultiLoanArgs(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loanIndices.clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        persons.clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String[] argsArray \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (String arg : argsArray) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                loanIndices.add(CommandParserUtil.parseIndex(arg));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                persons.add(new Person(CommandParserUtil.parseName(arg)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 45
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/rulecommandparsers/RuleAddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.rulecommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_PREDICATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.rulecommands.RuleAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Parses input arguments and creates a new RuleAddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleAddCommandParser implements CommandParser\u003cRuleAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return RuleAddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PREDICATE, PREFIX_ACTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PREDICATE, PREFIX_ACTION)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RuleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RulePredicate predicate \u003d CommandParserUtil.parsePredicate(argMultimap.getValue(PREFIX_PREDICATE).get(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                Rule.TYPE_EXPRESSION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleAction action \u003d CommandParserUtil.parseAction(argMultimap.getValue(PREFIX_ACTION).get(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                Rule.TYPE_EXPRESSION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Rule rule \u003d new Rule(predicate, action);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return new RuleAddCommand(rule);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 62
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/scriptcommandparsers/ScriptEvalCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.scriptcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.scriptcommands.ScriptEvalCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Parses input arguments and creates a new ScriptEvalCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptEvalCommandParser implements CommandParser\u003cScriptEvalCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return ScriptEvalCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptEvalCommand parse(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return new ScriptEvalCommand(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 19
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/transactioncommandparsers/TransactionAddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.transactioncommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACCOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.transaction.TransactionAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Parses input and"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionAddCommandParser implements CommandParser\u003cTransactionAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return TransactionAddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TransactionAddCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * and returns an TransactionAddCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_ACCOUNT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        PREFIX_CATEGORY, PREFIX_DATE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        String directionString \u003d argMultimap.getPreamble().toUpperCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || !(directionString.equals(Direction.IN.toString())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || directionString.equals(Direction.OUT.toString()))) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                    TransactionAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Direction direction \u003d Direction.valueOf(directionString.toUpperCase());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Amount amount \u003d CommandParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalDescription \u003d argMultimap.getValue(PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Description description \u003d optionalDescription.isPresent()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? CommandParserUtil.parseDescription(optionalDescription.get())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalAccount \u003d argMultimap.getValue(PREFIX_ACCOUNT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Account account \u003d optionalAccount.isPresent()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? CommandParserUtil.parseAccount(optionalAccount.get())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                : Account.getDefaultAccount();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalCategory \u003d argMultimap.getValue(PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Category category \u003d optionalCategory.isPresent()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? CommandParserUtil.parseCategory(optionalCategory.get())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "         * Return current date when optionalDate is not present"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalDate \u003d argMultimap.getValue(PREFIX_DATE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Date date \u003d optionalDate.isPresent()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ? CommandParserUtil.parseDate(optionalDate.get())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                : new Date();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Transaction transaction \u003d new Transaction(date, amount, direction, description, account, category);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return new TransactionAddCommand(transaction);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 76,
      "thwnus": 20
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/commandparsers/viewcommandparsers/ViewFilterCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.parser.commandparsers.viewcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_ACCOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_UNTIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.view.ViewFilterCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.CommandParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.TransactionMatchesConditionsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Parses input arguments and creates a new \u003ccode\u003eViewFilterCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class ViewFilterCommandParser implements CommandParser\u003cViewFilterCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return ViewFilterCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewFilterCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * and returns a ViewFilterCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public ViewFilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ACCOUNT, PREFIX_CATEGORY, PREFIX_FROM, PREFIX_UNTIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        //if arguments are not present, return empty Optionals"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalAccountString \u003d argMultimap.getValue(PREFIX_ACCOUNT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cAccount\u003e optionalAccount \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                argMultimap.getValue(PREFIX_ACCOUNT).isPresent()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        ? Optional.of(CommandParserUtil.parseAccount(optionalAccountString.get()))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        : Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalCategoryString \u003d argMultimap.getValue(PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cCategory\u003e optionalCategory \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                argMultimap.getValue(PREFIX_CATEGORY).isPresent()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        ? Optional.of(CommandParserUtil.parseCategory(optionalCategoryString.get()))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        : Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalFromString \u003d argMultimap.getValue(PREFIX_FROM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cDate\u003e optionalFrom \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                argMultimap.getValue(PREFIX_FROM).isPresent()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        ? Optional.of(CommandParserUtil.parseDate(optionalFromString.get()))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        : Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cString\u003e optionalUntilString \u003d argMultimap.getValue(PREFIX_UNTIL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Optional\u003cDate\u003e optionalUntil \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                argMultimap.getValue(PREFIX_UNTIL).isPresent()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        ? Optional.of(CommandParserUtil.parseDate(optionalUntilString.get()))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                        : Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return new ViewFilterCommand(new TransactionMatchesConditionsPredicate(optionalAccount,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                optionalCategory, optionalFrom, optionalUntil));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 56,
      "thwnus": 14
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/RuleProcessingUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Operator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Contains utility methods and constants used for processing rules."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleProcessingUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String TYPE_DESC \u003d \"DESCRIPTION\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String TYPE_AMOUNT \u003d \"AMOUNT\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String TYPE_DATE \u003d \"DATE\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String TYPE_CATEGORY \u003d \"CATEGORY\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Is a private constructor for a static-only class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private RuleProcessingUtil() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the value of a transaction\u0027s attribute given the transaction."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Object extractAttribute(Attribute attribute, Transaction txn) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        switch (attribute) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case DESCRIPTION:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return txn.getDescription();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case AMOUNT:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            long sign \u003d txn.getDirection().equals(Direction.IN) ? 1 : -1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return sign * txn.getAmount().toLong();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case DATE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return txn.getDate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // impossible"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            assert false : \"Unhandled attribute\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns if a value can be parsed into the specified type."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static boolean isValueParsable(String typeName, Value value) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        switch (typeName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case TYPE_DESC:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case TYPE_CATEGORY:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // don\u0027t have to handle since value already stored as string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case TYPE_AMOUNT:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                Long.parseLong(value.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        case TYPE_DATE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            // todo: need to try parsing date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns if the predicate expression is valid,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * i.e. attribute and value are all working with the expected type specified by the operator."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static boolean isValidPredicateExpr(Attribute attribute, Operator operator, Value value) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return operator.getExpectedType().equals(attribute.getEvaluatedType())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 isValueParsable(operator.getExpectedType(), value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns if the action expression is valid,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * i.e. value is working with the expected type specified by the operator."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static boolean isValidActionExpr(Operator operator, Value value) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return isValueParsable(operator.getExpectedType(), value);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 83,
      "thwnus": 1
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/actionable/Actionable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.actionable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents an action with hidden internal logic and the ability to be performed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public interface Actionable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Executes the action and returns the completion message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    String perform(Model model, Transaction txn);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 14
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/actionable/ActionableExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.actionable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents an action written as an expression."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public abstract class ActionableExpression implements Actionable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    protected final Value value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs an ActionableExpression given a value."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to perform the action with."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ActionableExpression(Value value) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 19
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/actionable/SetDescExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.actionable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a set description expression."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class SetDescExpression extends ActionableExpression {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a SetDescExpression with the given value."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to perform the action with."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public SetDescExpression(Value value) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String perform(Model model, Transaction txn) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(model, txn);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // todo: set description of transaction in model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 28
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/ContainsExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleProcessingUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a contains expression."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class ContainsExpression extends TestableExpression {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a ContainsExpression with the given attribute and value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ContainsExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(attribute, value);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean test(Transaction txn) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(txn);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String left \u003d (String) RuleProcessingUtil.extractAttribute(attribute, txn);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String right \u003d value.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return left.contains(right);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 31
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/EqualToExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleProcessingUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a equal-to expression."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class EqualToExpression extends TestableExpression {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a EqualToExpression with the given attribute and value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public EqualToExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(attribute, value);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean test(Transaction txn) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(txn);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        long left \u003d (long) RuleProcessingUtil.extractAttribute(attribute, txn);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        long right \u003d Long.parseLong(value.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return left \u003d\u003d right;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 31
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/LessEqualExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleProcessingUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a less-than-or-equal-to expression."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class LessEqualExpression extends TestableExpression {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a LessEqualExpression with the given attribute and value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public LessEqualExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(attribute, value);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean test(Transaction txn) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(txn);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        long left \u003d (long) RuleProcessingUtil.extractAttribute(attribute, txn);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        long right \u003d Long.parseLong(value.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return left \u003c\u003d right;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 31
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/LessThanExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleProcessingUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a less-than expression."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class LessThanExpression extends TestableExpression {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a LessThanExpression with the given attribute and value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public LessThanExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(attribute, value);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean test(Transaction txn) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(txn);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        long left \u003d (long) RuleProcessingUtil.extractAttribute(attribute, txn);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        long right \u003d Long.parseLong(value.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return left \u003c right;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 31
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/MoreEqualExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleProcessingUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a more-than-or-equal-to expression."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class MoreEqualExpression extends TestableExpression {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a MoreEqualExpression with the given attribute and value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public MoreEqualExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(attribute, value);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean test(Transaction txn) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(txn);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        long left \u003d (long) RuleProcessingUtil.extractAttribute(attribute, txn);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        long right \u003d Long.parseLong(value.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return left \u003e\u003d right;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 31
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/MoreThanExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleProcessingUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a more-than expression."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class MoreThanExpression extends TestableExpression {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a MoreThanExpression with the given attribute and value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public MoreThanExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(attribute, value);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean test(Transaction txn) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(txn);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        long left \u003d (long) RuleProcessingUtil.extractAttribute(attribute, txn);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        long right \u003d Long.parseLong(value.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return left \u003e right;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 31
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/Testable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a predicate with hidden internal logic and the ability to be tested."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public interface Testable extends Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 11
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/rules/testable/TestableExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.rules.testable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.Value;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a predicate written as an expression."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public abstract class TestableExpression implements Testable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    protected final Attribute attribute;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    protected final Value value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a TestableExpression given an attribute and a value."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute to be tested with."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value to be tested against."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public TestableExpression(Attribute attribute, Value value) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 23
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/script/ScriptEnvironmentInitialiser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.logic.script;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents a function that initialises a {@link ScriptManager}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public interface ScriptEnvironmentInitialiser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Initialises the {@link ScriptManager}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param engine the {@link ScriptManager} to initialise"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    void initialise(ScriptManager engine);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 14
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/script/ScriptManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.script;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javax.script.Bindings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javax.script.ScriptContext;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javax.script.ScriptEngine;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import javax.script.ScriptEngineManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.script.exceptions.ScriptException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.script.Script;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Evaluates scripts."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final Object scriptEngineLock;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final ScriptEnvironmentInitialiser initialiser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final ScriptEngine scriptEngine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Creates a new ScriptManager with the specified environment initialiser."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param initialiser The environment initialiser."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptManager(ScriptEnvironmentInitialiser initialiser) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.initialiser \u003d initialiser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        scriptEngineLock \u003d new Object();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        scriptEngine \u003d new ScriptEngineManager().getEngineByName(\"nashorn\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (scriptEngine \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            throw new IllegalStateException(\"Could not instantiate JavaScript engine\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        initialiser.initialise(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Evaluates a script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * The context between evaluations is persisted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param script the script"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param argv the arguments to pass to the script"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the result of the script, which may be \u003ccode\u003enull\u003c/code\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws ScriptException if an exception occurs during script evaluation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Object evaluateScript(String script, Object... argv) throws ScriptException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        synchronized (scriptEngineLock) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                setVariable(\"argv\", argv);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                return scriptEngine.eval(script);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                throw new ScriptException(String.format(\"Exception while evaluating script: %1$s\", ex.toString()), ex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Evaluates a script."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param script the script"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param argv the arguments to pass to the script"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the result of the script, which may be \u003ccode\u003enull\u003c/code\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @throws ScriptException if an exception occurs during script evaluation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Object evaluateScript(Script script, Object... argv) throws ScriptException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return evaluateScript(script.getCode(), argv);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Resets the script evaluation context."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * This removes any variables declared by previously evaluated scripts, and re-initialises the context"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * using the initialiser provided when this ScriptManager was created."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public void resetEnvironment() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        synchronized (scriptEngineLock) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            Bindings newBindings \u003d scriptEngine.createBindings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            scriptEngine.setBindings(newBindings, ScriptContext.ENGINE_SCOPE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            initialiser.initialise(this);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Sets a variable in the script evaluation context."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param name The name of the variable to be set"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param value The value the variable should be set to"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public void setVariable(String name, Object value) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        synchronized (scriptEngineLock) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            scriptEngine.put(name, value);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "thwnus": 90
    }
  },
  {
    "path": "src/main/java/budgetbuddy/logic/script/exceptions/ScriptException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.script.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents an \u003ccode\u003eException\u003c/code\u003e that occurs during script evaluation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Constructs a \u003ccode\u003eScriptException\u003c/code\u003e with the specified detail message and cause."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param message the detail message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param cause the cause"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "thwnus": 14
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/AccountsManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.UniqueAccountList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.account.exception.AccountNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Manages the loans of each person in a list of persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountsManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final UniqueAccountList accounts;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final FilteredList\u003cAccount\u003e filteredAccounts;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountsManager() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.accounts \u003d new UniqueAccountList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        filteredAccounts \u003d new FilteredList\u003c\u003e(this.getAccountsList(), s -\u003e true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Creates and fills a new list of accounts."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param accounts A list of accounts with which to fill the new list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountsManager(List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(accounts);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.accounts \u003d new UniqueAccountList(accounts);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        filteredAccounts \u003d new FilteredList\u003c\u003e(this.getAccountsList(), s -\u003e true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Retrieves the list of accounts."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    // TODO Probably need to change this to work with the UI."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public ObservableList\u003cAccount\u003e getAccountsList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return accounts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns an unmodifiable view of the list of Account"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public ObservableList\u003cAccount\u003e getFilteredAccountList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return filteredAccounts;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Adds a given account to its specified account in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param toAdd The account to add."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void addAccount(Account toAdd) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        accounts.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Edits an account\u0027s Name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void editAccount(Account targetAccount, Name name) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (accounts.contains(targetAccount)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            accounts.get(targetAccount).setName(targetAccount, name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Deletes an account."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param toDelete The target account for deletion."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void deleteAccount (Account toDelete) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (accounts.contains(toDelete)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            accounts.remove(toDelete);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Updates the filter of the filtered account list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void updateFilteredAccountList(Predicate\u003cAccount\u003e predicate) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        filteredAccounts.setPredicate(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns an unmodifiable view of the transaction list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return accounts.getTransactionList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Adds a transaction to the AccountBook"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    //TODO implement addTransaction"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void addTransaction(Transaction toAdd) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Account accountToCheck \u003d toAdd.getAccount();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (accounts.contains(accountToCheck)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    //TODO implement removeTransaction"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void removeTransaction(Transaction toDelete){"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!(other instanceof AccountsManager)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountsManager otherAccountsManager \u003d (AccountsManager) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return accounts.equals(otherAccountsManager.accounts);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "ChenJiehan318": 132
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/LoansManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.exceptions.LoanNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Maintains a list of loans."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoansManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final ObservableList\u003cLoan\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final ObservableList\u003cLoan\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoansManager() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Creates and fills a new list of loans."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param loans A list of loans with which to fill the new list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoansManager(List\u003cLoan\u003e loans) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(loans);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.internalList.setAll(loans);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Retrieves the list of loans."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public ObservableList\u003cLoan\u003e getLoans() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns the list of loans sorted by each loan\u0027s person\u0027s name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public SortedList\u003cLoan\u003e getSortedLoans() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return internalList.sorted(new SortByPerson());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns a filtered list of loans belonging to the given person."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param person The person to filter the list by."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public List\u003cLoan\u003e getFilteredLoans(Person person) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getLoans().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .filter(loan -\u003e loan.getPerson().isSamePerson(person))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns the loan at the specified index in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toGet The index of the target loan."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws LoanNotFoundException If the loan is not in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Loan getLoan(Index toGet) throws LoanNotFoundException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        checkIndexValidity(toGet);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getLoans().get(toGet.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns the current number of loans in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The current number of loans in the list as an {@code int}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public int getLoansCount() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getLoans().size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns true if the list contains the given loan."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toCheck The loan to check the list for."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean containsLoan(Loan toCheck) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getLoans().contains(toCheck);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Adds a given loan to the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toAdd The loan to add."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void addLoan(Loan toAdd) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        internalList.add(0, toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        internalList.sort(new SortByPerson());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Replaces a target loan with the given loan."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toEdit The index of the target loan to replace."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param editedLoan The edited loan to replace the target loan with."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void editLoan(Index toEdit, Loan editedLoan) throws LoanNotFoundException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        checkIndexValidity(toEdit);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        internalList.set(toEdit.getZeroBased(), editedLoan);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Updates the status of a target loan to the given status."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toUpdate The index of the target loan to update."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param newStatus The new status to update the target loan to."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void updateLoanStatus(Index toUpdate, Status newStatus) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        checkIndexValidity(toUpdate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        internalList.get(toUpdate.getZeroBased()).setStatus(newStatus);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Deletes a target loan from the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toDelete The index of the target loan to delete."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void deleteLoan(Index toDelete) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        checkIndexValidity(toDelete);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        internalList.remove(toDelete.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Checks if a given index exceeds the number of loans currently in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toCheck The index to check."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws LoanNotFoundException If the index exceeds the current number of loans."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private void checkIndexValidity(Index toCheck) throws LoanNotFoundException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (toCheck.getOneBased() \u003e getLoansCount()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new LoanNotFoundException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoansManager)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansManager otherLoansManager \u003d (LoansManager) other;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getLoans().equals(otherLoansManager.getLoans());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * A comparator to sort loans by each of their person\u0027s names in alphabetical order."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static class SortByPerson implements Comparator\u003cLoan\u003e {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        public int compare(Loan first, Loan second) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return first.getPerson().getName().toString().compareTo("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    second.getPerson().getName().toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 160
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns the loans manager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    LoansManager getLoansManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    void deleteTransaction(Transaction target);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the rule manager."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    RuleManager getRuleManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Updates the filter of the filtered transaction list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns an unmodifiable view of the filtered transaction list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactions();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns the accounts manager."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    AccountsManager getAccountsManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 7,
      "cambrian-dk": 13,
      "ChenJiehan318": 4,
      "thwnus": 2,
      "kenneth-fung": 5,
      "-": 33
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents the in-memory model of the budget buddy data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final LoansManager loansManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final AccountsManager accountsManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final RuleManager ruleManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final FilteredList\u003cTransaction\u003e filteredTransactions;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ModelManager(LoansManager loansManager, RuleManager ruleManager, AccountsManager accountsManager,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireAllNonNull(loansManager, ruleManager, accountsManager, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        logger.fine(\"Initializing with accounts manager: \" + accountsManager + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loansManager \u003d new LoansManager(loansManager.getLoans());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.ruleManager \u003d new RuleManager(ruleManager);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.accountsManager \u003d new AccountsManager(accountsManager.getAccountsList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003c\u003e(this.accountsManager.getTransactionList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this(new LoansManager(), new RuleManager(), new AccountsManager(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Loan Manager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoansManager getLoansManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loansManager;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Account Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        filteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public FilteredList\u003cTransaction\u003e getFilteredTransactions() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return filteredTransactions;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        accountsManager.removeTransaction(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleManager getRuleManager() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return ruleManager;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountsManager getAccountsManager() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return accountsManager;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return ruleManager.equals(other.ruleManager)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 accountsManager.equals(other.accountsManager)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 loansManager.equals(other.loansManager)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                \u0026\u0026 filteredTransactions.equals(other.filteredTransactions);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 17,
      "ChenJiehan318": 9,
      "cambrian-dk": 17,
      "thwnus": 7,
      "kenneth-fung": 11,
      "-": 68
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/ReadOnlyAccountBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Unmodifiable view of an account book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public interface ReadOnlyAccountBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns an unmodifiable view of the account list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * This list will not contain any duplicate accounts."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    ObservableList\u003cAccount\u003e getAccountList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "ChenJiehan318": 14,
      "cambrian-dk": 1
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    Path getLoansFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/RuleManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.UniqueRuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Manages all rules in a unique rule list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final UniqueRuleList rules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Creates a new (empty) list of rules."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleManager() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.rules \u003d new UniqueRuleList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Creates a RuleManager using the Rules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleManager(RuleManager toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Replaces the contents of the rule list with {@code rules}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * {@code rules} must not contain duplicate rules."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void setRules(List\u003cRule\u003e rules) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.rules.setRules(rules);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Resets the existing data of this {@code RuleManager} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void resetData(RuleManager newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        setRules(newData.getRuleList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    //// rule-level operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if a rule with the same identity as {@code rule} exists in the rule manager."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean hasRule(Rule rule) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(rule);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return rules.contains(rule);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Adds a rule to the rule manager."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * The rule must not already exist in the rule manager."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void addRule(Rule rule) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        rules.add(rule);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Replaces the given rule {@code target} in the list with {@code editedRule}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * {@code target} must exist in the rule manager."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * The rule identity of {@code editedRule} must not be the same as another existing rule in the rule manager."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void setRule(Rule target, Rule editedRule) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(editedRule);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        rules.setRule(target, editedRule);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Removes {@code key} from this {@code RuleManager}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * {@code key} must exist in the rule manager."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void removeRule(Rule key) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        rules.remove(key);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return rules.asUnmodifiableObservableList().size() + \" rules\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Retrieves the list of rules."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ObservableList\u003cRule\u003e getRuleList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return rules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                || (other instanceof RuleManager // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 rules.equals(((RuleManager) other).rules));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return rules.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 115
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Path loansFilePath \u003d Paths.get(\"data\", \"loans.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        setLoansFilePath(newUserPrefs.getLoansFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Path getLoansFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loansFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void setLoansFilePath(Path loansFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(loansFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loansFilePath \u003d loansFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 loansFilePath.equals(o.loansFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, loansFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        sb.append(\"\\nLoans data file location : \" + loansFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 15,
      "-": 83
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/account/Account.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Represents an account in the account manager."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class Account {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final TransactionList transactionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Account(Name name, Description description, TransactionList transactionList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(name, transactionList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.transactionList \u003d transactionList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static Account getDefaultAccount() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        //TODO implement getDefaultAccount which returns the default account"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return new Account(new Name(\"DEFAULT\"), new Description(\"null\"), new TransactionList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public TransactionList getTransaction() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return transactionList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void setName(Account account, Name name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns true if both accounts of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * This defines a weaker notion of equality between two accounts."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean isSameAccount(Account otherAccount) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (otherAccount \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return otherAccount !\u003d null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 otherAccount.getName().equals(getName())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 (otherAccount.getTransaction().equals(getTransaction()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns true if both accounts have the same identity and data fields."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * This defines a stronger notion of equality between two accounts."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!(other instanceof Account)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Account otherAccount \u003d (Account) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return otherAccount.getName().equals(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 otherAccount.getTransaction().equals(getTransaction());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return Objects.hash(name, description, transactionList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return getName().toString() + \" (\" + getDescription().toString() + \")\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "ChenJiehan318": 90,
      "cambrian-dk": 4,
      "kenneth-fung": 1
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/account/NameHasKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "package budgetbuddy.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import budgetbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Tests that a {@code Account}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class NameHasKeywordsPredicate implements Predicate\u003cAccount\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public NameHasKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean test(Account account) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(account.getName().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                || (other instanceof NameHasKeywordsPredicate// instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameHasKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 31
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/account/UniqueAccountList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.exception.AccountNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.exception.DuplicateAccountException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "//import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "//import budgetbuddy.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * A list of accounts that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class UniqueAccountList implements Iterable\u003cAccount\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final ObservableList\u003cAccount\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final ObservableList\u003cAccount\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public UniqueAccountList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public UniqueAccountList(List\u003cAccount\u003e toBeCopied) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(toBeCopied);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        setAccounts(toBeCopied);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns true if the list contains an equivalent account as the given argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean contains(Account toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAccount);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Adds an account to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * The account must not already exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void add(Account toAdd) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Replaces the account {@code target} in the list with {@code editedAccount}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * The account identity of {@code editedAccount} must not be the same as another existing account in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void setAccount(Account target, Account editedAccount) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(target, editedAccount);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!target.isSameAccount(editedAccount) \u0026\u0026 contains(editedAccount)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        internalList.set(index, editedAccount);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Removes the equivalent account from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * The account must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void remove(Account toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Retrieves an account from the list equivalent to the given account."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @param toGet The equivalent account (identical attributes to the target account)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @return The retrieved account."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * @throws AccountNotFoundException if account is not in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Account get(Account toGet) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        Account targetAccount \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        for (Account account : internalUnmodifiableList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            if (account.isSameAccount(toGet)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                targetAccount \u003d account;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (targetAccount \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return targetAccount;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void setAccounts(UniqueAccountList replacement) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Replaces the contents of this list with {@code accounts}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * {@code accounts} must not contain duplicate accounts."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public void setAccounts(List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        requireAllNonNull(accounts);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        if (!accountsAreUnique(accounts)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        internalList.setAll(accounts);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Gets account that matches the UniqueAccountList by name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * TODO IMPLEMENT, right now only returns a new account"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /*public Optional\u003cAccount\u003e getAccount(String accountName) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return Optional.of(new Account(new Name(\"default\"), new TransactionList()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public ObservableList\u003cAccount\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * TODO: implement getTransactionList, right now only returns a new observableArrayList"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public Iterator\u003cAccount\u003e iterator() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                || (other instanceof UniqueAccountList // instanceof handles nulls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueAccountList) other).internalList));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Returns true if {@code accounts} contains only unique accounts."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private boolean accountsAreUnique(List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        for (int i \u003d 0; i \u003c accounts.size() - 1; i++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            for (int j \u003d i + 1; j \u003c accounts.size(); j++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                if (accounts.get(i).isSameAccount(accounts.get(j))) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tcgj": 4,
      "ChenJiehan318": 164,
      "cambrian-dk": 12,
      "thwnus": 2
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/account/exception/AccountNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.account.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Signals that the operation is unable to find the specified account."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountNotFoundException extends RuntimeException {}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "ChenJiehan318": 6
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/account/exception/DuplicateAccountException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.account.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class DuplicateAccountException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public DuplicateAccountException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        super(\"Operation would result in duplicate accounts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "ChenJiehan318": 10
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/attributes/Category.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Stub class to represent a Category of a Transaction."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \"Category should not be null.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Category(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.category \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    boolean isValidDescription(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return description !\u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || (other instanceof Category \u0026\u0026 category \u003d\u003d ((Category) other).category);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "cambrian-dk": 38,
      "thwnus": 1
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/attributes/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * A stub class to represent a description of an entity."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            \"Description should not be null.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static boolean isValidDescription(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return description !\u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                || (other instanceof Description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    \u0026\u0026 description.equals(((Description) other).description));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "cambrian-dk": 37,
      "thwnus": 2,
      "kenneth-fung": 2
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/attributes/Direction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Enum that represents the direction of money flow (IN/OUT)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public enum Direction {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    IN(\"IN\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    OUT(\"OUT\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Direction can only be IN or OUT.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public final String direction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Constructs a {@code direction}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @param direction The String representing the direction of money flow."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    Direction(String direction) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.direction \u003d direction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns true if a given string corresponds to a Direction value."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toTest The string to test."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static boolean contains(String toTest) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Arrays.stream(Direction.values())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .map(Direction::toString)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .anyMatch(directionStr -\u003e directionStr.equals(toTest));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return direction;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 24,
      "thwnus": 1,
      "kenneth-fung": 14
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/attributes/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents the name of a model (e.g. Person, Account) in budget buddy."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "kenneth-fung": 7,
      "-": 50
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/loan/Loan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.AppUtil.getDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents a loan."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Guarantees: details are present and not null, field values are validated and immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class Loan {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Direction direction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Loan(Person person, Direction direction, Amount amount,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                Date date, Description description, Status status) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(person, direction, amount, date, description, status);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.direction \u003d direction;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Direction getDirection() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return direction;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getDateFormat().format(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void setStatus(Status status) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Checks if the Loan has been paid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return True if paid, false otherwise."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean isPaid() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return status \u003d\u003d Status.PAID;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns a {@code string} containing the amount, direction and person of the loan."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String getEssentialInfo() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getDirection() \u003d\u003d Direction.OUT"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                ? String.format(\"%s owes you %s\", getPerson(), getAmount())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                : String.format(\"You owe %s %s\", getPerson(), getAmount());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Checks all fields of a Loan for equality (person, direction, amount, date, description, status)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof Loan)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Loan otherLoan \u003d (Loan) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return otherLoan.getPerson().isSamePerson(person)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 otherLoan.getDirection() \u003d\u003d direction"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 otherLoan.getAmount().equals(amount)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 otherLoan.getDate().equals(date)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 otherLoan.getDescription().equals(description);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Objects.hash(person, direction, amount, description, date, status);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        String directionWithFunctionWord \u003d getDirection() \u003d\u003d Direction.OUT"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                ? getDirection().direction.toLowerCase() + \" to\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                : getDirection().direction.toLowerCase() + \" from\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        final String divider \u003d \" | \";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        builder.append(getStatus().getStatusIcon()).append(\" \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .append(getAmount()).append(\" \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .append(directionWithFunctionWord).append(\" \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .append(getPerson())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .append(divider)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .append(getDateString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (!description.getDescription().isBlank()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            builder.append(divider).append(getDescription());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "cambrian-dk": 2,
      "kenneth-fung": 129,
      "thwnus": 2
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/loan/Status.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents the status (PAID/UNPAID) of a Loan."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    PAID(\"PAID\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    UNPAID(\"UNPAID\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"Status can only be PAID or UNPAID (case-sensitive).\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public final String status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Constructs a {@code status}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param status A valid status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    Status(String status) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns true if a given string corresponds to a Status value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param toTest The string to test."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static boolean contains(String toTest) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Arrays.stream(Status.values())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .map(Status::toString)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                .anyMatch(statusStr -\u003e statusStr.equals(toTest));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Gets the icon of a corresponding status."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The icon as a string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        // PAID: tick icon; UNPAID: blank space (or a cross? \\u2718)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return status.equals(PAID.toString()) ? \"\\u2713\" : \" \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 52
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/loan/exceptions/LoanNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.model.loan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Signals that the operation is unable to find the specified loan."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 6
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents a person referenced by a loan."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Creates a person with the loans in the {@code toBeCopied}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param name The name of the person."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Person(Name name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return otherPerson !\u003d null \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return getName().name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "kenneth-fung": 15,
      "-": 56
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/Rule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a Rule in budget buddy."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: predicate and action are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class Rule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String TYPE_EXPRESSION \u003d \"EXPRESSION\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    // rule details"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final RulePredicate predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final RuleAction action;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Rule(RulePredicate predicate, RuleAction action) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(predicate, action);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RulePredicate getPredicate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleAction getAction() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return action;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if both rules have the same identity and detail fields."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!(other instanceof Rule)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Rule otherRule \u003d (Rule) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return otherRule.getPredicate().equals(getPredicate())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 otherRule.getAction().equals(getAction());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Objects.hash(predicate, action);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return String.format(\"If: %s, then: %s.\", predicate, action);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 62
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/RuleAction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a RuleAction in a Rule with hidden implementation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public abstract class RuleAction {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Actions should be either expressions or scripts \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    + \"and should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 13
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/RulePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a RulePredicate in a Rule with hidden implementation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public abstract class RulePredicate {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Predicates should be either expressions or scripts \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    + \"and should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 13
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/UniqueRuleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.exceptions.DuplicateRuleException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.exceptions.RuleNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * A list of rules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * A rule is considered unique by comparing using {@code Rule#equals(Rule)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * rules uses Rule#equals(Rule) for equality so as to ensure that the rule being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * unique in terms of identity in the UniqueRuleList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * @see Rule#equals(Object)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class UniqueRuleList implements Iterable\u003cRule\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final ObservableList\u003cRule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final ObservableList\u003cRule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public UniqueRuleList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public UniqueRuleList(List\u003cRule\u003e toBeCopied) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(toBeCopied);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        setRules(toBeCopied);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if the list contains an equivalent rule as the given argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean contains(Rule toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Adds a rule to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * The rule must not already exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void add(Rule toAdd) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new DuplicateRuleException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Retrieves a rule from the list equivalent to the given rule."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param toGet The equivalent rule (identical attributes to the target rule)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @return The retrieved rule."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @throws RuleNotFoundException if rule is not in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Rule get(Rule toGet) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Rule targetRule \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        for (Rule rule : internalUnmodifiableList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (rule.equals(toGet)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                targetRule \u003d rule;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (targetRule \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new RuleNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return targetRule;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Replaces the Rule {@code target} in the list with {@code editedRule}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * The rule identity of {@code editedRule} must not be the same as another existing Rule in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void setRule(Rule target, Rule editedRule) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(target, editedRule);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new RuleNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!target.equals(editedRule) \u0026\u0026 contains(editedRule)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new DuplicateRuleException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        internalList.set(index, editedRule);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Removes the equivalent rule from the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * The rule must exist in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void remove(Rule toRemove) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new RuleNotFoundException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void setRules(UniqueRuleList replacement) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Replaces the contents of this list with {@code rules}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * {@code rules} must not contain duplicate rules."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public void setRules(List\u003cRule\u003e rules) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(rules);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!rulesAreUnique(rules)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            throw new DuplicateRuleException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        internalList.setAll(rules);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ObservableList\u003cRule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Iterator\u003cRule\u003e iterator() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                || (other instanceof UniqueRuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRuleList) other).internalList));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if {@code rules} contains only unique rules."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private boolean rulesAreUnique(List\u003cRule\u003e rules) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        for (int i \u003d 0; i \u003c rules.size() - 1; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            for (int j \u003d i + 1; j \u003c rules.size(); j++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                if (rules.get(i).equals(rules.get(j))) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 166
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/exceptions/DuplicateRuleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Signals that the operation will result in duplicate Rules (Rules are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class DuplicateRuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public DuplicateRuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(\"Operation would result in duplicate rules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 11
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/exceptions/RuleNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Signals that the operation is unable to find the specified rule."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/expression/ActionExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.expression;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a RuleAction written as an expression."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: operator and value are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class ActionExpression extends RuleAction {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Expressions should contain exactly two terms in the order \u003coperator\u003e \u003cvalue\u003e \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_TYPE_REQUIREMENTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"The operator and value of the expression have to evaluate to the correct type: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"e.g. setcategory food, where \u0027setcategory\u0027 expects a string , \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"and \u0027food\u0027 is a string\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final Pattern FORMAT_REGEX \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Pattern.compile(\"^(?\u003cexprOperator\u003e\\\\S+)\\\\s(?\u003cexprValue\u003e.*)$\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Operator operator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Value value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs an {@code ActionExpression}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param operator the operator used in the expression."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value used in the expression."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ActionExpression(Operator operator, Value value) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(operator, value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Operator getOperator() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return operator;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Value getValue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Rule.TYPE_EXPRESSION;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if both action expressions have the same identity and detail fields."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!(other instanceof ActionExpression)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ActionExpression otherAction \u003d (ActionExpression) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return otherAction.getOperator().equals(getOperator())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 otherAction.getValue().equals(getValue());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Objects.hash(operator, value);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return String.format(\"%s %s\", operator, value);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 84
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/expression/Attribute.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.expression;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleProcessingUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a Attribute in an PredicateExpression"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAttribute(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public enum Attribute {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    DESCRIPTION(\"description\", RuleProcessingUtil.TYPE_DESC),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    AMOUNT(\"amount\", RuleProcessingUtil.TYPE_AMOUNT),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    DATE(\"date\", RuleProcessingUtil.TYPE_DATE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Attributes should be alphabetical and should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String representation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String evaluatedType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    Attribute(String representation, String evaluatedType) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.representation \u003d representation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.evaluatedType \u003d evaluatedType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if a given string is a valid attribute."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static boolean isValidAttribute(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Arrays"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .stream(Attribute.values())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .anyMatch(attribute -\u003e attribute.representation.equals(test.toLowerCase()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns an {@code Optional\u003cAttribute\u003e} given a valid representation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Optional\u003cAttribute\u003e of(String rep) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Arrays"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .stream(Attribute.values())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .filter(attribute -\u003e attribute.representation.equals(rep.toLowerCase()))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the type that this attribute will be evaluated to."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String getEvaluatedType() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return evaluatedType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return representation;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 58
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/expression/Operator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.expression;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.rules.RuleProcessingUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents an Operator in an expression."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidOperator(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public enum Operator {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    // Predicate operators"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    LESS_THAN(\"\u003c\", RuleProcessingUtil.TYPE_AMOUNT),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    MORE_THAN(\"\u003e\", RuleProcessingUtil.TYPE_AMOUNT),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    LESS_EQUAL(\"\u003c\u003d\", RuleProcessingUtil.TYPE_AMOUNT),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    MORE_EQUAL(\"\u003e\u003d\", RuleProcessingUtil.TYPE_AMOUNT),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    EQUAL_TO(\"\u003d\", RuleProcessingUtil.TYPE_AMOUNT),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    CONTAINS(\"contains\", RuleProcessingUtil.TYPE_DESC),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    // Action operators"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    SET_CATEGORY(\"setcategory\", RuleProcessingUtil.TYPE_CATEGORY),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    SET_DESC(\"setdesc\", RuleProcessingUtil.TYPE_DESC);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Operators are restricted to only the ones already pre-defined \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String representation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String expectedType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    Operator(String representation, String expectedType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.representation \u003d representation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.expectedType \u003d expectedType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if a given string is a valid operator."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static boolean isValidOperator(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Arrays"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .stream(Operator.values())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .anyMatch(operator -\u003e operator.representation.equals(test.toLowerCase()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns an {@code Optional\u003cOperator\u003e} given a representation."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static Optional\u003cOperator\u003e of(String rep) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Arrays"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .stream(Operator.values())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .filter(operator -\u003e operator.representation.equals(rep.toLowerCase()))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns the type that this operator expects from its arguments."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String getExpectedType() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return expectedType;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return representation;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 67
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/expression/PredicateExpression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.expression;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a RulePredicate written as an expression."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: attribute, operator and value are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class PredicateExpression extends RulePredicate {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Expressions should contain exactly three terms in the order \u003cattribute\u003e \u003coperator\u003e \u003cvalue\u003e \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_TYPE_REQUIREMENTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"The attribute, operator, and value of the expression have to evaluate to the correct type: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"e.g. amount \u003c 5, where \u0027amount\u0027 evaluates to a long integer, \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"\u0027\u003c\u0027 expects a long integer, and \u00275\u0027 is a long integer\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final Pattern FORMAT_REGEX \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Pattern.compile(\"^(?\u003cexprAttribute\u003e\\\\S+)\\\\s+(?\u003cexprOperator\u003e\\\\S+)\\\\s(?\u003cexprValue\u003e.*)$\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Attribute attribute;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Operator operator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Value value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs an {@code PredicateExpression}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param attribute the attribute used in the expression."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param operator the operator used in the expression."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value the value used in the expression."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public PredicateExpression(Attribute attribute, Operator operator, Value value) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireAllNonNull(attribute, operator, value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Attribute getAttribute() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return attribute;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Operator getOperator() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return operator;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Value getValue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Rule.TYPE_EXPRESSION;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if both predicate expressions have the same identity and detail fields."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!(other instanceof PredicateExpression)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        PredicateExpression otherPredicate \u003d (PredicateExpression) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return otherPredicate.getAttribute().equals(getAttribute())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 otherPredicate.getOperator().equals(getOperator())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 otherPredicate.getValue().equals(getValue());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return Objects.hash(attribute, operator, value);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return String.format(\"%s %s %s\", attribute, operator, value);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 92
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/rule/expression/Value.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.rule.expression;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a Value in an expression"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidValue(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class Value {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \"Values should either be numerical or contain alphanumeric characters and these special characters, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"excluding the parentheses, (\" + SPECIAL_CHARACTERS + \"), \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Constructs a {@code Value}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @param value A valid value."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public Value(String value) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Returns true if a given string is a valid value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public static boolean isValidValue(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                || (other instanceof Value // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 value.equals(((Value) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 54
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/script/Script.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model.script;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents a script."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class Script {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final ScriptName name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Creates a Script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param name The name of the script"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param description The description of the script"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param code The script\u0027s code"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Script(ScriptName name, Description description, String code) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireAllNonNull(name, description, code);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Returns this script\u0027s name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptName getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Return this script\u0027s description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the description"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Return this script\u0027s code."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return the code"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 55
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/script/ScriptName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model.script;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thwnus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Represents the name of a script."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": " * Guarantees: immutable, and is valid as specified"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class ScriptName {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Script names must contain only \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            + \"alphanumeric characters, dashes, and underscores, and must not be empty\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}-_]+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Constructs a script name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param name A valid script name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public ScriptName(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * Returns true if {@code name} is a valid script name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @param name The string to validate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     * @return true if {@code name} is a valid script name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public boolean isValidName(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return name.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        ScriptName that \u003d (ScriptName) o;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return name.equals(that.name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thwnus": 63
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/transaction/Amount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Represents the Amount in a Transaction."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Guarantees: immutable, is valid as declared in {@link #isValidAmount(long)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String CURRENCY_SIGN \u003d \"$\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"Amounts should be non-negative numbers and should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MESSAGE_CENTS_PARSE_ERROR \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \"Cents should be at most two decimal places long.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final long amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Constructs an {@code Amount}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * @param amount a valid amount."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Amount(long amount) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        AppUtil.checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public long toLong() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns true if a given long is a valid Amount."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public static boolean isValidAmount(long test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return test \u003e\u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return String.format(\"%s%d.%02d\", CURRENCY_SIGN, amount / 100, amount % 100);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 amount \u003d\u003d ((Amount) other).amount);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return Long.hashCode(amount);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 8,
      "cambrian-dk": 45,
      "kenneth-fung": 6
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/transaction/Transaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Represents a Transaction in a TransactionList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class Transaction {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Direction direction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Account account;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Since we only accept one category in the argument, it is added to the set of categories."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Transaction(Date date, Amount amount, Direction direction, Description description,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                       Account account, Category... categories) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireAllNonNull(date, amount, direction);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.direction \u003d direction;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.account \u003d account;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.categories.addAll(Arrays.asList(categories));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Account getAccount() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return account;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Direction getDirection() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return direction;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Set\u003cCategory\u003e getCategories() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return categories;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns true if both Transactions have all the same fields (date, amount, description, categories)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (!(other instanceof Transaction)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        Transaction otherTransaction \u003d (Transaction) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return otherTransaction.getDate().equals(getDate())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 otherTransaction.amount.equals(amount)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 otherTransaction.direction.equals(direction)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 otherTransaction.account.equals(account)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 otherTransaction.description.equals(description)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 otherTransaction.categories.equals(categories);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return Objects.hash(date, amount, direction, account, description, categories);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        builder.append(\"Amount: \")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(direction.toString())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(\" on \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(\" in account: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(getAccount())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                .append(\" Categories: \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "cambrian-dk": 106,
      "thwnus": 4
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/transaction/TransactionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * A list of Transactions that does not allow nulls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionList implements Iterable\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns true if the list contains an equivalent Transaction as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean contains(Transaction toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Adds a Transaction to the list. Multiple identical transactions are allowed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void add(Transaction toAdd) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Replaces the Transaction {@code target} in the list with {@code editedTransaction}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            // TODO handle transactions not found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            //throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        internalList.set(index, editedTransaction);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Removes the equivalent Transaction from the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * The Transaction must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public void remove(Transaction toRemove) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            // TODO handle transactions not found"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            //throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public ObservableList\u003cTransaction\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public Iterator\u003cTransaction\u003e iterator() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || (other instanceof Transaction // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 internalList.equals(((TransactionList) other).internalList));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "cambrian-dk": 85
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/transaction/TransactionMatchesConditionsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thwnus"
        },
        "content": "package budgetbuddy.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " * Tests that {@code Transaction}\u0027s attributes matches any of the attributes given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "public class TransactionMatchesConditionsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Optional\u003cAccount\u003e accountOptional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Optional\u003cCategory\u003e categoryOptional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Optional\u003cDate\u003e fromOptional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    private final Optional\u003cDate\u003e untilOptional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public TransactionMatchesConditionsPredicate(Optional\u003cAccount\u003e accountOptional,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                                                 Optional\u003cCategory\u003e categoryOptional,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                                                 Optional\u003cDate\u003e fromOptional,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                                                 Optional\u003cDate\u003e untilOptional) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.accountOptional \u003d accountOptional;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.categoryOptional \u003d categoryOptional;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.fromOptional \u003d fromOptional;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        this.untilOptional \u003d untilOptional;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (accountOptional.isPresent()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            if (!transaction.getAccount().equals(accountOptional.get())) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (categoryOptional.isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            if (!transaction.getCategories().contains(categoryOptional.get())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (fromOptional.isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            if (!transaction.getDate().after(fromOptional.get())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        if (untilOptional.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            if (!transaction.getDate().before(fromOptional.get())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                || (other instanceof TransactionMatchesConditionsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 accountOptional.equals(((TransactionMatchesConditionsPredicate) other).accountOptional)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 categoryOptional.equals(((TransactionMatchesConditionsPredicate) other).categoryOptional)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 fromOptional.equals(((TransactionMatchesConditionsPredicate) other).fromOptional)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "                \u0026\u0026 untilOptional.equals(((TransactionMatchesConditionsPredicate) other).untilOptional)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambrian-dk": 60,
      "thwnus": 3
    }
  },
  {
    "path": "src/main/java/budgetbuddy/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\")),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            new Person(new Name(\"Bernice Yu\")),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\")),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            new Person(new Name(\"David Li\")),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\")),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 7,
      "-": 11
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.LoansStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public interface Storage extends LoansStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    Path getLoansFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    void saveLoans(LoansManager loansManager) throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 4,
      "kenneth-fung": 8,
      "thwnus": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.LoansStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private LoansStorage loansStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public StorageManager(LoansStorage loansStorage,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loansStorage \u003d loansStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Loan Storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Path getLoansFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loansStorage.getLoansFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Optional\u003cLoansManager\u003e readLoans() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return readLoans(getLoansFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Optional\u003cLoansManager\u003e readLoans(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return loansStorage.readLoans(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void saveLoans(LoansManager loansManager) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        saveLoans(loansManager, loansStorage.getLoansFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void saveLoans(LoansManager loansManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loansStorage.saveLoans(loansManager, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "kenneth-fung": 33,
      "thwnus": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/loans/JsonAdaptedLoan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.storage.loans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.AppUtil.getDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.model.attributes.Direction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.transaction.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Jackson-friendly version of {@link budgetbuddy.model.loan.Loan}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class JsonAdaptedLoan {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Loan\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final String personName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final String direction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final long amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Constructs a {@code JsonAdaptedLoan} with the given loan details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public JsonAdaptedLoan(@JsonProperty(\"personName\") String personName,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                           @JsonProperty(\"direction\") String direction,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                           @JsonProperty(\"amount\") long amount,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                           @JsonProperty(\"date\") Date date,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                           @JsonProperty(\"status\") String status) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(personName, direction, amount, date, description, status);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.personName \u003d personName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.direction \u003d direction;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Converts a given {@code Loan} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param source"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public JsonAdaptedLoan(Loan source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        personName \u003d source.getPerson().getName().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        direction \u003d source.getDirection().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        amount \u003d source.getAmount().toLong();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        date \u003d source.getDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        status \u003d source.getStatus().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Converts this Jackson-friendly adapted loan object into the model\u0027s {@code Loan} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If any data constraints were violated in the adapted loan."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Loan toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Person person \u003d new Person(getValidatedName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Loan(person, getValidatedDirection(), getValidatedAmount(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                getValidatedDate(), getValidatedDescription(), getValidatedStatus());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Validates and converts the adapted name into the model\u0027s {@code Name} object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The validated and converted name."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Name getValidatedName() throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (personName \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!Name.isValidName(personName)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Name(personName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Validates and converts the adapted direction into the model\u0027s {@code Direction} object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The validated and converted direction."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Direction getValidatedDirection() throws IllegalValueException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (direction \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Direction.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!Direction.contains(direction)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException(Direction.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Direction.valueOf(direction);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Validates and converts the adapted amount into the model\u0027s {@code Amount} object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The validated and converted amount."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Amount getValidatedAmount() throws IllegalValueException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Amount(amount);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Validates the adapted date as a {@code java.util.Date} object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The validated date."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Date getValidatedDate() throws IllegalValueException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            String dateStr \u003d getDateFormat().format(date);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            getDateFormat().parse(dateStr);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException(\"Error reading stored date.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Validates and converts the adapted description into the model\u0027s {@code Description} object."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The validated and converted description."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Description getValidatedDescription() throws IllegalValueException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Validates and converts the adapted status into the model\u0027s {@code Status} object."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @return The validated and converted status."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If validation fails."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Status getValidatedStatus() throws IllegalValueException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!Status.contains(status)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return Status.valueOf(status);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 163,
      "thwnus": 2
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/loans/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.storage.loans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Person(modelName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 6,
      "-": 43
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/loans/JsonLoansStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.storage.loans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A class to access LoansManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class JsonLoansStorage implements LoansStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonLoansStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public JsonLoansStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Path getLoansFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Optional\u003cLoansManager\u003e readLoans() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return readLoans(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Similar to {@link #readLoans()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param filePath Location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws DataConversionException If the data file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public Optional\u003cLoansManager\u003e readLoans(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Optional\u003cJsonSerializableLoansManager\u003e jsonLoansManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                filePath, JsonSerializableLoansManager.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (jsonLoansManager.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return Optional.of(jsonLoansManager.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void saveLoans(LoansManager loansManager) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        saveLoans(loansManager, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Similar to {@link #saveLoans(LoansManager)}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param filePath Location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public void saveLoans(LoansManager loansManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        requireAllNonNull(loansManager, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableLoansManager(loansManager), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 78
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/loans/JsonSerializableLoansManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.storage.loans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * An immutable LoansManager that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "@JsonRootName(value \u003d \"loansmanager\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class JsonSerializableLoansManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final List\u003cJsonAdaptedLoan\u003e loans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Constructs a {@code JsonSerializableLoansManager} with the given loans."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public JsonSerializableLoansManager(@JsonProperty(\"loans\") List\u003cJsonAdaptedLoan\u003e persons) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loans.addAll(persons);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Converts a given {@code LoansManager} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param source Future changes to the source will not affect the created {@code JsonSerializableLoansManager}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public JsonSerializableLoansManager(LoansManager source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loans.addAll(source.getLoans().stream().map(JsonAdaptedLoan::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Converts this loans manager into the model\u0027s {@code LoansManager} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IllegalValueException If any data constraints are violated."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoansManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        List\u003cLoan\u003e loanList \u003d new ArrayList\u003cLoan\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        for (JsonAdaptedLoan jsonAdaptedLoan : loans) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            loanList.add(jsonAdaptedLoan.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new LoansManager(loanList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 50
    }
  },
  {
    "path": "src/main/java/budgetbuddy/storage/loans/LoansStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.storage.loans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.LoansManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Represents a storage for {@link LoansManager}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public interface LoansStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    Path getLoansFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns LoansManager data as a {@link LoansManager}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws DataConversionException If the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IOException If there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    Optional\u003cLoansManager\u003e readLoans() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @see #readLoans()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    Optional\u003cLoansManager\u003e readLoans(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Saves the given {@link LoansManager} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param loansManager Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @throws IOException If any problem occurs when writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    void saveLoans(LoansManager loansManager) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @param filePath The path to save the data file to."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * @see #saveLoans(LoansManager)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    void saveLoans(LoansManager loansManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 45
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/AccountCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * An UI component that displays information of a {@code Account}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public final Account account;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountCard(Account account, int displayedIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        this.account \u003d account;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambrian-dk"
        },
        "content": "        name.setText(account.getName().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        if (!(other instanceof AccountCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountCard card \u003d (AccountCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                \u0026\u0026 account.equals(card.account);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "ChenJiehan318": 8,
      "cambrian-dk": 1,
      "thwnus": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/AccountListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.account.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "public class AccountListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AccountListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private ListView\u003cAccount\u003e accountListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public AccountListPanel(ObservableList\u003cAccount\u003e accountList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        accountListView.setItems(accountList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        accountListView.setCellFactory(listView -\u003e new AccountListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    class AccountListViewCell extends ListCell\u003cAccount\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        protected void updateItem(Account account, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            super.updateItem(account, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            if (empty || account \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "                setGraphic(new AccountCard(account, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "ChenJiehan318": 43
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "-": 72
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-w13-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "ChenJiehan318": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandCategory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.panel.ListPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.ui.panel.LoanPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.panel.RulePanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private HashMap\u003cCommandCategory, ListPanel\u003e panelMap;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private RulePanel ruleListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private LoanPanel loanListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        panelMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // instantiate all list panels"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ruleListPanel \u003d new RulePanel(logic.getRuleList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        panelMap.put(CommandCategory.RULE, ruleListPanel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loanListPanel \u003d new LoanPanel(logic.getSortedLoanList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        panelMap.put(CommandCategory.LOAN, loanListPanel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // add initial panel as child"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // setCurrentPanel(INITIAL_PANEL_HERE.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private void setCurrentPanel(ListPanel toSwitch) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        listPanelPlaceholder.getChildren().add(toSwitch.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            ListPanel toSwitch \u003d panelMap.get(commandResult.getCommandCategory());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            if (toSwitch !\u003d null) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                setCurrentPanel(toSwitch);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 26,
      "kenneth-fung": 5,
      "thwnus": 5,
      "-": 178
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public StatusBarFooter() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        // TODO: Put something useful in the status bar"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        saveLocationStatus.setText(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "thwnus": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/calendar.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "ChenJiehan318": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/card/LoanCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.ui.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * A UI component that displays information of a {@code Loan}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final String FXML \u003d \"LoanCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public final Loan loan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Label amountDirectionPerson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanCard(Loan loan, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        this.loan \u003d loan;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        amountDirectionPerson.setText(loan.getEssentialInfo());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        date.setText(loan.getDateString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        description.setText(loan.getDescription().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        status.setText(loan.getStatus().getStatusIcon());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        if (!(other instanceof LoanCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoanCard otherCard \u003d (LoanCard) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return id.getText().equals(otherCard.id.getText())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u0026\u0026 loan.equals(otherCard.loan);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 57
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/card/RuleCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RuleAction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.RulePredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.ActionExpression;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.expression.PredicateExpression;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * An UI component that displays information of a {@code Rule}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final String FXML \u003d \"RuleCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public final Rule rule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Label predicatePrefix;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Label predicateDelimiter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Label actionPrefix;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private Label actionDelimiter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private FlowPane predicateFlow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private FlowPane actionFlow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RuleCard(Rule rule, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        this.rule \u003d rule;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        id.setText(\"Rule #\" + displayedIndex + \": \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RulePredicate predicate \u003d rule.getPredicate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        predicatePrefix.setText(\"IF\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        predicateDelimiter.setText(\":\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (predicate.getType().equals(Rule.TYPE_EXPRESSION)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            PredicateExpression predExpr \u003d (PredicateExpression) predicate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Label attr \u003d new Label(predExpr.getAttribute().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Label op \u003d new Label(predExpr.getOperator().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Label val \u003d new Label(predExpr.getValue().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            attr.setId(\"predAttr\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            op.setId(\"predOp\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            val.setId(\"predVal\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            predicateFlow.getChildren().addAll(attr, op, val);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            predicateFlow.getChildren().add(new Label(predicate.toString()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleAction action \u003d rule.getAction();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        actionPrefix.setText(\"THEN\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        actionDelimiter.setText(\":\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (action.getType().equals(Rule.TYPE_EXPRESSION)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            ActionExpression actExpr \u003d (ActionExpression) action;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Label op \u003d new Label(actExpr.getOperator().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            Label val \u003d new Label(actExpr.getValue().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            op.setId(\"actOp\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            val.setId(\"actVal\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            actionFlow.getChildren().addAll(op, val);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            actionFlow.getChildren().add(new Label(action.toString()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        if (!(other instanceof RuleCard)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleCard card \u003d (RuleCard) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                \u0026\u0026 rule.equals(card.rule);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 96
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/panel/ListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.UiPart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Represents an abstract panel containing a list of items."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public abstract class ListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public ListPanel(String fxmlFileName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(fxmlFileName);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 13
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/panel/LoanPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "package budgetbuddy.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.loan.Loan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.ui.card.LoanCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " * Panel containing the list of loans."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "public class LoanPanel extends ListPanel {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private static final String FXML \u003d \"LoanPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LoanPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    private ListView\u003cLoan\u003e loanListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public LoanPanel(SortedList\u003cLoan\u003e sortedLoanList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loanListView.setItems(sortedLoanList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        loanListView.setCellFactory(loanListView -\u003e new LoanListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Loan} using a {@code LoanCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    class LoanListViewCell extends ListCell\u003cLoan\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        protected void updateItem(Loan loan, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            super.updateItem(loan, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            if (empty || loan \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                setGraphic(new LoanCard(loan, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                loanListView.refresh();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 48
    }
  },
  {
    "path": "src/main/java/budgetbuddy/ui/panel/RulePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.rule.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.ui.card.RuleCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": " * Panel containing the list of rules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class RulePanel extends ListPanel {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final String FXML \u003d \"RulePanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RulePanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private ListView\u003cRule\u003e ruleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    public RulePanel(ObservableList\u003cRule\u003e ruleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ruleListView.setItems(ruleList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ruleListView.setCellFactory(listView -\u003e new RuleListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Rule} using a {@code RuleCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    class RuleListViewCell extends ListCell\u003cRule\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        protected void updateItem(Rule rule, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            super.updateItem(rule, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            if (empty || rule \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "                setGraphic(new RuleCard(rule, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 45
    }
  },
  {
    "path": "src/main/resources/view/ColorfulTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    background-color: #FFC0CB; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-base: #FFC0CB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-control-inner-background: #FFC0CB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #FFC0CB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color: transparent transparent transparent #FFC0CB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #FFC0CB;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #FFC0CB;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #FFC0CB;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color: #FFC0CB;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     -fx-border-color: derive(#FFC0CB, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color: derive(#FFC0CB, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color: derive(#FFC0CB, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-border-color: black, black;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #FFC0CB;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #FFC0CB;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: derive(#FFC0CB, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent #FFC0CB transparent #FFC0CB;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-color: #FFC0CB #F5F5F5 #ffffff #F5F5F5;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #B0E0E6;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenJiehan318": 335,
      "kenneth-fung": 17
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tcgj"
        },
        "content": "#predOp, #actOp, #predAttr, #predVal, #actVal {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-padding: 1 3 3 3;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tcgj"
        },
        "content": "#predOp, #actOp {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-background-color: #f67280;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tcgj"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tcgj"
        },
        "content": "#predAttr, #predVal, #actVal {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    -fx-background-color: #f8b595;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 13,
      "-": 346
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/LoanCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"80\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cLabel fx:id\u003d\"amountDirectionPerson\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 41
    }
  },
  {
    "path": "src/main/resources/view/LoanPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    \u003cListView fx:id\u003d\"loanListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kenneth-fung": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "         title\u003d\"BudgetBuddy\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "    \u003cImage url\u003d\"@/images/account_book.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        \u003cVBox fx:id\u003d\"contextList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "          \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "ChenJiehan318": 2,
      "kenneth-fung": 2,
      "-": 53
    }
  },
  {
    "path": "src/main/resources/view/RuleCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "  \u003cGridPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "  \u003cLabel fx:id\u003d\"id\" alignment\u003d\"TOP_CENTER\" styleClass\u003d\"cell_big_label\" textOverrun\u003d\"CLIP\" GridPane.columnSpan\u003d\"2147483647\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tcgj"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "  \u003cLabel fx:id\u003d\"predicatePrefix\" style\u003d\"-fx-font-weight: bold\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cLabel fx:id\u003d\"actionPrefix\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cLabel fx:id\u003d\"predicateDelimiter\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cLabel fx:id\u003d\"actionDelimiter\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tcgj"
        },
        "content": "   \u003cFlowPane fx:id\u003d\"predicateFlow\" alignment\u003d\"CENTER_LEFT\" hgap\u003d\"5.0\" prefWrapLength\u003d\"200.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"actionFlow\" alignment\u003d\"CENTER_LEFT\" hgap\u003d\"5.0\" prefWrapLength\u003d\"100.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            \u003cInsets left\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "         \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tcgj"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tcgj"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tcgj": 67
    }
  },
  {
    "path": "src/main/resources/view/RulePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "  \u003cListView fx:id\u003d\"ruleListView\" mouseTransparent\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tcgj": 8
    }
  },
  {
    "path": "src/test/java/budgetbuddy/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/budgetbuddy/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_ACCOUNT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thwnus"
        },
        "content": "import budgetbuddy.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.JsonLoansStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    // TODO"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    // private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        JsonLoansStorage loansStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new JsonLoansStorage(temporaryFolder.resolve(\"loans.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        StorageManager storage \u003d new StorageManager(loansStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        String deleteCommand \u003d \"account delete 9\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ACCOUNT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        String listCommand \u003d HelpCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        assertCommandSuccess(listCommand, HelpCommand.SHOWING_HELP_MESSAGE, model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    // TODO: Add an equivalent test for accounts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        JsonLoansStorage loansStorage \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new JsonLoansStorage(temporaryFolder.resolve(\"ioExceptionLoans.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, loansStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(TypicalPersons.AMY).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thwnus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLoansManager(), model.getRuleManager(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                model.getAccountsManager(), new UserPrefs());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    // TODO: Add an equivalent for our accounts"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /* private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 13,
      "thwnus": 17,
      "kenneth-fung": 7,
      "-": 117
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", null);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", null)));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", null, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\", null)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", null, true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", null, false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\", null).hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\", null).hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", null, true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", null, false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 12,
      "-": 42
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thwnus"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    // TODO Add an equivalent for accounts"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "thwnus": 5,
      "-": 60
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, null, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "-": 14
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, null, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "-": 14
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/parser/CommandLineParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thwnus"
        },
        "content": "public class CommandLineParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    private final CommandLineParser parser \u003d new CommandLineParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 7,
      "thwnus": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static void assertParseSuccess(CommandParser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thwnus"
        },
        "content": "    public static void assertParseFailure(CommandParser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "thwnus": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/budgetbuddy/logic/parser/CommandParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.parser.CommandParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "public class CommandParserUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e CommandParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tcgj"
        },
        "content": "            -\u003e CommandParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, CommandParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, CommandParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CommandParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e CommandParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertEquals(expectedName, CommandParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertEquals(expectedName, CommandParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 14,
      "kenneth-fung": 1,
      "-": 47
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        LoansManager loansManager \u003d new LoansManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        RuleManager ruleManager \u003d new RuleManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenJiehan318"
        },
        "content": "        AccountsManager accountsManager \u003d new AccountsManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        modelManager \u003d new ModelManager(loansManager, ruleManager, accountsManager, userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(loansManager, ruleManager, accountsManager,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(loansManager, ruleManager, accountsManager,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thwnus"
        },
        "content": "                differentUserPrefs)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 6,
      "ChenJiehan318": 1,
      "kenneth-fung": 1,
      "thwnus": 3,
      "-": 72
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 18
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/budgetbuddy/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "kenneth-fung": 1,
      "-": 44
    }
  },
  {
    "path": "src/test/java/budgetbuddy/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.JsonAdaptedPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "    private static final String VALID_NAME \u003d TypicalPersons.BENSON.getName().toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tcgj"
        },
        "content": "        assertEquals(TypicalPersons.BENSON, person.toModelType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 7,
      "kenneth-fung": 3,
      "-": 22
    }
  },
  {
    "path": "src/test/java/budgetbuddy/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "-": 118
    }
  },
  {
    "path": "src/test/java/budgetbuddy/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.storage.loans.JsonLoansStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        JsonLoansStorage loansStorage \u003d new JsonLoansStorage(getTempFilePath(\"loans\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thwnus"
        },
        "content": "        storageManager \u003d new StorageManager(loansStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "kenneth-fung": 2,
      "thwnus": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "import budgetbuddy.model.attributes.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Kurtz\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "        return new Person(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "kenneth-fung": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 29
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/budgetbuddy/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tcgj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kenneth-fung"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 5,
      "kenneth-fung": 11,
      "-": 16
    }
  },
  {
    "path": "src/test/java/budgetbuddy/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/budgetbuddy/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tcgj"
        },
        "content": "package budgetbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import static budgetbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tcgj"
        },
        "content": "import budgetbuddy.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tcgj": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import budgetbuddy.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "tcgj": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003c?import budgetbuddy.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tcgj"
        },
        "content": "\u003cfx:root type\u003d\"TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tcgj": 2,
      "-": 5
    }
  }
]
